
TUT_UAB_HOST_HID.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007e1c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000444  08007fac  08007fac  00017fac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080083f0  080083f0  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  080083f0  080083f0  000183f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080083f8  080083f8  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080083f8  080083f8  000183f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080083fc  080083fc  000183fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08008400  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007bc  20000090  08008490  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000084c  08008490  0002084c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019ce6  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b0e  00000000  00000000  00039da6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cf0  00000000  00000000  0003d8b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b78  00000000  00000000  0003e5a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002425f  00000000  00000000  0003f120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013223  00000000  00000000  0006337f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c85a5  00000000  00000000  000765a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0013eb47  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003768  00000000  00000000  0013eb9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000090 	.word	0x20000090
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007f94 	.word	0x08007f94

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000094 	.word	0x20000094
 80001cc:	08007f94 	.word	0x08007f94

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96e 	b.w	8000564 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468c      	mov	ip, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8083 	bne.w	80003b6 <__udivmoddi4+0x116>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d947      	bls.n	8000346 <__udivmoddi4+0xa6>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b142      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002bc:	f1c2 0020 	rsb	r0, r2, #32
 80002c0:	fa24 f000 	lsr.w	r0, r4, r0
 80002c4:	4091      	lsls	r1, r2
 80002c6:	4097      	lsls	r7, r2
 80002c8:	ea40 0c01 	orr.w	ip, r0, r1
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbbc f6f8 	udiv	r6, ip, r8
 80002d8:	fa1f fe87 	uxth.w	lr, r7
 80002dc:	fb08 c116 	mls	r1, r8, r6, ip
 80002e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e4:	fb06 f10e 	mul.w	r1, r6, lr
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f2:	f080 8119 	bcs.w	8000528 <__udivmoddi4+0x288>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8116 	bls.w	8000528 <__udivmoddi4+0x288>
 80002fc:	3e02      	subs	r6, #2
 80002fe:	443b      	add	r3, r7
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0f8 	udiv	r0, r3, r8
 8000308:	fb08 3310 	mls	r3, r8, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	45a6      	cmp	lr, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8105 	bcs.w	800052c <__udivmoddi4+0x28c>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f240 8102 	bls.w	800052c <__udivmoddi4+0x28c>
 8000328:	3802      	subs	r0, #2
 800032a:	443c      	add	r4, r7
 800032c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000330:	eba4 040e 	sub.w	r4, r4, lr
 8000334:	2600      	movs	r6, #0
 8000336:	b11d      	cbz	r5, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c5 4300 	strd	r4, r3, [r5]
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xaa>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f282 	clz	r2, r2
 800034e:	2a00      	cmp	r2, #0
 8000350:	d150      	bne.n	80003f4 <__udivmoddi4+0x154>
 8000352:	1bcb      	subs	r3, r1, r7
 8000354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	2601      	movs	r6, #1
 800035e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000362:	0c21      	lsrs	r1, r4, #16
 8000364:	fb0e 331c 	mls	r3, lr, ip, r3
 8000368:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800036c:	fb08 f30c 	mul.w	r3, r8, ip
 8000370:	428b      	cmp	r3, r1
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0xe4>
 8000374:	1879      	adds	r1, r7, r1
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0xe2>
 800037c:	428b      	cmp	r3, r1
 800037e:	f200 80e9 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 8000382:	4684      	mov	ip, r0
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000390:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x10c>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x10a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80d9 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e7bf      	b.n	8000336 <__udivmoddi4+0x96>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x12e>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	f000 80b1 	beq.w	8000522 <__udivmoddi4+0x282>
 80003c0:	2600      	movs	r6, #0
 80003c2:	e9c5 0100 	strd	r0, r1, [r5]
 80003c6:	4630      	mov	r0, r6
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f683 	clz	r6, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d14a      	bne.n	800046c <__udivmoddi4+0x1cc>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0x140>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80b8 	bhi.w	8000550 <__udivmoddi4+0x2b0>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0103 	sbc.w	r1, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	468c      	mov	ip, r1
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0a8      	beq.n	8000340 <__udivmoddi4+0xa0>
 80003ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0xa0>
 80003f4:	f1c2 0320 	rsb	r3, r2, #32
 80003f8:	fa20 f603 	lsr.w	r6, r0, r3
 80003fc:	4097      	lsls	r7, r2
 80003fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000402:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000406:	40d9      	lsrs	r1, r3
 8000408:	4330      	orrs	r0, r6
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000410:	fa1f f887 	uxth.w	r8, r7
 8000414:	fb0e 1116 	mls	r1, lr, r6, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb06 f108 	mul.w	r1, r6, r8
 8000420:	4299      	cmp	r1, r3
 8000422:	fa04 f402 	lsl.w	r4, r4, r2
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x19c>
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	f106 3cff 	add.w	ip, r6, #4294967295
 800042e:	f080 808d 	bcs.w	800054c <__udivmoddi4+0x2ac>
 8000432:	4299      	cmp	r1, r3
 8000434:	f240 808a 	bls.w	800054c <__udivmoddi4+0x2ac>
 8000438:	3e02      	subs	r6, #2
 800043a:	443b      	add	r3, r7
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	b281      	uxth	r1, r0
 8000440:	fbb3 f0fe 	udiv	r0, r3, lr
 8000444:	fb0e 3310 	mls	r3, lr, r0, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb00 f308 	mul.w	r3, r0, r8
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x1c4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f100 3cff 	add.w	ip, r0, #4294967295
 800045a:	d273      	bcs.n	8000544 <__udivmoddi4+0x2a4>
 800045c:	428b      	cmp	r3, r1
 800045e:	d971      	bls.n	8000544 <__udivmoddi4+0x2a4>
 8000460:	3802      	subs	r0, #2
 8000462:	4439      	add	r1, r7
 8000464:	1acb      	subs	r3, r1, r3
 8000466:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046a:	e778      	b.n	800035e <__udivmoddi4+0xbe>
 800046c:	f1c6 0c20 	rsb	ip, r6, #32
 8000470:	fa03 f406 	lsl.w	r4, r3, r6
 8000474:	fa22 f30c 	lsr.w	r3, r2, ip
 8000478:	431c      	orrs	r4, r3
 800047a:	fa20 f70c 	lsr.w	r7, r0, ip
 800047e:	fa01 f306 	lsl.w	r3, r1, r6
 8000482:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000486:	fa21 f10c 	lsr.w	r1, r1, ip
 800048a:	431f      	orrs	r7, r3
 800048c:	0c3b      	lsrs	r3, r7, #16
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fa1f f884 	uxth.w	r8, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800049e:	fb09 fa08 	mul.w	sl, r9, r8
 80004a2:	458a      	cmp	sl, r1
 80004a4:	fa02 f206 	lsl.w	r2, r2, r6
 80004a8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x220>
 80004ae:	1861      	adds	r1, r4, r1
 80004b0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b4:	d248      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 80004b6:	458a      	cmp	sl, r1
 80004b8:	d946      	bls.n	8000548 <__udivmoddi4+0x2a8>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4421      	add	r1, r4
 80004c0:	eba1 010a 	sub.w	r1, r1, sl
 80004c4:	b2bf      	uxth	r7, r7
 80004c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d2:	fb00 f808 	mul.w	r8, r0, r8
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x24a>
 80004da:	19e7      	adds	r7, r4, r7
 80004dc:	f100 31ff 	add.w	r1, r0, #4294967295
 80004e0:	d22e      	bcs.n	8000540 <__udivmoddi4+0x2a0>
 80004e2:	45b8      	cmp	r8, r7
 80004e4:	d92c      	bls.n	8000540 <__udivmoddi4+0x2a0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4427      	add	r7, r4
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	eba7 0708 	sub.w	r7, r7, r8
 80004f2:	fba0 8902 	umull	r8, r9, r0, r2
 80004f6:	454f      	cmp	r7, r9
 80004f8:	46c6      	mov	lr, r8
 80004fa:	4649      	mov	r1, r9
 80004fc:	d31a      	bcc.n	8000534 <__udivmoddi4+0x294>
 80004fe:	d017      	beq.n	8000530 <__udivmoddi4+0x290>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x27a>
 8000502:	ebb3 020e 	subs.w	r2, r3, lr
 8000506:	eb67 0701 	sbc.w	r7, r7, r1
 800050a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800050e:	40f2      	lsrs	r2, r6
 8000510:	ea4c 0202 	orr.w	r2, ip, r2
 8000514:	40f7      	lsrs	r7, r6
 8000516:	e9c5 2700 	strd	r2, r7, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	462e      	mov	r6, r5
 8000524:	4628      	mov	r0, r5
 8000526:	e70b      	b.n	8000340 <__udivmoddi4+0xa0>
 8000528:	4606      	mov	r6, r0
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0x60>
 800052c:	4618      	mov	r0, r3
 800052e:	e6fd      	b.n	800032c <__udivmoddi4+0x8c>
 8000530:	4543      	cmp	r3, r8
 8000532:	d2e5      	bcs.n	8000500 <__udivmoddi4+0x260>
 8000534:	ebb8 0e02 	subs.w	lr, r8, r2
 8000538:	eb69 0104 	sbc.w	r1, r9, r4
 800053c:	3801      	subs	r0, #1
 800053e:	e7df      	b.n	8000500 <__udivmoddi4+0x260>
 8000540:	4608      	mov	r0, r1
 8000542:	e7d2      	b.n	80004ea <__udivmoddi4+0x24a>
 8000544:	4660      	mov	r0, ip
 8000546:	e78d      	b.n	8000464 <__udivmoddi4+0x1c4>
 8000548:	4681      	mov	r9, r0
 800054a:	e7b9      	b.n	80004c0 <__udivmoddi4+0x220>
 800054c:	4666      	mov	r6, ip
 800054e:	e775      	b.n	800043c <__udivmoddi4+0x19c>
 8000550:	4630      	mov	r0, r6
 8000552:	e74a      	b.n	80003ea <__udivmoddi4+0x14a>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	4439      	add	r1, r7
 800055a:	e713      	b.n	8000384 <__udivmoddi4+0xe4>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	e724      	b.n	80003ac <__udivmoddi4+0x10c>
 8000562:	bf00      	nop

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <USBH_HID_EventCallback>:
/* USER CODE BEGIN 0 */

char Uart_Buf[100];

void USBH_HID_EventCallback(USBH_HandleTypeDef *phost)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b08e      	sub	sp, #56	; 0x38
 800056c:	af04      	add	r7, sp, #16
 800056e:	6078      	str	r0, [r7, #4]
	if (USBH_HID_GetDeviceType(phost) == HID_MOUSE)
 8000570:	6878      	ldr	r0, [r7, #4]
 8000572:	f004 ff03 	bl	800537c <USBH_HID_GetDeviceType>
 8000576:	4603      	mov	r3, r0
 8000578:	2b01      	cmp	r3, #1
 800057a:	d12f      	bne.n	80005dc <USBH_HID_EventCallback+0x74>
	{
		HID_MOUSE_Info_TypeDef *Mouse_Info;
		Mouse_Info = USBH_HID_GetMouseInfo(phost);
 800057c:	6878      	ldr	r0, [r7, #4]
 800057e:	f005 f953 	bl	8005828 <USBH_HID_GetMouseInfo>
 8000582:	61f8      	str	r0, [r7, #28]
		int X_VAL = Mouse_Info->x;
 8000584:	69fb      	ldr	r3, [r7, #28]
 8000586:	781b      	ldrb	r3, [r3, #0]
 8000588:	627b      	str	r3, [r7, #36]	; 0x24
		int Y_VAL = Mouse_Info->y;
 800058a:	69fb      	ldr	r3, [r7, #28]
 800058c:	785b      	ldrb	r3, [r3, #1]
 800058e:	623b      	str	r3, [r7, #32]
		if (X_VAL > 127) X_VAL -= 255;
 8000590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000592:	2b7f      	cmp	r3, #127	; 0x7f
 8000594:	dd02      	ble.n	800059c <USBH_HID_EventCallback+0x34>
 8000596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000598:	3bff      	subs	r3, #255	; 0xff
 800059a:	627b      	str	r3, [r7, #36]	; 0x24
		if (Y_VAL > 127) Y_VAL -= 255;
 800059c:	6a3b      	ldr	r3, [r7, #32]
 800059e:	2b7f      	cmp	r3, #127	; 0x7f
 80005a0:	dd02      	ble.n	80005a8 <USBH_HID_EventCallback+0x40>
 80005a2:	6a3b      	ldr	r3, [r7, #32]
 80005a4:	3bff      	subs	r3, #255	; 0xff
 80005a6:	623b      	str	r3, [r7, #32]

		int len = sprintf (Uart_Buf, "X=%d, Y=%d, Button1=%d, Button2=%d, Button3=%d\n", X_VAL, Y_VAL, \
				                                Mouse_Info->buttons[0],Mouse_Info->buttons[1], Mouse_Info->buttons[2]);
 80005a8:	69fb      	ldr	r3, [r7, #28]
 80005aa:	789b      	ldrb	r3, [r3, #2]
		int len = sprintf (Uart_Buf, "X=%d, Y=%d, Button1=%d, Button2=%d, Button3=%d\n", X_VAL, Y_VAL, \
 80005ac:	461a      	mov	r2, r3
				                                Mouse_Info->buttons[0],Mouse_Info->buttons[1], Mouse_Info->buttons[2]);
 80005ae:	69fb      	ldr	r3, [r7, #28]
 80005b0:	78db      	ldrb	r3, [r3, #3]
		int len = sprintf (Uart_Buf, "X=%d, Y=%d, Button1=%d, Button2=%d, Button3=%d\n", X_VAL, Y_VAL, \
 80005b2:	4619      	mov	r1, r3
				                                Mouse_Info->buttons[0],Mouse_Info->buttons[1], Mouse_Info->buttons[2]);
 80005b4:	69fb      	ldr	r3, [r7, #28]
 80005b6:	791b      	ldrb	r3, [r3, #4]
		int len = sprintf (Uart_Buf, "X=%d, Y=%d, Button1=%d, Button2=%d, Button3=%d\n", X_VAL, Y_VAL, \
 80005b8:	9302      	str	r3, [sp, #8]
 80005ba:	9101      	str	r1, [sp, #4]
 80005bc:	9200      	str	r2, [sp, #0]
 80005be:	6a3b      	ldr	r3, [r7, #32]
 80005c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80005c2:	4917      	ldr	r1, [pc, #92]	; (8000620 <USBH_HID_EventCallback+0xb8>)
 80005c4:	4817      	ldr	r0, [pc, #92]	; (8000624 <USBH_HID_EventCallback+0xbc>)
 80005c6:	f007 f971 	bl	80078ac <siprintf>
 80005ca:	61b8      	str	r0, [r7, #24]
		HAL_UART_Transmit(&huart2, (uint8_t *)Uart_Buf, len, 1000);
 80005cc:	69bb      	ldr	r3, [r7, #24]
 80005ce:	b29a      	uxth	r2, r3
 80005d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005d4:	4913      	ldr	r1, [pc, #76]	; (8000624 <USBH_HID_EventCallback+0xbc>)
 80005d6:	4814      	ldr	r0, [pc, #80]	; (8000628 <USBH_HID_EventCallback+0xc0>)
 80005d8:	f002 ff43 	bl	8003462 <HAL_UART_Transmit>
	}

	if (USBH_HID_GetDeviceType(phost) == HID_KEYBOARD)
 80005dc:	6878      	ldr	r0, [r7, #4]
 80005de:	f004 fecd 	bl	800537c <USBH_HID_GetDeviceType>
 80005e2:	4603      	mov	r3, r0
 80005e4:	2b02      	cmp	r3, #2
 80005e6:	d117      	bne.n	8000618 <USBH_HID_EventCallback+0xb0>
	{
		HID_KEYBD_Info_TypeDef *Keyboard_Info;
		Keyboard_Info = USBH_HID_GetKeybdInfo(phost);
 80005e8:	6878      	ldr	r0, [r7, #4]
 80005ea:	f005 f803 	bl	80055f4 <USBH_HID_GetKeybdInfo>
 80005ee:	6178      	str	r0, [r7, #20]
		char key = USBH_HID_GetASCIICode (Keyboard_Info);
 80005f0:	6978      	ldr	r0, [r7, #20]
 80005f2:	f005 f8a3 	bl	800573c <USBH_HID_GetASCIICode>
 80005f6:	4603      	mov	r3, r0
 80005f8:	74fb      	strb	r3, [r7, #19]

		int len = sprintf (Uart_Buf, "Key Pressed = %c\n", key);
 80005fa:	7cfb      	ldrb	r3, [r7, #19]
 80005fc:	461a      	mov	r2, r3
 80005fe:	490b      	ldr	r1, [pc, #44]	; (800062c <USBH_HID_EventCallback+0xc4>)
 8000600:	4808      	ldr	r0, [pc, #32]	; (8000624 <USBH_HID_EventCallback+0xbc>)
 8000602:	f007 f953 	bl	80078ac <siprintf>
 8000606:	60f8      	str	r0, [r7, #12]
		HAL_UART_Transmit(&huart2, (uint8_t *)Uart_Buf, len, 1000);
 8000608:	68fb      	ldr	r3, [r7, #12]
 800060a:	b29a      	uxth	r2, r3
 800060c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000610:	4904      	ldr	r1, [pc, #16]	; (8000624 <USBH_HID_EventCallback+0xbc>)
 8000612:	4805      	ldr	r0, [pc, #20]	; (8000628 <USBH_HID_EventCallback+0xc0>)
 8000614:	f002 ff25 	bl	8003462 <HAL_UART_Transmit>
	}
}
 8000618:	bf00      	nop
 800061a:	3728      	adds	r7, #40	; 0x28
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}
 8000620:	08007fac 	.word	0x08007fac
 8000624:	20000100 	.word	0x20000100
 8000628:	200000c0 	.word	0x200000c0
 800062c:	08007fdc 	.word	0x08007fdc

08000630 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000634:	f000 fa0c 	bl	8000a50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000638:	f000 f80a 	bl	8000650 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800063c:	f000 f89c 	bl	8000778 <MX_GPIO_Init>
  MX_USB_HOST_Init();
 8000640:	f006 fd2e 	bl	80070a0 <MX_USB_HOST_Init>
  MX_USART2_UART_Init();
 8000644:	f000 f86e 	bl	8000724 <MX_USART2_UART_Init>
    //char Test_Uart_Buf[100];
    // len;
    while (1)
    {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000648:	f006 fd50 	bl	80070ec <MX_USB_HOST_Process>
 800064c:	e7fc      	b.n	8000648 <main+0x18>
	...

08000650 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b094      	sub	sp, #80	; 0x50
 8000654:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000656:	f107 0320 	add.w	r3, r7, #32
 800065a:	2230      	movs	r2, #48	; 0x30
 800065c:	2100      	movs	r1, #0
 800065e:	4618      	mov	r0, r3
 8000660:	f007 f862 	bl	8007728 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000664:	f107 030c 	add.w	r3, r7, #12
 8000668:	2200      	movs	r2, #0
 800066a:	601a      	str	r2, [r3, #0]
 800066c:	605a      	str	r2, [r3, #4]
 800066e:	609a      	str	r2, [r3, #8]
 8000670:	60da      	str	r2, [r3, #12]
 8000672:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000674:	2300      	movs	r3, #0
 8000676:	60bb      	str	r3, [r7, #8]
 8000678:	4b28      	ldr	r3, [pc, #160]	; (800071c <SystemClock_Config+0xcc>)
 800067a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800067c:	4a27      	ldr	r2, [pc, #156]	; (800071c <SystemClock_Config+0xcc>)
 800067e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000682:	6413      	str	r3, [r2, #64]	; 0x40
 8000684:	4b25      	ldr	r3, [pc, #148]	; (800071c <SystemClock_Config+0xcc>)
 8000686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000688:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800068c:	60bb      	str	r3, [r7, #8]
 800068e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000690:	2300      	movs	r3, #0
 8000692:	607b      	str	r3, [r7, #4]
 8000694:	4b22      	ldr	r3, [pc, #136]	; (8000720 <SystemClock_Config+0xd0>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a21      	ldr	r2, [pc, #132]	; (8000720 <SystemClock_Config+0xd0>)
 800069a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800069e:	6013      	str	r3, [r2, #0]
 80006a0:	4b1f      	ldr	r3, [pc, #124]	; (8000720 <SystemClock_Config+0xd0>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006a8:	607b      	str	r3, [r7, #4]
 80006aa:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006ac:	2301      	movs	r3, #1
 80006ae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006b0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006b4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006b6:	2302      	movs	r3, #2
 80006b8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006ba:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006be:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006c0:	2308      	movs	r3, #8
 80006c2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80006c4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80006c8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006ca:	2302      	movs	r3, #2
 80006cc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006ce:	2307      	movs	r3, #7
 80006d0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006d2:	f107 0320 	add.w	r3, r7, #32
 80006d6:	4618      	mov	r0, r3
 80006d8:	f002 fa0a 	bl	8002af0 <HAL_RCC_OscConfig>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80006e2:	f000 f899 	bl	8000818 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006e6:	230f      	movs	r3, #15
 80006e8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ea:	2302      	movs	r3, #2
 80006ec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ee:	2300      	movs	r3, #0
 80006f0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006f2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006f6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006fc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006fe:	f107 030c 	add.w	r3, r7, #12
 8000702:	2105      	movs	r1, #5
 8000704:	4618      	mov	r0, r3
 8000706:	f002 fc63 	bl	8002fd0 <HAL_RCC_ClockConfig>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000710:	f000 f882 	bl	8000818 <Error_Handler>
  }
}
 8000714:	bf00      	nop
 8000716:	3750      	adds	r7, #80	; 0x50
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}
 800071c:	40023800 	.word	0x40023800
 8000720:	40007000 	.word	0x40007000

08000724 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000728:	4b11      	ldr	r3, [pc, #68]	; (8000770 <MX_USART2_UART_Init+0x4c>)
 800072a:	4a12      	ldr	r2, [pc, #72]	; (8000774 <MX_USART2_UART_Init+0x50>)
 800072c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 230400;
 800072e:	4b10      	ldr	r3, [pc, #64]	; (8000770 <MX_USART2_UART_Init+0x4c>)
 8000730:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 8000734:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000736:	4b0e      	ldr	r3, [pc, #56]	; (8000770 <MX_USART2_UART_Init+0x4c>)
 8000738:	2200      	movs	r2, #0
 800073a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800073c:	4b0c      	ldr	r3, [pc, #48]	; (8000770 <MX_USART2_UART_Init+0x4c>)
 800073e:	2200      	movs	r2, #0
 8000740:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000742:	4b0b      	ldr	r3, [pc, #44]	; (8000770 <MX_USART2_UART_Init+0x4c>)
 8000744:	2200      	movs	r2, #0
 8000746:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000748:	4b09      	ldr	r3, [pc, #36]	; (8000770 <MX_USART2_UART_Init+0x4c>)
 800074a:	220c      	movs	r2, #12
 800074c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800074e:	4b08      	ldr	r3, [pc, #32]	; (8000770 <MX_USART2_UART_Init+0x4c>)
 8000750:	2200      	movs	r2, #0
 8000752:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000754:	4b06      	ldr	r3, [pc, #24]	; (8000770 <MX_USART2_UART_Init+0x4c>)
 8000756:	2200      	movs	r2, #0
 8000758:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800075a:	4805      	ldr	r0, [pc, #20]	; (8000770 <MX_USART2_UART_Init+0x4c>)
 800075c:	f002 fe34 	bl	80033c8 <HAL_UART_Init>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000766:	f000 f857 	bl	8000818 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800076a:	bf00      	nop
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	200000c0 	.word	0x200000c0
 8000774:	40004400 	.word	0x40004400

08000778 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b088      	sub	sp, #32
 800077c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800077e:	f107 030c 	add.w	r3, r7, #12
 8000782:	2200      	movs	r2, #0
 8000784:	601a      	str	r2, [r3, #0]
 8000786:	605a      	str	r2, [r3, #4]
 8000788:	609a      	str	r2, [r3, #8]
 800078a:	60da      	str	r2, [r3, #12]
 800078c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800078e:	2300      	movs	r3, #0
 8000790:	60bb      	str	r3, [r7, #8]
 8000792:	4b1f      	ldr	r3, [pc, #124]	; (8000810 <MX_GPIO_Init+0x98>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	4a1e      	ldr	r2, [pc, #120]	; (8000810 <MX_GPIO_Init+0x98>)
 8000798:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800079c:	6313      	str	r3, [r2, #48]	; 0x30
 800079e:	4b1c      	ldr	r3, [pc, #112]	; (8000810 <MX_GPIO_Init+0x98>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007a6:	60bb      	str	r3, [r7, #8]
 80007a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007aa:	2300      	movs	r3, #0
 80007ac:	607b      	str	r3, [r7, #4]
 80007ae:	4b18      	ldr	r3, [pc, #96]	; (8000810 <MX_GPIO_Init+0x98>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	4a17      	ldr	r2, [pc, #92]	; (8000810 <MX_GPIO_Init+0x98>)
 80007b4:	f043 0304 	orr.w	r3, r3, #4
 80007b8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ba:	4b15      	ldr	r3, [pc, #84]	; (8000810 <MX_GPIO_Init+0x98>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	f003 0304 	and.w	r3, r3, #4
 80007c2:	607b      	str	r3, [r7, #4]
 80007c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007c6:	2300      	movs	r3, #0
 80007c8:	603b      	str	r3, [r7, #0]
 80007ca:	4b11      	ldr	r3, [pc, #68]	; (8000810 <MX_GPIO_Init+0x98>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	4a10      	ldr	r2, [pc, #64]	; (8000810 <MX_GPIO_Init+0x98>)
 80007d0:	f043 0301 	orr.w	r3, r3, #1
 80007d4:	6313      	str	r3, [r2, #48]	; 0x30
 80007d6:	4b0e      	ldr	r3, [pc, #56]	; (8000810 <MX_GPIO_Init+0x98>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	f003 0301 	and.w	r3, r3, #1
 80007de:	603b      	str	r3, [r7, #0]
 80007e0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 80007e2:	2200      	movs	r2, #0
 80007e4:	2101      	movs	r1, #1
 80007e6:	480b      	ldr	r0, [pc, #44]	; (8000814 <MX_GPIO_Init+0x9c>)
 80007e8:	f000 fc76 	bl	80010d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80007ec:	2301      	movs	r3, #1
 80007ee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007f0:	2301      	movs	r3, #1
 80007f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f4:	2300      	movs	r3, #0
 80007f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f8:	2300      	movs	r3, #0
 80007fa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007fc:	f107 030c 	add.w	r3, r7, #12
 8000800:	4619      	mov	r1, r3
 8000802:	4804      	ldr	r0, [pc, #16]	; (8000814 <MX_GPIO_Init+0x9c>)
 8000804:	f000 facc 	bl	8000da0 <HAL_GPIO_Init>

}
 8000808:	bf00      	nop
 800080a:	3720      	adds	r7, #32
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}
 8000810:	40023800 	.word	0x40023800
 8000814:	40020800 	.word	0x40020800

08000818 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000818:	b480      	push	{r7}
 800081a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800081c:	bf00      	nop
 800081e:	46bd      	mov	sp, r7
 8000820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000824:	4770      	bx	lr
	...

08000828 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b082      	sub	sp, #8
 800082c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800082e:	2300      	movs	r3, #0
 8000830:	607b      	str	r3, [r7, #4]
 8000832:	4b10      	ldr	r3, [pc, #64]	; (8000874 <HAL_MspInit+0x4c>)
 8000834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000836:	4a0f      	ldr	r2, [pc, #60]	; (8000874 <HAL_MspInit+0x4c>)
 8000838:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800083c:	6453      	str	r3, [r2, #68]	; 0x44
 800083e:	4b0d      	ldr	r3, [pc, #52]	; (8000874 <HAL_MspInit+0x4c>)
 8000840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000842:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000846:	607b      	str	r3, [r7, #4]
 8000848:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800084a:	2300      	movs	r3, #0
 800084c:	603b      	str	r3, [r7, #0]
 800084e:	4b09      	ldr	r3, [pc, #36]	; (8000874 <HAL_MspInit+0x4c>)
 8000850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000852:	4a08      	ldr	r2, [pc, #32]	; (8000874 <HAL_MspInit+0x4c>)
 8000854:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000858:	6413      	str	r3, [r2, #64]	; 0x40
 800085a:	4b06      	ldr	r3, [pc, #24]	; (8000874 <HAL_MspInit+0x4c>)
 800085c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800085e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000862:	603b      	str	r3, [r7, #0]
 8000864:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000866:	2007      	movs	r0, #7
 8000868:	f000 fa58 	bl	8000d1c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800086c:	bf00      	nop
 800086e:	3708      	adds	r7, #8
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}
 8000874:	40023800 	.word	0x40023800

08000878 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b08a      	sub	sp, #40	; 0x28
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000880:	f107 0314 	add.w	r3, r7, #20
 8000884:	2200      	movs	r2, #0
 8000886:	601a      	str	r2, [r3, #0]
 8000888:	605a      	str	r2, [r3, #4]
 800088a:	609a      	str	r2, [r3, #8]
 800088c:	60da      	str	r2, [r3, #12]
 800088e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	4a19      	ldr	r2, [pc, #100]	; (80008fc <HAL_UART_MspInit+0x84>)
 8000896:	4293      	cmp	r3, r2
 8000898:	d12b      	bne.n	80008f2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800089a:	2300      	movs	r3, #0
 800089c:	613b      	str	r3, [r7, #16]
 800089e:	4b18      	ldr	r3, [pc, #96]	; (8000900 <HAL_UART_MspInit+0x88>)
 80008a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008a2:	4a17      	ldr	r2, [pc, #92]	; (8000900 <HAL_UART_MspInit+0x88>)
 80008a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008a8:	6413      	str	r3, [r2, #64]	; 0x40
 80008aa:	4b15      	ldr	r3, [pc, #84]	; (8000900 <HAL_UART_MspInit+0x88>)
 80008ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008b2:	613b      	str	r3, [r7, #16]
 80008b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008b6:	2300      	movs	r3, #0
 80008b8:	60fb      	str	r3, [r7, #12]
 80008ba:	4b11      	ldr	r3, [pc, #68]	; (8000900 <HAL_UART_MspInit+0x88>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008be:	4a10      	ldr	r2, [pc, #64]	; (8000900 <HAL_UART_MspInit+0x88>)
 80008c0:	f043 0301 	orr.w	r3, r3, #1
 80008c4:	6313      	str	r3, [r2, #48]	; 0x30
 80008c6:	4b0e      	ldr	r3, [pc, #56]	; (8000900 <HAL_UART_MspInit+0x88>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ca:	f003 0301 	and.w	r3, r3, #1
 80008ce:	60fb      	str	r3, [r7, #12]
 80008d0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80008d2:	230c      	movs	r3, #12
 80008d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008d6:	2302      	movs	r3, #2
 80008d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008da:	2300      	movs	r3, #0
 80008dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008de:	2303      	movs	r3, #3
 80008e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80008e2:	2307      	movs	r3, #7
 80008e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008e6:	f107 0314 	add.w	r3, r7, #20
 80008ea:	4619      	mov	r1, r3
 80008ec:	4805      	ldr	r0, [pc, #20]	; (8000904 <HAL_UART_MspInit+0x8c>)
 80008ee:	f000 fa57 	bl	8000da0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80008f2:	bf00      	nop
 80008f4:	3728      	adds	r7, #40	; 0x28
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	40004400 	.word	0x40004400
 8000900:	40023800 	.word	0x40023800
 8000904:	40020000 	.word	0x40020000

08000908 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800090c:	bf00      	nop
 800090e:	46bd      	mov	sp, r7
 8000910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000914:	4770      	bx	lr

08000916 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000916:	b480      	push	{r7}
 8000918:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800091a:	e7fe      	b.n	800091a <HardFault_Handler+0x4>

0800091c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000920:	e7fe      	b.n	8000920 <MemManage_Handler+0x4>

08000922 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000922:	b480      	push	{r7}
 8000924:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000926:	e7fe      	b.n	8000926 <BusFault_Handler+0x4>

08000928 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800092c:	e7fe      	b.n	800092c <UsageFault_Handler+0x4>

0800092e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800092e:	b480      	push	{r7}
 8000930:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000932:	bf00      	nop
 8000934:	46bd      	mov	sp, r7
 8000936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093a:	4770      	bx	lr

0800093c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000940:	bf00      	nop
 8000942:	46bd      	mov	sp, r7
 8000944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000948:	4770      	bx	lr

0800094a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800094a:	b480      	push	{r7}
 800094c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800094e:	bf00      	nop
 8000950:	46bd      	mov	sp, r7
 8000952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000956:	4770      	bx	lr

08000958 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800095c:	f000 f8ca 	bl	8000af4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000960:	bf00      	nop
 8000962:	bd80      	pop	{r7, pc}

08000964 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000968:	4802      	ldr	r0, [pc, #8]	; (8000974 <OTG_FS_IRQHandler+0x10>)
 800096a:	f000 fe5d 	bl	8001628 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800096e:	bf00      	nop
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	20000578 	.word	0x20000578

08000978 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b084      	sub	sp, #16
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000980:	4b11      	ldr	r3, [pc, #68]	; (80009c8 <_sbrk+0x50>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	2b00      	cmp	r3, #0
 8000986:	d102      	bne.n	800098e <_sbrk+0x16>
		heap_end = &end;
 8000988:	4b0f      	ldr	r3, [pc, #60]	; (80009c8 <_sbrk+0x50>)
 800098a:	4a10      	ldr	r2, [pc, #64]	; (80009cc <_sbrk+0x54>)
 800098c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800098e:	4b0e      	ldr	r3, [pc, #56]	; (80009c8 <_sbrk+0x50>)
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000994:	4b0c      	ldr	r3, [pc, #48]	; (80009c8 <_sbrk+0x50>)
 8000996:	681a      	ldr	r2, [r3, #0]
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	4413      	add	r3, r2
 800099c:	466a      	mov	r2, sp
 800099e:	4293      	cmp	r3, r2
 80009a0:	d907      	bls.n	80009b2 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80009a2:	f006 fe87 	bl	80076b4 <__errno>
 80009a6:	4603      	mov	r3, r0
 80009a8:	220c      	movs	r2, #12
 80009aa:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 80009ac:	f04f 33ff 	mov.w	r3, #4294967295
 80009b0:	e006      	b.n	80009c0 <_sbrk+0x48>
	}

	heap_end += incr;
 80009b2:	4b05      	ldr	r3, [pc, #20]	; (80009c8 <_sbrk+0x50>)
 80009b4:	681a      	ldr	r2, [r3, #0]
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	4413      	add	r3, r2
 80009ba:	4a03      	ldr	r2, [pc, #12]	; (80009c8 <_sbrk+0x50>)
 80009bc:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80009be:	68fb      	ldr	r3, [r7, #12]
}
 80009c0:	4618      	mov	r0, r3
 80009c2:	3710      	adds	r7, #16
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	200000ac 	.word	0x200000ac
 80009cc:	20000850 	.word	0x20000850

080009d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009d4:	4b08      	ldr	r3, [pc, #32]	; (80009f8 <SystemInit+0x28>)
 80009d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009da:	4a07      	ldr	r2, [pc, #28]	; (80009f8 <SystemInit+0x28>)
 80009dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80009e4:	4b04      	ldr	r3, [pc, #16]	; (80009f8 <SystemInit+0x28>)
 80009e6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80009ea:	609a      	str	r2, [r3, #8]
#endif
}
 80009ec:	bf00      	nop
 80009ee:	46bd      	mov	sp, r7
 80009f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop
 80009f8:	e000ed00 	.word	0xe000ed00

080009fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80009fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a34 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000a00:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000a02:	e003      	b.n	8000a0c <LoopCopyDataInit>

08000a04 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000a04:	4b0c      	ldr	r3, [pc, #48]	; (8000a38 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000a06:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000a08:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000a0a:	3104      	adds	r1, #4

08000a0c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000a0c:	480b      	ldr	r0, [pc, #44]	; (8000a3c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000a0e:	4b0c      	ldr	r3, [pc, #48]	; (8000a40 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000a10:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000a12:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000a14:	d3f6      	bcc.n	8000a04 <CopyDataInit>
  ldr  r2, =_sbss
 8000a16:	4a0b      	ldr	r2, [pc, #44]	; (8000a44 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000a18:	e002      	b.n	8000a20 <LoopFillZerobss>

08000a1a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000a1a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000a1c:	f842 3b04 	str.w	r3, [r2], #4

08000a20 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000a20:	4b09      	ldr	r3, [pc, #36]	; (8000a48 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000a22:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000a24:	d3f9      	bcc.n	8000a1a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000a26:	f7ff ffd3 	bl	80009d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a2a:	f006 fe49 	bl	80076c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a2e:	f7ff fdff 	bl	8000630 <main>
  bx  lr    
 8000a32:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000a34:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000a38:	08008400 	.word	0x08008400
  ldr  r0, =_sdata
 8000a3c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000a40:	20000090 	.word	0x20000090
  ldr  r2, =_sbss
 8000a44:	20000090 	.word	0x20000090
  ldr  r3, = _ebss
 8000a48:	2000084c 	.word	0x2000084c

08000a4c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a4c:	e7fe      	b.n	8000a4c <ADC_IRQHandler>
	...

08000a50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a54:	4b0e      	ldr	r3, [pc, #56]	; (8000a90 <HAL_Init+0x40>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	4a0d      	ldr	r2, [pc, #52]	; (8000a90 <HAL_Init+0x40>)
 8000a5a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a5e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a60:	4b0b      	ldr	r3, [pc, #44]	; (8000a90 <HAL_Init+0x40>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	4a0a      	ldr	r2, [pc, #40]	; (8000a90 <HAL_Init+0x40>)
 8000a66:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a6a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a6c:	4b08      	ldr	r3, [pc, #32]	; (8000a90 <HAL_Init+0x40>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	4a07      	ldr	r2, [pc, #28]	; (8000a90 <HAL_Init+0x40>)
 8000a72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a76:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a78:	2003      	movs	r0, #3
 8000a7a:	f000 f94f 	bl	8000d1c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a7e:	2000      	movs	r0, #0
 8000a80:	f000 f808 	bl	8000a94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a84:	f7ff fed0 	bl	8000828 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a88:	2300      	movs	r3, #0
}
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	40023c00 	.word	0x40023c00

08000a94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b082      	sub	sp, #8
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a9c:	4b12      	ldr	r3, [pc, #72]	; (8000ae8 <HAL_InitTick+0x54>)
 8000a9e:	681a      	ldr	r2, [r3, #0]
 8000aa0:	4b12      	ldr	r3, [pc, #72]	; (8000aec <HAL_InitTick+0x58>)
 8000aa2:	781b      	ldrb	r3, [r3, #0]
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000aaa:	fbb3 f3f1 	udiv	r3, r3, r1
 8000aae:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	f000 f967 	bl	8000d86 <HAL_SYSTICK_Config>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d001      	beq.n	8000ac2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000abe:	2301      	movs	r3, #1
 8000ac0:	e00e      	b.n	8000ae0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	2b0f      	cmp	r3, #15
 8000ac6:	d80a      	bhi.n	8000ade <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ac8:	2200      	movs	r2, #0
 8000aca:	6879      	ldr	r1, [r7, #4]
 8000acc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ad0:	f000 f92f 	bl	8000d32 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ad4:	4a06      	ldr	r2, [pc, #24]	; (8000af0 <HAL_InitTick+0x5c>)
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ada:	2300      	movs	r3, #0
 8000adc:	e000      	b.n	8000ae0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ade:	2301      	movs	r3, #1
}
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	3708      	adds	r7, #8
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	20000000 	.word	0x20000000
 8000aec:	20000008 	.word	0x20000008
 8000af0:	20000004 	.word	0x20000004

08000af4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000af8:	4b06      	ldr	r3, [pc, #24]	; (8000b14 <HAL_IncTick+0x20>)
 8000afa:	781b      	ldrb	r3, [r3, #0]
 8000afc:	461a      	mov	r2, r3
 8000afe:	4b06      	ldr	r3, [pc, #24]	; (8000b18 <HAL_IncTick+0x24>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	4413      	add	r3, r2
 8000b04:	4a04      	ldr	r2, [pc, #16]	; (8000b18 <HAL_IncTick+0x24>)
 8000b06:	6013      	str	r3, [r2, #0]
}
 8000b08:	bf00      	nop
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop
 8000b14:	20000008 	.word	0x20000008
 8000b18:	20000164 	.word	0x20000164

08000b1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  return uwTick;
 8000b20:	4b03      	ldr	r3, [pc, #12]	; (8000b30 <HAL_GetTick+0x14>)
 8000b22:	681b      	ldr	r3, [r3, #0]
}
 8000b24:	4618      	mov	r0, r3
 8000b26:	46bd      	mov	sp, r7
 8000b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop
 8000b30:	20000164 	.word	0x20000164

08000b34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b084      	sub	sp, #16
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b3c:	f7ff ffee 	bl	8000b1c <HAL_GetTick>
 8000b40:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b46:	68fb      	ldr	r3, [r7, #12]
 8000b48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b4c:	d005      	beq.n	8000b5a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b4e:	4b0a      	ldr	r3, [pc, #40]	; (8000b78 <HAL_Delay+0x44>)
 8000b50:	781b      	ldrb	r3, [r3, #0]
 8000b52:	461a      	mov	r2, r3
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	4413      	add	r3, r2
 8000b58:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000b5a:	bf00      	nop
 8000b5c:	f7ff ffde 	bl	8000b1c <HAL_GetTick>
 8000b60:	4602      	mov	r2, r0
 8000b62:	68bb      	ldr	r3, [r7, #8]
 8000b64:	1ad3      	subs	r3, r2, r3
 8000b66:	68fa      	ldr	r2, [r7, #12]
 8000b68:	429a      	cmp	r2, r3
 8000b6a:	d8f7      	bhi.n	8000b5c <HAL_Delay+0x28>
  {
  }
}
 8000b6c:	bf00      	nop
 8000b6e:	bf00      	nop
 8000b70:	3710      	adds	r7, #16
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	20000008 	.word	0x20000008

08000b7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	b085      	sub	sp, #20
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	f003 0307 	and.w	r3, r3, #7
 8000b8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b8c:	4b0c      	ldr	r3, [pc, #48]	; (8000bc0 <__NVIC_SetPriorityGrouping+0x44>)
 8000b8e:	68db      	ldr	r3, [r3, #12]
 8000b90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b92:	68ba      	ldr	r2, [r7, #8]
 8000b94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b98:	4013      	ands	r3, r2
 8000b9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ba0:	68bb      	ldr	r3, [r7, #8]
 8000ba2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ba4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ba8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bae:	4a04      	ldr	r2, [pc, #16]	; (8000bc0 <__NVIC_SetPriorityGrouping+0x44>)
 8000bb0:	68bb      	ldr	r3, [r7, #8]
 8000bb2:	60d3      	str	r3, [r2, #12]
}
 8000bb4:	bf00      	nop
 8000bb6:	3714      	adds	r7, #20
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbe:	4770      	bx	lr
 8000bc0:	e000ed00 	.word	0xe000ed00

08000bc4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bc8:	4b04      	ldr	r3, [pc, #16]	; (8000bdc <__NVIC_GetPriorityGrouping+0x18>)
 8000bca:	68db      	ldr	r3, [r3, #12]
 8000bcc:	0a1b      	lsrs	r3, r3, #8
 8000bce:	f003 0307 	and.w	r3, r3, #7
}
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bda:	4770      	bx	lr
 8000bdc:	e000ed00 	.word	0xe000ed00

08000be0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000be0:	b480      	push	{r7}
 8000be2:	b083      	sub	sp, #12
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	4603      	mov	r3, r0
 8000be8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	db0b      	blt.n	8000c0a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bf2:	79fb      	ldrb	r3, [r7, #7]
 8000bf4:	f003 021f 	and.w	r2, r3, #31
 8000bf8:	4907      	ldr	r1, [pc, #28]	; (8000c18 <__NVIC_EnableIRQ+0x38>)
 8000bfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bfe:	095b      	lsrs	r3, r3, #5
 8000c00:	2001      	movs	r0, #1
 8000c02:	fa00 f202 	lsl.w	r2, r0, r2
 8000c06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c0a:	bf00      	nop
 8000c0c:	370c      	adds	r7, #12
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop
 8000c18:	e000e100 	.word	0xe000e100

08000c1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	b083      	sub	sp, #12
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	4603      	mov	r3, r0
 8000c24:	6039      	str	r1, [r7, #0]
 8000c26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	db0a      	blt.n	8000c46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c30:	683b      	ldr	r3, [r7, #0]
 8000c32:	b2da      	uxtb	r2, r3
 8000c34:	490c      	ldr	r1, [pc, #48]	; (8000c68 <__NVIC_SetPriority+0x4c>)
 8000c36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c3a:	0112      	lsls	r2, r2, #4
 8000c3c:	b2d2      	uxtb	r2, r2
 8000c3e:	440b      	add	r3, r1
 8000c40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c44:	e00a      	b.n	8000c5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c46:	683b      	ldr	r3, [r7, #0]
 8000c48:	b2da      	uxtb	r2, r3
 8000c4a:	4908      	ldr	r1, [pc, #32]	; (8000c6c <__NVIC_SetPriority+0x50>)
 8000c4c:	79fb      	ldrb	r3, [r7, #7]
 8000c4e:	f003 030f 	and.w	r3, r3, #15
 8000c52:	3b04      	subs	r3, #4
 8000c54:	0112      	lsls	r2, r2, #4
 8000c56:	b2d2      	uxtb	r2, r2
 8000c58:	440b      	add	r3, r1
 8000c5a:	761a      	strb	r2, [r3, #24]
}
 8000c5c:	bf00      	nop
 8000c5e:	370c      	adds	r7, #12
 8000c60:	46bd      	mov	sp, r7
 8000c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c66:	4770      	bx	lr
 8000c68:	e000e100 	.word	0xe000e100
 8000c6c:	e000ed00 	.word	0xe000ed00

08000c70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b089      	sub	sp, #36	; 0x24
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	60f8      	str	r0, [r7, #12]
 8000c78:	60b9      	str	r1, [r7, #8]
 8000c7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	f003 0307 	and.w	r3, r3, #7
 8000c82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c84:	69fb      	ldr	r3, [r7, #28]
 8000c86:	f1c3 0307 	rsb	r3, r3, #7
 8000c8a:	2b04      	cmp	r3, #4
 8000c8c:	bf28      	it	cs
 8000c8e:	2304      	movcs	r3, #4
 8000c90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c92:	69fb      	ldr	r3, [r7, #28]
 8000c94:	3304      	adds	r3, #4
 8000c96:	2b06      	cmp	r3, #6
 8000c98:	d902      	bls.n	8000ca0 <NVIC_EncodePriority+0x30>
 8000c9a:	69fb      	ldr	r3, [r7, #28]
 8000c9c:	3b03      	subs	r3, #3
 8000c9e:	e000      	b.n	8000ca2 <NVIC_EncodePriority+0x32>
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ca4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ca8:	69bb      	ldr	r3, [r7, #24]
 8000caa:	fa02 f303 	lsl.w	r3, r2, r3
 8000cae:	43da      	mvns	r2, r3
 8000cb0:	68bb      	ldr	r3, [r7, #8]
 8000cb2:	401a      	ands	r2, r3
 8000cb4:	697b      	ldr	r3, [r7, #20]
 8000cb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cb8:	f04f 31ff 	mov.w	r1, #4294967295
 8000cbc:	697b      	ldr	r3, [r7, #20]
 8000cbe:	fa01 f303 	lsl.w	r3, r1, r3
 8000cc2:	43d9      	mvns	r1, r3
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cc8:	4313      	orrs	r3, r2
         );
}
 8000cca:	4618      	mov	r0, r3
 8000ccc:	3724      	adds	r7, #36	; 0x24
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr
	...

08000cd8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b082      	sub	sp, #8
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	3b01      	subs	r3, #1
 8000ce4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ce8:	d301      	bcc.n	8000cee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cea:	2301      	movs	r3, #1
 8000cec:	e00f      	b.n	8000d0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cee:	4a0a      	ldr	r2, [pc, #40]	; (8000d18 <SysTick_Config+0x40>)
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	3b01      	subs	r3, #1
 8000cf4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cf6:	210f      	movs	r1, #15
 8000cf8:	f04f 30ff 	mov.w	r0, #4294967295
 8000cfc:	f7ff ff8e 	bl	8000c1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d00:	4b05      	ldr	r3, [pc, #20]	; (8000d18 <SysTick_Config+0x40>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d06:	4b04      	ldr	r3, [pc, #16]	; (8000d18 <SysTick_Config+0x40>)
 8000d08:	2207      	movs	r2, #7
 8000d0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d0c:	2300      	movs	r3, #0
}
 8000d0e:	4618      	mov	r0, r3
 8000d10:	3708      	adds	r7, #8
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	e000e010 	.word	0xe000e010

08000d1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b082      	sub	sp, #8
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d24:	6878      	ldr	r0, [r7, #4]
 8000d26:	f7ff ff29 	bl	8000b7c <__NVIC_SetPriorityGrouping>
}
 8000d2a:	bf00      	nop
 8000d2c:	3708      	adds	r7, #8
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}

08000d32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d32:	b580      	push	{r7, lr}
 8000d34:	b086      	sub	sp, #24
 8000d36:	af00      	add	r7, sp, #0
 8000d38:	4603      	mov	r3, r0
 8000d3a:	60b9      	str	r1, [r7, #8]
 8000d3c:	607a      	str	r2, [r7, #4]
 8000d3e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d40:	2300      	movs	r3, #0
 8000d42:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d44:	f7ff ff3e 	bl	8000bc4 <__NVIC_GetPriorityGrouping>
 8000d48:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d4a:	687a      	ldr	r2, [r7, #4]
 8000d4c:	68b9      	ldr	r1, [r7, #8]
 8000d4e:	6978      	ldr	r0, [r7, #20]
 8000d50:	f7ff ff8e 	bl	8000c70 <NVIC_EncodePriority>
 8000d54:	4602      	mov	r2, r0
 8000d56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d5a:	4611      	mov	r1, r2
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f7ff ff5d 	bl	8000c1c <__NVIC_SetPriority>
}
 8000d62:	bf00      	nop
 8000d64:	3718      	adds	r7, #24
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}

08000d6a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d6a:	b580      	push	{r7, lr}
 8000d6c:	b082      	sub	sp, #8
 8000d6e:	af00      	add	r7, sp, #0
 8000d70:	4603      	mov	r3, r0
 8000d72:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d78:	4618      	mov	r0, r3
 8000d7a:	f7ff ff31 	bl	8000be0 <__NVIC_EnableIRQ>
}
 8000d7e:	bf00      	nop
 8000d80:	3708      	adds	r7, #8
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}

08000d86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d86:	b580      	push	{r7, lr}
 8000d88:	b082      	sub	sp, #8
 8000d8a:	af00      	add	r7, sp, #0
 8000d8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d8e:	6878      	ldr	r0, [r7, #4]
 8000d90:	f7ff ffa2 	bl	8000cd8 <SysTick_Config>
 8000d94:	4603      	mov	r3, r0
}
 8000d96:	4618      	mov	r0, r3
 8000d98:	3708      	adds	r7, #8
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
	...

08000da0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000da0:	b480      	push	{r7}
 8000da2:	b089      	sub	sp, #36	; 0x24
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
 8000da8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000daa:	2300      	movs	r3, #0
 8000dac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000dae:	2300      	movs	r3, #0
 8000db0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000db2:	2300      	movs	r3, #0
 8000db4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000db6:	2300      	movs	r3, #0
 8000db8:	61fb      	str	r3, [r7, #28]
 8000dba:	e16b      	b.n	8001094 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000dbc:	2201      	movs	r2, #1
 8000dbe:	69fb      	ldr	r3, [r7, #28]
 8000dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	697a      	ldr	r2, [r7, #20]
 8000dcc:	4013      	ands	r3, r2
 8000dce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000dd0:	693a      	ldr	r2, [r7, #16]
 8000dd2:	697b      	ldr	r3, [r7, #20]
 8000dd4:	429a      	cmp	r2, r3
 8000dd6:	f040 815a 	bne.w	800108e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	685b      	ldr	r3, [r3, #4]
 8000dde:	2b01      	cmp	r3, #1
 8000de0:	d00b      	beq.n	8000dfa <HAL_GPIO_Init+0x5a>
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	685b      	ldr	r3, [r3, #4]
 8000de6:	2b02      	cmp	r3, #2
 8000de8:	d007      	beq.n	8000dfa <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000dee:	2b11      	cmp	r3, #17
 8000df0:	d003      	beq.n	8000dfa <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	685b      	ldr	r3, [r3, #4]
 8000df6:	2b12      	cmp	r3, #18
 8000df8:	d130      	bne.n	8000e5c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	689b      	ldr	r3, [r3, #8]
 8000dfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e00:	69fb      	ldr	r3, [r7, #28]
 8000e02:	005b      	lsls	r3, r3, #1
 8000e04:	2203      	movs	r2, #3
 8000e06:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0a:	43db      	mvns	r3, r3
 8000e0c:	69ba      	ldr	r2, [r7, #24]
 8000e0e:	4013      	ands	r3, r2
 8000e10:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	68da      	ldr	r2, [r3, #12]
 8000e16:	69fb      	ldr	r3, [r7, #28]
 8000e18:	005b      	lsls	r3, r3, #1
 8000e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1e:	69ba      	ldr	r2, [r7, #24]
 8000e20:	4313      	orrs	r3, r2
 8000e22:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	69ba      	ldr	r2, [r7, #24]
 8000e28:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	685b      	ldr	r3, [r3, #4]
 8000e2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e30:	2201      	movs	r2, #1
 8000e32:	69fb      	ldr	r3, [r7, #28]
 8000e34:	fa02 f303 	lsl.w	r3, r2, r3
 8000e38:	43db      	mvns	r3, r3
 8000e3a:	69ba      	ldr	r2, [r7, #24]
 8000e3c:	4013      	ands	r3, r2
 8000e3e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	685b      	ldr	r3, [r3, #4]
 8000e44:	091b      	lsrs	r3, r3, #4
 8000e46:	f003 0201 	and.w	r2, r3, #1
 8000e4a:	69fb      	ldr	r3, [r7, #28]
 8000e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e50:	69ba      	ldr	r2, [r7, #24]
 8000e52:	4313      	orrs	r3, r2
 8000e54:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	69ba      	ldr	r2, [r7, #24]
 8000e5a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	68db      	ldr	r3, [r3, #12]
 8000e60:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e62:	69fb      	ldr	r3, [r7, #28]
 8000e64:	005b      	lsls	r3, r3, #1
 8000e66:	2203      	movs	r2, #3
 8000e68:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6c:	43db      	mvns	r3, r3
 8000e6e:	69ba      	ldr	r2, [r7, #24]
 8000e70:	4013      	ands	r3, r2
 8000e72:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	689a      	ldr	r2, [r3, #8]
 8000e78:	69fb      	ldr	r3, [r7, #28]
 8000e7a:	005b      	lsls	r3, r3, #1
 8000e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e80:	69ba      	ldr	r2, [r7, #24]
 8000e82:	4313      	orrs	r3, r2
 8000e84:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	69ba      	ldr	r2, [r7, #24]
 8000e8a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	685b      	ldr	r3, [r3, #4]
 8000e90:	2b02      	cmp	r3, #2
 8000e92:	d003      	beq.n	8000e9c <HAL_GPIO_Init+0xfc>
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	685b      	ldr	r3, [r3, #4]
 8000e98:	2b12      	cmp	r3, #18
 8000e9a:	d123      	bne.n	8000ee4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e9c:	69fb      	ldr	r3, [r7, #28]
 8000e9e:	08da      	lsrs	r2, r3, #3
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	3208      	adds	r2, #8
 8000ea4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ea8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000eaa:	69fb      	ldr	r3, [r7, #28]
 8000eac:	f003 0307 	and.w	r3, r3, #7
 8000eb0:	009b      	lsls	r3, r3, #2
 8000eb2:	220f      	movs	r2, #15
 8000eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb8:	43db      	mvns	r3, r3
 8000eba:	69ba      	ldr	r2, [r7, #24]
 8000ebc:	4013      	ands	r3, r2
 8000ebe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	691a      	ldr	r2, [r3, #16]
 8000ec4:	69fb      	ldr	r3, [r7, #28]
 8000ec6:	f003 0307 	and.w	r3, r3, #7
 8000eca:	009b      	lsls	r3, r3, #2
 8000ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed0:	69ba      	ldr	r2, [r7, #24]
 8000ed2:	4313      	orrs	r3, r2
 8000ed4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000ed6:	69fb      	ldr	r3, [r7, #28]
 8000ed8:	08da      	lsrs	r2, r3, #3
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	3208      	adds	r2, #8
 8000ede:	69b9      	ldr	r1, [r7, #24]
 8000ee0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000eea:	69fb      	ldr	r3, [r7, #28]
 8000eec:	005b      	lsls	r3, r3, #1
 8000eee:	2203      	movs	r2, #3
 8000ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef4:	43db      	mvns	r3, r3
 8000ef6:	69ba      	ldr	r2, [r7, #24]
 8000ef8:	4013      	ands	r3, r2
 8000efa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	f003 0203 	and.w	r2, r3, #3
 8000f04:	69fb      	ldr	r3, [r7, #28]
 8000f06:	005b      	lsls	r3, r3, #1
 8000f08:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0c:	69ba      	ldr	r2, [r7, #24]
 8000f0e:	4313      	orrs	r3, r2
 8000f10:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	69ba      	ldr	r2, [r7, #24]
 8000f16:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	f000 80b4 	beq.w	800108e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f26:	2300      	movs	r3, #0
 8000f28:	60fb      	str	r3, [r7, #12]
 8000f2a:	4b60      	ldr	r3, [pc, #384]	; (80010ac <HAL_GPIO_Init+0x30c>)
 8000f2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f2e:	4a5f      	ldr	r2, [pc, #380]	; (80010ac <HAL_GPIO_Init+0x30c>)
 8000f30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f34:	6453      	str	r3, [r2, #68]	; 0x44
 8000f36:	4b5d      	ldr	r3, [pc, #372]	; (80010ac <HAL_GPIO_Init+0x30c>)
 8000f38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f3e:	60fb      	str	r3, [r7, #12]
 8000f40:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f42:	4a5b      	ldr	r2, [pc, #364]	; (80010b0 <HAL_GPIO_Init+0x310>)
 8000f44:	69fb      	ldr	r3, [r7, #28]
 8000f46:	089b      	lsrs	r3, r3, #2
 8000f48:	3302      	adds	r3, #2
 8000f4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f50:	69fb      	ldr	r3, [r7, #28]
 8000f52:	f003 0303 	and.w	r3, r3, #3
 8000f56:	009b      	lsls	r3, r3, #2
 8000f58:	220f      	movs	r2, #15
 8000f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5e:	43db      	mvns	r3, r3
 8000f60:	69ba      	ldr	r2, [r7, #24]
 8000f62:	4013      	ands	r3, r2
 8000f64:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	4a52      	ldr	r2, [pc, #328]	; (80010b4 <HAL_GPIO_Init+0x314>)
 8000f6a:	4293      	cmp	r3, r2
 8000f6c:	d02b      	beq.n	8000fc6 <HAL_GPIO_Init+0x226>
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	4a51      	ldr	r2, [pc, #324]	; (80010b8 <HAL_GPIO_Init+0x318>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d025      	beq.n	8000fc2 <HAL_GPIO_Init+0x222>
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	4a50      	ldr	r2, [pc, #320]	; (80010bc <HAL_GPIO_Init+0x31c>)
 8000f7a:	4293      	cmp	r3, r2
 8000f7c:	d01f      	beq.n	8000fbe <HAL_GPIO_Init+0x21e>
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	4a4f      	ldr	r2, [pc, #316]	; (80010c0 <HAL_GPIO_Init+0x320>)
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d019      	beq.n	8000fba <HAL_GPIO_Init+0x21a>
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	4a4e      	ldr	r2, [pc, #312]	; (80010c4 <HAL_GPIO_Init+0x324>)
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	d013      	beq.n	8000fb6 <HAL_GPIO_Init+0x216>
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	4a4d      	ldr	r2, [pc, #308]	; (80010c8 <HAL_GPIO_Init+0x328>)
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d00d      	beq.n	8000fb2 <HAL_GPIO_Init+0x212>
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	4a4c      	ldr	r2, [pc, #304]	; (80010cc <HAL_GPIO_Init+0x32c>)
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d007      	beq.n	8000fae <HAL_GPIO_Init+0x20e>
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	4a4b      	ldr	r2, [pc, #300]	; (80010d0 <HAL_GPIO_Init+0x330>)
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d101      	bne.n	8000faa <HAL_GPIO_Init+0x20a>
 8000fa6:	2307      	movs	r3, #7
 8000fa8:	e00e      	b.n	8000fc8 <HAL_GPIO_Init+0x228>
 8000faa:	2308      	movs	r3, #8
 8000fac:	e00c      	b.n	8000fc8 <HAL_GPIO_Init+0x228>
 8000fae:	2306      	movs	r3, #6
 8000fb0:	e00a      	b.n	8000fc8 <HAL_GPIO_Init+0x228>
 8000fb2:	2305      	movs	r3, #5
 8000fb4:	e008      	b.n	8000fc8 <HAL_GPIO_Init+0x228>
 8000fb6:	2304      	movs	r3, #4
 8000fb8:	e006      	b.n	8000fc8 <HAL_GPIO_Init+0x228>
 8000fba:	2303      	movs	r3, #3
 8000fbc:	e004      	b.n	8000fc8 <HAL_GPIO_Init+0x228>
 8000fbe:	2302      	movs	r3, #2
 8000fc0:	e002      	b.n	8000fc8 <HAL_GPIO_Init+0x228>
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	e000      	b.n	8000fc8 <HAL_GPIO_Init+0x228>
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	69fa      	ldr	r2, [r7, #28]
 8000fca:	f002 0203 	and.w	r2, r2, #3
 8000fce:	0092      	lsls	r2, r2, #2
 8000fd0:	4093      	lsls	r3, r2
 8000fd2:	69ba      	ldr	r2, [r7, #24]
 8000fd4:	4313      	orrs	r3, r2
 8000fd6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000fd8:	4935      	ldr	r1, [pc, #212]	; (80010b0 <HAL_GPIO_Init+0x310>)
 8000fda:	69fb      	ldr	r3, [r7, #28]
 8000fdc:	089b      	lsrs	r3, r3, #2
 8000fde:	3302      	adds	r3, #2
 8000fe0:	69ba      	ldr	r2, [r7, #24]
 8000fe2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000fe6:	4b3b      	ldr	r3, [pc, #236]	; (80010d4 <HAL_GPIO_Init+0x334>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fec:	693b      	ldr	r3, [r7, #16]
 8000fee:	43db      	mvns	r3, r3
 8000ff0:	69ba      	ldr	r2, [r7, #24]
 8000ff2:	4013      	ands	r3, r2
 8000ff4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	685b      	ldr	r3, [r3, #4]
 8000ffa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d003      	beq.n	800100a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001002:	69ba      	ldr	r2, [r7, #24]
 8001004:	693b      	ldr	r3, [r7, #16]
 8001006:	4313      	orrs	r3, r2
 8001008:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800100a:	4a32      	ldr	r2, [pc, #200]	; (80010d4 <HAL_GPIO_Init+0x334>)
 800100c:	69bb      	ldr	r3, [r7, #24]
 800100e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001010:	4b30      	ldr	r3, [pc, #192]	; (80010d4 <HAL_GPIO_Init+0x334>)
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001016:	693b      	ldr	r3, [r7, #16]
 8001018:	43db      	mvns	r3, r3
 800101a:	69ba      	ldr	r2, [r7, #24]
 800101c:	4013      	ands	r3, r2
 800101e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001028:	2b00      	cmp	r3, #0
 800102a:	d003      	beq.n	8001034 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800102c:	69ba      	ldr	r2, [r7, #24]
 800102e:	693b      	ldr	r3, [r7, #16]
 8001030:	4313      	orrs	r3, r2
 8001032:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001034:	4a27      	ldr	r2, [pc, #156]	; (80010d4 <HAL_GPIO_Init+0x334>)
 8001036:	69bb      	ldr	r3, [r7, #24]
 8001038:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800103a:	4b26      	ldr	r3, [pc, #152]	; (80010d4 <HAL_GPIO_Init+0x334>)
 800103c:	689b      	ldr	r3, [r3, #8]
 800103e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001040:	693b      	ldr	r3, [r7, #16]
 8001042:	43db      	mvns	r3, r3
 8001044:	69ba      	ldr	r2, [r7, #24]
 8001046:	4013      	ands	r3, r2
 8001048:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	685b      	ldr	r3, [r3, #4]
 800104e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001052:	2b00      	cmp	r3, #0
 8001054:	d003      	beq.n	800105e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001056:	69ba      	ldr	r2, [r7, #24]
 8001058:	693b      	ldr	r3, [r7, #16]
 800105a:	4313      	orrs	r3, r2
 800105c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800105e:	4a1d      	ldr	r2, [pc, #116]	; (80010d4 <HAL_GPIO_Init+0x334>)
 8001060:	69bb      	ldr	r3, [r7, #24]
 8001062:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001064:	4b1b      	ldr	r3, [pc, #108]	; (80010d4 <HAL_GPIO_Init+0x334>)
 8001066:	68db      	ldr	r3, [r3, #12]
 8001068:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800106a:	693b      	ldr	r3, [r7, #16]
 800106c:	43db      	mvns	r3, r3
 800106e:	69ba      	ldr	r2, [r7, #24]
 8001070:	4013      	ands	r3, r2
 8001072:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800107c:	2b00      	cmp	r3, #0
 800107e:	d003      	beq.n	8001088 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001080:	69ba      	ldr	r2, [r7, #24]
 8001082:	693b      	ldr	r3, [r7, #16]
 8001084:	4313      	orrs	r3, r2
 8001086:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001088:	4a12      	ldr	r2, [pc, #72]	; (80010d4 <HAL_GPIO_Init+0x334>)
 800108a:	69bb      	ldr	r3, [r7, #24]
 800108c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800108e:	69fb      	ldr	r3, [r7, #28]
 8001090:	3301      	adds	r3, #1
 8001092:	61fb      	str	r3, [r7, #28]
 8001094:	69fb      	ldr	r3, [r7, #28]
 8001096:	2b0f      	cmp	r3, #15
 8001098:	f67f ae90 	bls.w	8000dbc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800109c:	bf00      	nop
 800109e:	bf00      	nop
 80010a0:	3724      	adds	r7, #36	; 0x24
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop
 80010ac:	40023800 	.word	0x40023800
 80010b0:	40013800 	.word	0x40013800
 80010b4:	40020000 	.word	0x40020000
 80010b8:	40020400 	.word	0x40020400
 80010bc:	40020800 	.word	0x40020800
 80010c0:	40020c00 	.word	0x40020c00
 80010c4:	40021000 	.word	0x40021000
 80010c8:	40021400 	.word	0x40021400
 80010cc:	40021800 	.word	0x40021800
 80010d0:	40021c00 	.word	0x40021c00
 80010d4:	40013c00 	.word	0x40013c00

080010d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010d8:	b480      	push	{r7}
 80010da:	b083      	sub	sp, #12
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
 80010e0:	460b      	mov	r3, r1
 80010e2:	807b      	strh	r3, [r7, #2]
 80010e4:	4613      	mov	r3, r2
 80010e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010e8:	787b      	ldrb	r3, [r7, #1]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d003      	beq.n	80010f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80010ee:	887a      	ldrh	r2, [r7, #2]
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80010f4:	e003      	b.n	80010fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80010f6:	887b      	ldrh	r3, [r7, #2]
 80010f8:	041a      	lsls	r2, r3, #16
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	619a      	str	r2, [r3, #24]
}
 80010fe:	bf00      	nop
 8001100:	370c      	adds	r7, #12
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr

0800110a <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800110a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800110c:	b08f      	sub	sp, #60	; 0x3c
 800110e:	af0a      	add	r7, sp, #40	; 0x28
 8001110:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	2b00      	cmp	r3, #0
 8001116:	d101      	bne.n	800111c <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001118:	2301      	movs	r3, #1
 800111a:	e054      	b.n	80011c6 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 8001128:	b2db      	uxtb	r3, r3
 800112a:	2b00      	cmp	r3, #0
 800112c:	d106      	bne.n	800113c <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	2200      	movs	r2, #0
 8001132:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001136:	6878      	ldr	r0, [r7, #4]
 8001138:	f006 f810 	bl	800715c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	2203      	movs	r2, #3
 8001140:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001148:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800114c:	2b00      	cmp	r3, #0
 800114e:	d102      	bne.n	8001156 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	2200      	movs	r2, #0
 8001154:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	4618      	mov	r0, r3
 800115c:	f002 fe72 	bl	8003e44 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	603b      	str	r3, [r7, #0]
 8001166:	687e      	ldr	r6, [r7, #4]
 8001168:	466d      	mov	r5, sp
 800116a:	f106 0410 	add.w	r4, r6, #16
 800116e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001170:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001172:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001174:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001176:	e894 0003 	ldmia.w	r4, {r0, r1}
 800117a:	e885 0003 	stmia.w	r5, {r0, r1}
 800117e:	1d33      	adds	r3, r6, #4
 8001180:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001182:	6838      	ldr	r0, [r7, #0]
 8001184:	f002 fdec 	bl	8003d60 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	2101      	movs	r1, #1
 800118e:	4618      	mov	r0, r3
 8001190:	f002 fe69 	bl	8003e66 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	603b      	str	r3, [r7, #0]
 800119a:	687e      	ldr	r6, [r7, #4]
 800119c:	466d      	mov	r5, sp
 800119e:	f106 0410 	add.w	r4, r6, #16
 80011a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011aa:	e894 0003 	ldmia.w	r4, {r0, r1}
 80011ae:	e885 0003 	stmia.w	r5, {r0, r1}
 80011b2:	1d33      	adds	r3, r6, #4
 80011b4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80011b6:	6838      	ldr	r0, [r7, #0]
 80011b8:	f002 ff7c 	bl	80040b4 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	2201      	movs	r2, #1
 80011c0:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 80011c4:	2300      	movs	r3, #0
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	3714      	adds	r7, #20
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080011ce <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80011ce:	b590      	push	{r4, r7, lr}
 80011d0:	b089      	sub	sp, #36	; 0x24
 80011d2:	af04      	add	r7, sp, #16
 80011d4:	6078      	str	r0, [r7, #4]
 80011d6:	4608      	mov	r0, r1
 80011d8:	4611      	mov	r1, r2
 80011da:	461a      	mov	r2, r3
 80011dc:	4603      	mov	r3, r0
 80011de:	70fb      	strb	r3, [r7, #3]
 80011e0:	460b      	mov	r3, r1
 80011e2:	70bb      	strb	r3, [r7, #2]
 80011e4:	4613      	mov	r3, r2
 80011e6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80011ee:	2b01      	cmp	r3, #1
 80011f0:	d101      	bne.n	80011f6 <HAL_HCD_HC_Init+0x28>
 80011f2:	2302      	movs	r3, #2
 80011f4:	e07f      	b.n	80012f6 <HAL_HCD_HC_Init+0x128>
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	2201      	movs	r2, #1
 80011fa:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 80011fe:	78fa      	ldrb	r2, [r7, #3]
 8001200:	6879      	ldr	r1, [r7, #4]
 8001202:	4613      	mov	r3, r2
 8001204:	009b      	lsls	r3, r3, #2
 8001206:	4413      	add	r3, r2
 8001208:	00db      	lsls	r3, r3, #3
 800120a:	440b      	add	r3, r1
 800120c:	333d      	adds	r3, #61	; 0x3d
 800120e:	2200      	movs	r2, #0
 8001210:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001212:	78fa      	ldrb	r2, [r7, #3]
 8001214:	6879      	ldr	r1, [r7, #4]
 8001216:	4613      	mov	r3, r2
 8001218:	009b      	lsls	r3, r3, #2
 800121a:	4413      	add	r3, r2
 800121c:	00db      	lsls	r3, r3, #3
 800121e:	440b      	add	r3, r1
 8001220:	3338      	adds	r3, #56	; 0x38
 8001222:	787a      	ldrb	r2, [r7, #1]
 8001224:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001226:	78fa      	ldrb	r2, [r7, #3]
 8001228:	6879      	ldr	r1, [r7, #4]
 800122a:	4613      	mov	r3, r2
 800122c:	009b      	lsls	r3, r3, #2
 800122e:	4413      	add	r3, r2
 8001230:	00db      	lsls	r3, r3, #3
 8001232:	440b      	add	r3, r1
 8001234:	3340      	adds	r3, #64	; 0x40
 8001236:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001238:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800123a:	78fa      	ldrb	r2, [r7, #3]
 800123c:	6879      	ldr	r1, [r7, #4]
 800123e:	4613      	mov	r3, r2
 8001240:	009b      	lsls	r3, r3, #2
 8001242:	4413      	add	r3, r2
 8001244:	00db      	lsls	r3, r3, #3
 8001246:	440b      	add	r3, r1
 8001248:	3339      	adds	r3, #57	; 0x39
 800124a:	78fa      	ldrb	r2, [r7, #3]
 800124c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800124e:	78fa      	ldrb	r2, [r7, #3]
 8001250:	6879      	ldr	r1, [r7, #4]
 8001252:	4613      	mov	r3, r2
 8001254:	009b      	lsls	r3, r3, #2
 8001256:	4413      	add	r3, r2
 8001258:	00db      	lsls	r3, r3, #3
 800125a:	440b      	add	r3, r1
 800125c:	333f      	adds	r3, #63	; 0x3f
 800125e:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001262:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001264:	78fa      	ldrb	r2, [r7, #3]
 8001266:	78bb      	ldrb	r3, [r7, #2]
 8001268:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800126c:	b2d8      	uxtb	r0, r3
 800126e:	6879      	ldr	r1, [r7, #4]
 8001270:	4613      	mov	r3, r2
 8001272:	009b      	lsls	r3, r3, #2
 8001274:	4413      	add	r3, r2
 8001276:	00db      	lsls	r3, r3, #3
 8001278:	440b      	add	r3, r1
 800127a:	333a      	adds	r3, #58	; 0x3a
 800127c:	4602      	mov	r2, r0
 800127e:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001280:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001284:	2b00      	cmp	r3, #0
 8001286:	da0a      	bge.n	800129e <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001288:	78fa      	ldrb	r2, [r7, #3]
 800128a:	6879      	ldr	r1, [r7, #4]
 800128c:	4613      	mov	r3, r2
 800128e:	009b      	lsls	r3, r3, #2
 8001290:	4413      	add	r3, r2
 8001292:	00db      	lsls	r3, r3, #3
 8001294:	440b      	add	r3, r1
 8001296:	333b      	adds	r3, #59	; 0x3b
 8001298:	2201      	movs	r2, #1
 800129a:	701a      	strb	r2, [r3, #0]
 800129c:	e009      	b.n	80012b2 <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800129e:	78fa      	ldrb	r2, [r7, #3]
 80012a0:	6879      	ldr	r1, [r7, #4]
 80012a2:	4613      	mov	r3, r2
 80012a4:	009b      	lsls	r3, r3, #2
 80012a6:	4413      	add	r3, r2
 80012a8:	00db      	lsls	r3, r3, #3
 80012aa:	440b      	add	r3, r1
 80012ac:	333b      	adds	r3, #59	; 0x3b
 80012ae:	2200      	movs	r2, #0
 80012b0:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80012b2:	78fa      	ldrb	r2, [r7, #3]
 80012b4:	6879      	ldr	r1, [r7, #4]
 80012b6:	4613      	mov	r3, r2
 80012b8:	009b      	lsls	r3, r3, #2
 80012ba:	4413      	add	r3, r2
 80012bc:	00db      	lsls	r3, r3, #3
 80012be:	440b      	add	r3, r1
 80012c0:	333c      	adds	r3, #60	; 0x3c
 80012c2:	f897 2020 	ldrb.w	r2, [r7, #32]
 80012c6:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	6818      	ldr	r0, [r3, #0]
 80012cc:	787c      	ldrb	r4, [r7, #1]
 80012ce:	78ba      	ldrb	r2, [r7, #2]
 80012d0:	78f9      	ldrb	r1, [r7, #3]
 80012d2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80012d4:	9302      	str	r3, [sp, #8]
 80012d6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80012da:	9301      	str	r3, [sp, #4]
 80012dc:	f897 3020 	ldrb.w	r3, [r7, #32]
 80012e0:	9300      	str	r3, [sp, #0]
 80012e2:	4623      	mov	r3, r4
 80012e4:	f003 f868 	bl	80043b8 <USB_HC_Init>
 80012e8:	4603      	mov	r3, r0
 80012ea:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	2200      	movs	r2, #0
 80012f0:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 80012f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	3714      	adds	r7, #20
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd90      	pop	{r4, r7, pc}

080012fe <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80012fe:	b580      	push	{r7, lr}
 8001300:	b084      	sub	sp, #16
 8001302:	af00      	add	r7, sp, #0
 8001304:	6078      	str	r0, [r7, #4]
 8001306:	460b      	mov	r3, r1
 8001308:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800130a:	2300      	movs	r3, #0
 800130c:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001314:	2b01      	cmp	r3, #1
 8001316:	d101      	bne.n	800131c <HAL_HCD_HC_Halt+0x1e>
 8001318:	2302      	movs	r3, #2
 800131a:	e00f      	b.n	800133c <HAL_HCD_HC_Halt+0x3e>
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	2201      	movs	r2, #1
 8001320:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	78fa      	ldrb	r2, [r7, #3]
 800132a:	4611      	mov	r1, r2
 800132c:	4618      	mov	r0, r3
 800132e:	f003 faa0 	bl	8004872 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	2200      	movs	r2, #0
 8001336:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 800133a:	7bfb      	ldrb	r3, [r7, #15]
}
 800133c:	4618      	mov	r0, r3
 800133e:	3710      	adds	r7, #16
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}

08001344 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b082      	sub	sp, #8
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
 800134c:	4608      	mov	r0, r1
 800134e:	4611      	mov	r1, r2
 8001350:	461a      	mov	r2, r3
 8001352:	4603      	mov	r3, r0
 8001354:	70fb      	strb	r3, [r7, #3]
 8001356:	460b      	mov	r3, r1
 8001358:	70bb      	strb	r3, [r7, #2]
 800135a:	4613      	mov	r3, r2
 800135c:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800135e:	78fa      	ldrb	r2, [r7, #3]
 8001360:	6879      	ldr	r1, [r7, #4]
 8001362:	4613      	mov	r3, r2
 8001364:	009b      	lsls	r3, r3, #2
 8001366:	4413      	add	r3, r2
 8001368:	00db      	lsls	r3, r3, #3
 800136a:	440b      	add	r3, r1
 800136c:	333b      	adds	r3, #59	; 0x3b
 800136e:	78ba      	ldrb	r2, [r7, #2]
 8001370:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001372:	78fa      	ldrb	r2, [r7, #3]
 8001374:	6879      	ldr	r1, [r7, #4]
 8001376:	4613      	mov	r3, r2
 8001378:	009b      	lsls	r3, r3, #2
 800137a:	4413      	add	r3, r2
 800137c:	00db      	lsls	r3, r3, #3
 800137e:	440b      	add	r3, r1
 8001380:	333f      	adds	r3, #63	; 0x3f
 8001382:	787a      	ldrb	r2, [r7, #1]
 8001384:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001386:	7c3b      	ldrb	r3, [r7, #16]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d114      	bne.n	80013b6 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 800138c:	78fa      	ldrb	r2, [r7, #3]
 800138e:	6879      	ldr	r1, [r7, #4]
 8001390:	4613      	mov	r3, r2
 8001392:	009b      	lsls	r3, r3, #2
 8001394:	4413      	add	r3, r2
 8001396:	00db      	lsls	r3, r3, #3
 8001398:	440b      	add	r3, r1
 800139a:	3342      	adds	r3, #66	; 0x42
 800139c:	2203      	movs	r2, #3
 800139e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80013a0:	78fa      	ldrb	r2, [r7, #3]
 80013a2:	6879      	ldr	r1, [r7, #4]
 80013a4:	4613      	mov	r3, r2
 80013a6:	009b      	lsls	r3, r3, #2
 80013a8:	4413      	add	r3, r2
 80013aa:	00db      	lsls	r3, r3, #3
 80013ac:	440b      	add	r3, r1
 80013ae:	333d      	adds	r3, #61	; 0x3d
 80013b0:	7f3a      	ldrb	r2, [r7, #28]
 80013b2:	701a      	strb	r2, [r3, #0]
 80013b4:	e009      	b.n	80013ca <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80013b6:	78fa      	ldrb	r2, [r7, #3]
 80013b8:	6879      	ldr	r1, [r7, #4]
 80013ba:	4613      	mov	r3, r2
 80013bc:	009b      	lsls	r3, r3, #2
 80013be:	4413      	add	r3, r2
 80013c0:	00db      	lsls	r3, r3, #3
 80013c2:	440b      	add	r3, r1
 80013c4:	3342      	adds	r3, #66	; 0x42
 80013c6:	2202      	movs	r2, #2
 80013c8:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80013ca:	787b      	ldrb	r3, [r7, #1]
 80013cc:	2b03      	cmp	r3, #3
 80013ce:	f200 80d6 	bhi.w	800157e <HAL_HCD_HC_SubmitRequest+0x23a>
 80013d2:	a201      	add	r2, pc, #4	; (adr r2, 80013d8 <HAL_HCD_HC_SubmitRequest+0x94>)
 80013d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013d8:	080013e9 	.word	0x080013e9
 80013dc:	08001569 	.word	0x08001569
 80013e0:	08001455 	.word	0x08001455
 80013e4:	080014df 	.word	0x080014df
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80013e8:	7c3b      	ldrb	r3, [r7, #16]
 80013ea:	2b01      	cmp	r3, #1
 80013ec:	f040 80c9 	bne.w	8001582 <HAL_HCD_HC_SubmitRequest+0x23e>
 80013f0:	78bb      	ldrb	r3, [r7, #2]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	f040 80c5 	bne.w	8001582 <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (length == 0U)
 80013f8:	8b3b      	ldrh	r3, [r7, #24]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d109      	bne.n	8001412 <HAL_HCD_HC_SubmitRequest+0xce>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80013fe:	78fa      	ldrb	r2, [r7, #3]
 8001400:	6879      	ldr	r1, [r7, #4]
 8001402:	4613      	mov	r3, r2
 8001404:	009b      	lsls	r3, r3, #2
 8001406:	4413      	add	r3, r2
 8001408:	00db      	lsls	r3, r3, #3
 800140a:	440b      	add	r3, r1
 800140c:	3351      	adds	r3, #81	; 0x51
 800140e:	2201      	movs	r2, #1
 8001410:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001412:	78fa      	ldrb	r2, [r7, #3]
 8001414:	6879      	ldr	r1, [r7, #4]
 8001416:	4613      	mov	r3, r2
 8001418:	009b      	lsls	r3, r3, #2
 800141a:	4413      	add	r3, r2
 800141c:	00db      	lsls	r3, r3, #3
 800141e:	440b      	add	r3, r1
 8001420:	3351      	adds	r3, #81	; 0x51
 8001422:	781b      	ldrb	r3, [r3, #0]
 8001424:	2b00      	cmp	r3, #0
 8001426:	d10a      	bne.n	800143e <HAL_HCD_HC_SubmitRequest+0xfa>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001428:	78fa      	ldrb	r2, [r7, #3]
 800142a:	6879      	ldr	r1, [r7, #4]
 800142c:	4613      	mov	r3, r2
 800142e:	009b      	lsls	r3, r3, #2
 8001430:	4413      	add	r3, r2
 8001432:	00db      	lsls	r3, r3, #3
 8001434:	440b      	add	r3, r1
 8001436:	3342      	adds	r3, #66	; 0x42
 8001438:	2200      	movs	r2, #0
 800143a:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800143c:	e0a1      	b.n	8001582 <HAL_HCD_HC_SubmitRequest+0x23e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800143e:	78fa      	ldrb	r2, [r7, #3]
 8001440:	6879      	ldr	r1, [r7, #4]
 8001442:	4613      	mov	r3, r2
 8001444:	009b      	lsls	r3, r3, #2
 8001446:	4413      	add	r3, r2
 8001448:	00db      	lsls	r3, r3, #3
 800144a:	440b      	add	r3, r1
 800144c:	3342      	adds	r3, #66	; 0x42
 800144e:	2202      	movs	r2, #2
 8001450:	701a      	strb	r2, [r3, #0]
      break;
 8001452:	e096      	b.n	8001582 <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001454:	78bb      	ldrb	r3, [r7, #2]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d120      	bne.n	800149c <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800145a:	78fa      	ldrb	r2, [r7, #3]
 800145c:	6879      	ldr	r1, [r7, #4]
 800145e:	4613      	mov	r3, r2
 8001460:	009b      	lsls	r3, r3, #2
 8001462:	4413      	add	r3, r2
 8001464:	00db      	lsls	r3, r3, #3
 8001466:	440b      	add	r3, r1
 8001468:	3351      	adds	r3, #81	; 0x51
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d10a      	bne.n	8001486 <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001470:	78fa      	ldrb	r2, [r7, #3]
 8001472:	6879      	ldr	r1, [r7, #4]
 8001474:	4613      	mov	r3, r2
 8001476:	009b      	lsls	r3, r3, #2
 8001478:	4413      	add	r3, r2
 800147a:	00db      	lsls	r3, r3, #3
 800147c:	440b      	add	r3, r1
 800147e:	3342      	adds	r3, #66	; 0x42
 8001480:	2200      	movs	r2, #0
 8001482:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001484:	e07e      	b.n	8001584 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001486:	78fa      	ldrb	r2, [r7, #3]
 8001488:	6879      	ldr	r1, [r7, #4]
 800148a:	4613      	mov	r3, r2
 800148c:	009b      	lsls	r3, r3, #2
 800148e:	4413      	add	r3, r2
 8001490:	00db      	lsls	r3, r3, #3
 8001492:	440b      	add	r3, r1
 8001494:	3342      	adds	r3, #66	; 0x42
 8001496:	2202      	movs	r2, #2
 8001498:	701a      	strb	r2, [r3, #0]
      break;
 800149a:	e073      	b.n	8001584 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800149c:	78fa      	ldrb	r2, [r7, #3]
 800149e:	6879      	ldr	r1, [r7, #4]
 80014a0:	4613      	mov	r3, r2
 80014a2:	009b      	lsls	r3, r3, #2
 80014a4:	4413      	add	r3, r2
 80014a6:	00db      	lsls	r3, r3, #3
 80014a8:	440b      	add	r3, r1
 80014aa:	3350      	adds	r3, #80	; 0x50
 80014ac:	781b      	ldrb	r3, [r3, #0]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d10a      	bne.n	80014c8 <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80014b2:	78fa      	ldrb	r2, [r7, #3]
 80014b4:	6879      	ldr	r1, [r7, #4]
 80014b6:	4613      	mov	r3, r2
 80014b8:	009b      	lsls	r3, r3, #2
 80014ba:	4413      	add	r3, r2
 80014bc:	00db      	lsls	r3, r3, #3
 80014be:	440b      	add	r3, r1
 80014c0:	3342      	adds	r3, #66	; 0x42
 80014c2:	2200      	movs	r2, #0
 80014c4:	701a      	strb	r2, [r3, #0]
      break;
 80014c6:	e05d      	b.n	8001584 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80014c8:	78fa      	ldrb	r2, [r7, #3]
 80014ca:	6879      	ldr	r1, [r7, #4]
 80014cc:	4613      	mov	r3, r2
 80014ce:	009b      	lsls	r3, r3, #2
 80014d0:	4413      	add	r3, r2
 80014d2:	00db      	lsls	r3, r3, #3
 80014d4:	440b      	add	r3, r1
 80014d6:	3342      	adds	r3, #66	; 0x42
 80014d8:	2202      	movs	r2, #2
 80014da:	701a      	strb	r2, [r3, #0]
      break;
 80014dc:	e052      	b.n	8001584 <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80014de:	78bb      	ldrb	r3, [r7, #2]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d120      	bne.n	8001526 <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80014e4:	78fa      	ldrb	r2, [r7, #3]
 80014e6:	6879      	ldr	r1, [r7, #4]
 80014e8:	4613      	mov	r3, r2
 80014ea:	009b      	lsls	r3, r3, #2
 80014ec:	4413      	add	r3, r2
 80014ee:	00db      	lsls	r3, r3, #3
 80014f0:	440b      	add	r3, r1
 80014f2:	3351      	adds	r3, #81	; 0x51
 80014f4:	781b      	ldrb	r3, [r3, #0]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d10a      	bne.n	8001510 <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80014fa:	78fa      	ldrb	r2, [r7, #3]
 80014fc:	6879      	ldr	r1, [r7, #4]
 80014fe:	4613      	mov	r3, r2
 8001500:	009b      	lsls	r3, r3, #2
 8001502:	4413      	add	r3, r2
 8001504:	00db      	lsls	r3, r3, #3
 8001506:	440b      	add	r3, r1
 8001508:	3342      	adds	r3, #66	; 0x42
 800150a:	2200      	movs	r2, #0
 800150c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800150e:	e039      	b.n	8001584 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001510:	78fa      	ldrb	r2, [r7, #3]
 8001512:	6879      	ldr	r1, [r7, #4]
 8001514:	4613      	mov	r3, r2
 8001516:	009b      	lsls	r3, r3, #2
 8001518:	4413      	add	r3, r2
 800151a:	00db      	lsls	r3, r3, #3
 800151c:	440b      	add	r3, r1
 800151e:	3342      	adds	r3, #66	; 0x42
 8001520:	2202      	movs	r2, #2
 8001522:	701a      	strb	r2, [r3, #0]
      break;
 8001524:	e02e      	b.n	8001584 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001526:	78fa      	ldrb	r2, [r7, #3]
 8001528:	6879      	ldr	r1, [r7, #4]
 800152a:	4613      	mov	r3, r2
 800152c:	009b      	lsls	r3, r3, #2
 800152e:	4413      	add	r3, r2
 8001530:	00db      	lsls	r3, r3, #3
 8001532:	440b      	add	r3, r1
 8001534:	3350      	adds	r3, #80	; 0x50
 8001536:	781b      	ldrb	r3, [r3, #0]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d10a      	bne.n	8001552 <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800153c:	78fa      	ldrb	r2, [r7, #3]
 800153e:	6879      	ldr	r1, [r7, #4]
 8001540:	4613      	mov	r3, r2
 8001542:	009b      	lsls	r3, r3, #2
 8001544:	4413      	add	r3, r2
 8001546:	00db      	lsls	r3, r3, #3
 8001548:	440b      	add	r3, r1
 800154a:	3342      	adds	r3, #66	; 0x42
 800154c:	2200      	movs	r2, #0
 800154e:	701a      	strb	r2, [r3, #0]
      break;
 8001550:	e018      	b.n	8001584 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001552:	78fa      	ldrb	r2, [r7, #3]
 8001554:	6879      	ldr	r1, [r7, #4]
 8001556:	4613      	mov	r3, r2
 8001558:	009b      	lsls	r3, r3, #2
 800155a:	4413      	add	r3, r2
 800155c:	00db      	lsls	r3, r3, #3
 800155e:	440b      	add	r3, r1
 8001560:	3342      	adds	r3, #66	; 0x42
 8001562:	2202      	movs	r2, #2
 8001564:	701a      	strb	r2, [r3, #0]
      break;
 8001566:	e00d      	b.n	8001584 <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001568:	78fa      	ldrb	r2, [r7, #3]
 800156a:	6879      	ldr	r1, [r7, #4]
 800156c:	4613      	mov	r3, r2
 800156e:	009b      	lsls	r3, r3, #2
 8001570:	4413      	add	r3, r2
 8001572:	00db      	lsls	r3, r3, #3
 8001574:	440b      	add	r3, r1
 8001576:	3342      	adds	r3, #66	; 0x42
 8001578:	2200      	movs	r2, #0
 800157a:	701a      	strb	r2, [r3, #0]
      break;
 800157c:	e002      	b.n	8001584 <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 800157e:	bf00      	nop
 8001580:	e000      	b.n	8001584 <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 8001582:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001584:	78fa      	ldrb	r2, [r7, #3]
 8001586:	6879      	ldr	r1, [r7, #4]
 8001588:	4613      	mov	r3, r2
 800158a:	009b      	lsls	r3, r3, #2
 800158c:	4413      	add	r3, r2
 800158e:	00db      	lsls	r3, r3, #3
 8001590:	440b      	add	r3, r1
 8001592:	3344      	adds	r3, #68	; 0x44
 8001594:	697a      	ldr	r2, [r7, #20]
 8001596:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001598:	78fa      	ldrb	r2, [r7, #3]
 800159a:	8b39      	ldrh	r1, [r7, #24]
 800159c:	6878      	ldr	r0, [r7, #4]
 800159e:	4613      	mov	r3, r2
 80015a0:	009b      	lsls	r3, r3, #2
 80015a2:	4413      	add	r3, r2
 80015a4:	00db      	lsls	r3, r3, #3
 80015a6:	4403      	add	r3, r0
 80015a8:	3348      	adds	r3, #72	; 0x48
 80015aa:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80015ac:	78fa      	ldrb	r2, [r7, #3]
 80015ae:	6879      	ldr	r1, [r7, #4]
 80015b0:	4613      	mov	r3, r2
 80015b2:	009b      	lsls	r3, r3, #2
 80015b4:	4413      	add	r3, r2
 80015b6:	00db      	lsls	r3, r3, #3
 80015b8:	440b      	add	r3, r1
 80015ba:	335c      	adds	r3, #92	; 0x5c
 80015bc:	2200      	movs	r2, #0
 80015be:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80015c0:	78fa      	ldrb	r2, [r7, #3]
 80015c2:	6879      	ldr	r1, [r7, #4]
 80015c4:	4613      	mov	r3, r2
 80015c6:	009b      	lsls	r3, r3, #2
 80015c8:	4413      	add	r3, r2
 80015ca:	00db      	lsls	r3, r3, #3
 80015cc:	440b      	add	r3, r1
 80015ce:	334c      	adds	r3, #76	; 0x4c
 80015d0:	2200      	movs	r2, #0
 80015d2:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80015d4:	78fa      	ldrb	r2, [r7, #3]
 80015d6:	6879      	ldr	r1, [r7, #4]
 80015d8:	4613      	mov	r3, r2
 80015da:	009b      	lsls	r3, r3, #2
 80015dc:	4413      	add	r3, r2
 80015de:	00db      	lsls	r3, r3, #3
 80015e0:	440b      	add	r3, r1
 80015e2:	3339      	adds	r3, #57	; 0x39
 80015e4:	78fa      	ldrb	r2, [r7, #3]
 80015e6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80015e8:	78fa      	ldrb	r2, [r7, #3]
 80015ea:	6879      	ldr	r1, [r7, #4]
 80015ec:	4613      	mov	r3, r2
 80015ee:	009b      	lsls	r3, r3, #2
 80015f0:	4413      	add	r3, r2
 80015f2:	00db      	lsls	r3, r3, #3
 80015f4:	440b      	add	r3, r1
 80015f6:	335d      	adds	r3, #93	; 0x5d
 80015f8:	2200      	movs	r2, #0
 80015fa:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6818      	ldr	r0, [r3, #0]
 8001600:	78fa      	ldrb	r2, [r7, #3]
 8001602:	4613      	mov	r3, r2
 8001604:	009b      	lsls	r3, r3, #2
 8001606:	4413      	add	r3, r2
 8001608:	00db      	lsls	r3, r3, #3
 800160a:	3338      	adds	r3, #56	; 0x38
 800160c:	687a      	ldr	r2, [r7, #4]
 800160e:	18d1      	adds	r1, r2, r3
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	691b      	ldr	r3, [r3, #16]
 8001614:	b2db      	uxtb	r3, r3
 8001616:	461a      	mov	r2, r3
 8001618:	f002 ffd8 	bl	80045cc <USB_HC_StartXfer>
 800161c:	4603      	mov	r3, r0
}
 800161e:	4618      	mov	r0, r3
 8001620:	3708      	adds	r7, #8
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop

08001628 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b086      	sub	sp, #24
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001636:	693b      	ldr	r3, [r7, #16]
 8001638:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4618      	mov	r0, r3
 8001640:	f002 fcf5 	bl	800402e <USB_GetMode>
 8001644:	4603      	mov	r3, r0
 8001646:	2b01      	cmp	r3, #1
 8001648:	f040 80ef 	bne.w	800182a <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4618      	mov	r0, r3
 8001652:	f002 fcd9 	bl	8004008 <USB_ReadInterrupts>
 8001656:	4603      	mov	r3, r0
 8001658:	2b00      	cmp	r3, #0
 800165a:	f000 80e5 	beq.w	8001828 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4618      	mov	r0, r3
 8001664:	f002 fcd0 	bl	8004008 <USB_ReadInterrupts>
 8001668:	4603      	mov	r3, r0
 800166a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800166e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001672:	d104      	bne.n	800167e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800167c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4618      	mov	r0, r3
 8001684:	f002 fcc0 	bl	8004008 <USB_ReadInterrupts>
 8001688:	4603      	mov	r3, r0
 800168a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800168e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001692:	d104      	bne.n	800169e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800169c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4618      	mov	r0, r3
 80016a4:	f002 fcb0 	bl	8004008 <USB_ReadInterrupts>
 80016a8:	4603      	mov	r3, r0
 80016aa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80016ae:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80016b2:	d104      	bne.n	80016be <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80016bc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4618      	mov	r0, r3
 80016c4:	f002 fca0 	bl	8004008 <USB_ReadInterrupts>
 80016c8:	4603      	mov	r3, r0
 80016ca:	f003 0302 	and.w	r3, r3, #2
 80016ce:	2b02      	cmp	r3, #2
 80016d0:	d103      	bne.n	80016da <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	2202      	movs	r2, #2
 80016d8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4618      	mov	r0, r3
 80016e0:	f002 fc92 	bl	8004008 <USB_ReadInterrupts>
 80016e4:	4603      	mov	r3, r0
 80016e6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80016ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80016ee:	d115      	bne.n	800171c <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80016f8:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f003 0301 	and.w	r3, r3, #1
 8001706:	2b00      	cmp	r3, #0
 8001708:	d108      	bne.n	800171c <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 800170a:	6878      	ldr	r0, [r7, #4]
 800170c:	f005 fda4 	bl	8007258 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	2101      	movs	r1, #1
 8001716:	4618      	mov	r0, r3
 8001718:	f002 fd88 	bl	800422c <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4618      	mov	r0, r3
 8001722:	f002 fc71 	bl	8004008 <USB_ReadInterrupts>
 8001726:	4603      	mov	r3, r0
 8001728:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800172c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001730:	d102      	bne.n	8001738 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8001732:	6878      	ldr	r0, [r7, #4]
 8001734:	f001 f968 	bl	8002a08 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4618      	mov	r0, r3
 800173e:	f002 fc63 	bl	8004008 <USB_ReadInterrupts>
 8001742:	4603      	mov	r3, r0
 8001744:	f003 0308 	and.w	r3, r3, #8
 8001748:	2b08      	cmp	r3, #8
 800174a:	d106      	bne.n	800175a <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800174c:	6878      	ldr	r0, [r7, #4]
 800174e:	f005 fd67 	bl	8007220 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	2208      	movs	r2, #8
 8001758:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4618      	mov	r0, r3
 8001760:	f002 fc52 	bl	8004008 <USB_ReadInterrupts>
 8001764:	4603      	mov	r3, r0
 8001766:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800176a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800176e:	d138      	bne.n	80017e2 <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4618      	mov	r0, r3
 8001776:	f003 f86b 	bl	8004850 <USB_HC_ReadInterrupt>
 800177a:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800177c:	2300      	movs	r3, #0
 800177e:	617b      	str	r3, [r7, #20]
 8001780:	e025      	b.n	80017ce <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001782:	697b      	ldr	r3, [r7, #20]
 8001784:	f003 030f 	and.w	r3, r3, #15
 8001788:	68ba      	ldr	r2, [r7, #8]
 800178a:	fa22 f303 	lsr.w	r3, r2, r3
 800178e:	f003 0301 	and.w	r3, r3, #1
 8001792:	2b00      	cmp	r3, #0
 8001794:	d018      	beq.n	80017c8 <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001796:	697b      	ldr	r3, [r7, #20]
 8001798:	015a      	lsls	r2, r3, #5
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	4413      	add	r3, r2
 800179e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80017a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80017ac:	d106      	bne.n	80017bc <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80017ae:	697b      	ldr	r3, [r7, #20]
 80017b0:	b2db      	uxtb	r3, r3
 80017b2:	4619      	mov	r1, r3
 80017b4:	6878      	ldr	r0, [r7, #4]
 80017b6:	f000 f8cf 	bl	8001958 <HCD_HC_IN_IRQHandler>
 80017ba:	e005      	b.n	80017c8 <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	b2db      	uxtb	r3, r3
 80017c0:	4619      	mov	r1, r3
 80017c2:	6878      	ldr	r0, [r7, #4]
 80017c4:	f000 fcfd 	bl	80021c2 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80017c8:	697b      	ldr	r3, [r7, #20]
 80017ca:	3301      	adds	r3, #1
 80017cc:	617b      	str	r3, [r7, #20]
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	689b      	ldr	r3, [r3, #8]
 80017d2:	697a      	ldr	r2, [r7, #20]
 80017d4:	429a      	cmp	r2, r3
 80017d6:	d3d4      	bcc.n	8001782 <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80017e0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4618      	mov	r0, r3
 80017e8:	f002 fc0e 	bl	8004008 <USB_ReadInterrupts>
 80017ec:	4603      	mov	r3, r0
 80017ee:	f003 0310 	and.w	r3, r3, #16
 80017f2:	2b10      	cmp	r3, #16
 80017f4:	d101      	bne.n	80017fa <HAL_HCD_IRQHandler+0x1d2>
 80017f6:	2301      	movs	r3, #1
 80017f8:	e000      	b.n	80017fc <HAL_HCD_IRQHandler+0x1d4>
 80017fa:	2300      	movs	r3, #0
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d014      	beq.n	800182a <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	699a      	ldr	r2, [r3, #24]
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f022 0210 	bic.w	r2, r2, #16
 800180e:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001810:	6878      	ldr	r0, [r7, #4]
 8001812:	f001 f84b 	bl	80028ac <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	699a      	ldr	r2, [r3, #24]
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f042 0210 	orr.w	r2, r2, #16
 8001824:	619a      	str	r2, [r3, #24]
 8001826:	e000      	b.n	800182a <HAL_HCD_IRQHandler+0x202>
      return;
 8001828:	bf00      	nop
    }
  }
}
 800182a:	3718      	adds	r7, #24
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}

08001830 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b082      	sub	sp, #8
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 800183e:	2b01      	cmp	r3, #1
 8001840:	d101      	bne.n	8001846 <HAL_HCD_Start+0x16>
 8001842:	2302      	movs	r3, #2
 8001844:	e013      	b.n	800186e <HAL_HCD_Start+0x3e>
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	2201      	movs	r2, #1
 800184a:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4618      	mov	r0, r3
 8001854:	f002 fae5 	bl	8003e22 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	2101      	movs	r1, #1
 800185e:	4618      	mov	r0, r3
 8001860:	f002 fd48 	bl	80042f4 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2200      	movs	r2, #0
 8001868:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 800186c:	2300      	movs	r3, #0
}
 800186e:	4618      	mov	r0, r3
 8001870:	3708      	adds	r7, #8
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}

08001876 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001876:	b580      	push	{r7, lr}
 8001878:	b082      	sub	sp, #8
 800187a:	af00      	add	r7, sp, #0
 800187c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001884:	2b01      	cmp	r3, #1
 8001886:	d101      	bne.n	800188c <HAL_HCD_Stop+0x16>
 8001888:	2302      	movs	r3, #2
 800188a:	e00d      	b.n	80018a8 <HAL_HCD_Stop+0x32>
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2201      	movs	r2, #1
 8001890:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4618      	mov	r0, r3
 800189a:	f003 f925 	bl	8004ae8 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	2200      	movs	r2, #0
 80018a2:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 80018a6:	2300      	movs	r3, #0
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	3708      	adds	r7, #8
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}

080018b0 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b082      	sub	sp, #8
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4618      	mov	r0, r3
 80018be:	f002 fcef 	bl	80042a0 <USB_ResetPort>
 80018c2:	4603      	mov	r3, r0
}
 80018c4:	4618      	mov	r0, r3
 80018c6:	3708      	adds	r7, #8
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}

080018cc <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b083      	sub	sp, #12
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
 80018d4:	460b      	mov	r3, r1
 80018d6:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80018d8:	78fa      	ldrb	r2, [r7, #3]
 80018da:	6879      	ldr	r1, [r7, #4]
 80018dc:	4613      	mov	r3, r2
 80018de:	009b      	lsls	r3, r3, #2
 80018e0:	4413      	add	r3, r2
 80018e2:	00db      	lsls	r3, r3, #3
 80018e4:	440b      	add	r3, r1
 80018e6:	335c      	adds	r3, #92	; 0x5c
 80018e8:	781b      	ldrb	r3, [r3, #0]
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	370c      	adds	r7, #12
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr

080018f6 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80018f6:	b480      	push	{r7}
 80018f8:	b083      	sub	sp, #12
 80018fa:	af00      	add	r7, sp, #0
 80018fc:	6078      	str	r0, [r7, #4]
 80018fe:	460b      	mov	r3, r1
 8001900:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001902:	78fa      	ldrb	r2, [r7, #3]
 8001904:	6879      	ldr	r1, [r7, #4]
 8001906:	4613      	mov	r3, r2
 8001908:	009b      	lsls	r3, r3, #2
 800190a:	4413      	add	r3, r2
 800190c:	00db      	lsls	r3, r3, #3
 800190e:	440b      	add	r3, r1
 8001910:	334c      	adds	r3, #76	; 0x4c
 8001912:	681b      	ldr	r3, [r3, #0]
}
 8001914:	4618      	mov	r0, r3
 8001916:	370c      	adds	r7, #12
 8001918:	46bd      	mov	sp, r7
 800191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191e:	4770      	bx	lr

08001920 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b082      	sub	sp, #8
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4618      	mov	r0, r3
 800192e:	f002 fd31 	bl	8004394 <USB_GetCurrentFrame>
 8001932:	4603      	mov	r3, r0
}
 8001934:	4618      	mov	r0, r3
 8001936:	3708      	adds	r7, #8
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}

0800193c <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b082      	sub	sp, #8
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4618      	mov	r0, r3
 800194a:	f002 fd0c 	bl	8004366 <USB_GetHostSpeed>
 800194e:	4603      	mov	r3, r0
}
 8001950:	4618      	mov	r0, r3
 8001952:	3708      	adds	r7, #8
 8001954:	46bd      	mov	sp, r7
 8001956:	bd80      	pop	{r7, pc}

08001958 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b086      	sub	sp, #24
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
 8001960:	460b      	mov	r3, r1
 8001962:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800196a:	697b      	ldr	r3, [r7, #20]
 800196c:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 800196e:	78fb      	ldrb	r3, [r7, #3]
 8001970:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	015a      	lsls	r2, r3, #5
 8001976:	693b      	ldr	r3, [r7, #16]
 8001978:	4413      	add	r3, r2
 800197a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800197e:	689b      	ldr	r3, [r3, #8]
 8001980:	f003 0304 	and.w	r3, r3, #4
 8001984:	2b04      	cmp	r3, #4
 8001986:	d119      	bne.n	80019bc <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	015a      	lsls	r2, r3, #5
 800198c:	693b      	ldr	r3, [r7, #16]
 800198e:	4413      	add	r3, r2
 8001990:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001994:	461a      	mov	r2, r3
 8001996:	2304      	movs	r3, #4
 8001998:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	015a      	lsls	r2, r3, #5
 800199e:	693b      	ldr	r3, [r7, #16]
 80019a0:	4413      	add	r3, r2
 80019a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019a6:	68db      	ldr	r3, [r3, #12]
 80019a8:	68fa      	ldr	r2, [r7, #12]
 80019aa:	0151      	lsls	r1, r2, #5
 80019ac:	693a      	ldr	r2, [r7, #16]
 80019ae:	440a      	add	r2, r1
 80019b0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80019b4:	f043 0302 	orr.w	r3, r3, #2
 80019b8:	60d3      	str	r3, [r2, #12]
 80019ba:	e0ce      	b.n	8001b5a <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	015a      	lsls	r2, r3, #5
 80019c0:	693b      	ldr	r3, [r7, #16]
 80019c2:	4413      	add	r3, r2
 80019c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019c8:	689b      	ldr	r3, [r3, #8]
 80019ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80019d2:	d12c      	bne.n	8001a2e <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	015a      	lsls	r2, r3, #5
 80019d8:	693b      	ldr	r3, [r7, #16]
 80019da:	4413      	add	r3, r2
 80019dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019e0:	461a      	mov	r2, r3
 80019e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80019e6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80019e8:	6879      	ldr	r1, [r7, #4]
 80019ea:	68fa      	ldr	r2, [r7, #12]
 80019ec:	4613      	mov	r3, r2
 80019ee:	009b      	lsls	r3, r3, #2
 80019f0:	4413      	add	r3, r2
 80019f2:	00db      	lsls	r3, r3, #3
 80019f4:	440b      	add	r3, r1
 80019f6:	335d      	adds	r3, #93	; 0x5d
 80019f8:	2207      	movs	r2, #7
 80019fa:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	015a      	lsls	r2, r3, #5
 8001a00:	693b      	ldr	r3, [r7, #16]
 8001a02:	4413      	add	r3, r2
 8001a04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a08:	68db      	ldr	r3, [r3, #12]
 8001a0a:	68fa      	ldr	r2, [r7, #12]
 8001a0c:	0151      	lsls	r1, r2, #5
 8001a0e:	693a      	ldr	r2, [r7, #16]
 8001a10:	440a      	add	r2, r1
 8001a12:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001a16:	f043 0302 	orr.w	r3, r3, #2
 8001a1a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	68fa      	ldr	r2, [r7, #12]
 8001a22:	b2d2      	uxtb	r2, r2
 8001a24:	4611      	mov	r1, r2
 8001a26:	4618      	mov	r0, r3
 8001a28:	f002 ff23 	bl	8004872 <USB_HC_Halt>
 8001a2c:	e095      	b.n	8001b5a <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	015a      	lsls	r2, r3, #5
 8001a32:	693b      	ldr	r3, [r7, #16]
 8001a34:	4413      	add	r3, r2
 8001a36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a3a:	689b      	ldr	r3, [r3, #8]
 8001a3c:	f003 0320 	and.w	r3, r3, #32
 8001a40:	2b20      	cmp	r3, #32
 8001a42:	d109      	bne.n	8001a58 <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	015a      	lsls	r2, r3, #5
 8001a48:	693b      	ldr	r3, [r7, #16]
 8001a4a:	4413      	add	r3, r2
 8001a4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a50:	461a      	mov	r2, r3
 8001a52:	2320      	movs	r3, #32
 8001a54:	6093      	str	r3, [r2, #8]
 8001a56:	e080      	b.n	8001b5a <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	015a      	lsls	r2, r3, #5
 8001a5c:	693b      	ldr	r3, [r7, #16]
 8001a5e:	4413      	add	r3, r2
 8001a60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a64:	689b      	ldr	r3, [r3, #8]
 8001a66:	f003 0308 	and.w	r3, r3, #8
 8001a6a:	2b08      	cmp	r3, #8
 8001a6c:	d134      	bne.n	8001ad8 <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	015a      	lsls	r2, r3, #5
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	4413      	add	r3, r2
 8001a76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a7a:	68db      	ldr	r3, [r3, #12]
 8001a7c:	68fa      	ldr	r2, [r7, #12]
 8001a7e:	0151      	lsls	r1, r2, #5
 8001a80:	693a      	ldr	r2, [r7, #16]
 8001a82:	440a      	add	r2, r1
 8001a84:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001a88:	f043 0302 	orr.w	r3, r3, #2
 8001a8c:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8001a8e:	6879      	ldr	r1, [r7, #4]
 8001a90:	68fa      	ldr	r2, [r7, #12]
 8001a92:	4613      	mov	r3, r2
 8001a94:	009b      	lsls	r3, r3, #2
 8001a96:	4413      	add	r3, r2
 8001a98:	00db      	lsls	r3, r3, #3
 8001a9a:	440b      	add	r3, r1
 8001a9c:	335d      	adds	r3, #93	; 0x5d
 8001a9e:	2205      	movs	r2, #5
 8001aa0:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	015a      	lsls	r2, r3, #5
 8001aa6:	693b      	ldr	r3, [r7, #16]
 8001aa8:	4413      	add	r3, r2
 8001aaa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001aae:	461a      	mov	r2, r3
 8001ab0:	2310      	movs	r3, #16
 8001ab2:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	015a      	lsls	r2, r3, #5
 8001ab8:	693b      	ldr	r3, [r7, #16]
 8001aba:	4413      	add	r3, r2
 8001abc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ac0:	461a      	mov	r2, r3
 8001ac2:	2308      	movs	r3, #8
 8001ac4:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	68fa      	ldr	r2, [r7, #12]
 8001acc:	b2d2      	uxtb	r2, r2
 8001ace:	4611      	mov	r1, r2
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f002 fece 	bl	8004872 <USB_HC_Halt>
 8001ad6:	e040      	b.n	8001b5a <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	015a      	lsls	r2, r3, #5
 8001adc:	693b      	ldr	r3, [r7, #16]
 8001ade:	4413      	add	r3, r2
 8001ae0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ae4:	689b      	ldr	r3, [r3, #8]
 8001ae6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001aea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001aee:	d134      	bne.n	8001b5a <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	015a      	lsls	r2, r3, #5
 8001af4:	693b      	ldr	r3, [r7, #16]
 8001af6:	4413      	add	r3, r2
 8001af8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001afc:	68db      	ldr	r3, [r3, #12]
 8001afe:	68fa      	ldr	r2, [r7, #12]
 8001b00:	0151      	lsls	r1, r2, #5
 8001b02:	693a      	ldr	r2, [r7, #16]
 8001b04:	440a      	add	r2, r1
 8001b06:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001b0a:	f043 0302 	orr.w	r3, r3, #2
 8001b0e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	68fa      	ldr	r2, [r7, #12]
 8001b16:	b2d2      	uxtb	r2, r2
 8001b18:	4611      	mov	r1, r2
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f002 fea9 	bl	8004872 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	015a      	lsls	r2, r3, #5
 8001b24:	693b      	ldr	r3, [r7, #16]
 8001b26:	4413      	add	r3, r2
 8001b28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b2c:	461a      	mov	r2, r3
 8001b2e:	2310      	movs	r3, #16
 8001b30:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001b32:	6879      	ldr	r1, [r7, #4]
 8001b34:	68fa      	ldr	r2, [r7, #12]
 8001b36:	4613      	mov	r3, r2
 8001b38:	009b      	lsls	r3, r3, #2
 8001b3a:	4413      	add	r3, r2
 8001b3c:	00db      	lsls	r3, r3, #3
 8001b3e:	440b      	add	r3, r1
 8001b40:	335d      	adds	r3, #93	; 0x5d
 8001b42:	2208      	movs	r2, #8
 8001b44:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	015a      	lsls	r2, r3, #5
 8001b4a:	693b      	ldr	r3, [r7, #16]
 8001b4c:	4413      	add	r3, r2
 8001b4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b52:	461a      	mov	r2, r3
 8001b54:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b58:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	015a      	lsls	r2, r3, #5
 8001b5e:	693b      	ldr	r3, [r7, #16]
 8001b60:	4413      	add	r3, r2
 8001b62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b66:	689b      	ldr	r3, [r3, #8]
 8001b68:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001b70:	d122      	bne.n	8001bb8 <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	015a      	lsls	r2, r3, #5
 8001b76:	693b      	ldr	r3, [r7, #16]
 8001b78:	4413      	add	r3, r2
 8001b7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b7e:	68db      	ldr	r3, [r3, #12]
 8001b80:	68fa      	ldr	r2, [r7, #12]
 8001b82:	0151      	lsls	r1, r2, #5
 8001b84:	693a      	ldr	r2, [r7, #16]
 8001b86:	440a      	add	r2, r1
 8001b88:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001b8c:	f043 0302 	orr.w	r3, r3, #2
 8001b90:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	68fa      	ldr	r2, [r7, #12]
 8001b98:	b2d2      	uxtb	r2, r2
 8001b9a:	4611      	mov	r1, r2
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f002 fe68 	bl	8004872 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	015a      	lsls	r2, r3, #5
 8001ba6:	693b      	ldr	r3, [r7, #16]
 8001ba8:	4413      	add	r3, r2
 8001baa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bae:	461a      	mov	r2, r3
 8001bb0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001bb4:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8001bb6:	e300      	b.n	80021ba <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	015a      	lsls	r2, r3, #5
 8001bbc:	693b      	ldr	r3, [r7, #16]
 8001bbe:	4413      	add	r3, r2
 8001bc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bc4:	689b      	ldr	r3, [r3, #8]
 8001bc6:	f003 0301 	and.w	r3, r3, #1
 8001bca:	2b01      	cmp	r3, #1
 8001bcc:	f040 80fd 	bne.w	8001dca <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	691b      	ldr	r3, [r3, #16]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d01b      	beq.n	8001c10 <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8001bd8:	6879      	ldr	r1, [r7, #4]
 8001bda:	68fa      	ldr	r2, [r7, #12]
 8001bdc:	4613      	mov	r3, r2
 8001bde:	009b      	lsls	r3, r3, #2
 8001be0:	4413      	add	r3, r2
 8001be2:	00db      	lsls	r3, r3, #3
 8001be4:	440b      	add	r3, r1
 8001be6:	3348      	adds	r3, #72	; 0x48
 8001be8:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	0159      	lsls	r1, r3, #5
 8001bee:	693b      	ldr	r3, [r7, #16]
 8001bf0:	440b      	add	r3, r1
 8001bf2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bf6:	691b      	ldr	r3, [r3, #16]
 8001bf8:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8001bfc:	1ad1      	subs	r1, r2, r3
 8001bfe:	6878      	ldr	r0, [r7, #4]
 8001c00:	68fa      	ldr	r2, [r7, #12]
 8001c02:	4613      	mov	r3, r2
 8001c04:	009b      	lsls	r3, r3, #2
 8001c06:	4413      	add	r3, r2
 8001c08:	00db      	lsls	r3, r3, #3
 8001c0a:	4403      	add	r3, r0
 8001c0c:	334c      	adds	r3, #76	; 0x4c
 8001c0e:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8001c10:	6879      	ldr	r1, [r7, #4]
 8001c12:	68fa      	ldr	r2, [r7, #12]
 8001c14:	4613      	mov	r3, r2
 8001c16:	009b      	lsls	r3, r3, #2
 8001c18:	4413      	add	r3, r2
 8001c1a:	00db      	lsls	r3, r3, #3
 8001c1c:	440b      	add	r3, r1
 8001c1e:	335d      	adds	r3, #93	; 0x5d
 8001c20:	2201      	movs	r2, #1
 8001c22:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001c24:	6879      	ldr	r1, [r7, #4]
 8001c26:	68fa      	ldr	r2, [r7, #12]
 8001c28:	4613      	mov	r3, r2
 8001c2a:	009b      	lsls	r3, r3, #2
 8001c2c:	4413      	add	r3, r2
 8001c2e:	00db      	lsls	r3, r3, #3
 8001c30:	440b      	add	r3, r1
 8001c32:	3358      	adds	r3, #88	; 0x58
 8001c34:	2200      	movs	r2, #0
 8001c36:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	015a      	lsls	r2, r3, #5
 8001c3c:	693b      	ldr	r3, [r7, #16]
 8001c3e:	4413      	add	r3, r2
 8001c40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c44:	461a      	mov	r2, r3
 8001c46:	2301      	movs	r3, #1
 8001c48:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001c4a:	6879      	ldr	r1, [r7, #4]
 8001c4c:	68fa      	ldr	r2, [r7, #12]
 8001c4e:	4613      	mov	r3, r2
 8001c50:	009b      	lsls	r3, r3, #2
 8001c52:	4413      	add	r3, r2
 8001c54:	00db      	lsls	r3, r3, #3
 8001c56:	440b      	add	r3, r1
 8001c58:	333f      	adds	r3, #63	; 0x3f
 8001c5a:	781b      	ldrb	r3, [r3, #0]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d00a      	beq.n	8001c76 <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001c60:	6879      	ldr	r1, [r7, #4]
 8001c62:	68fa      	ldr	r2, [r7, #12]
 8001c64:	4613      	mov	r3, r2
 8001c66:	009b      	lsls	r3, r3, #2
 8001c68:	4413      	add	r3, r2
 8001c6a:	00db      	lsls	r3, r3, #3
 8001c6c:	440b      	add	r3, r1
 8001c6e:	333f      	adds	r3, #63	; 0x3f
 8001c70:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001c72:	2b02      	cmp	r3, #2
 8001c74:	d121      	bne.n	8001cba <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	015a      	lsls	r2, r3, #5
 8001c7a:	693b      	ldr	r3, [r7, #16]
 8001c7c:	4413      	add	r3, r2
 8001c7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c82:	68db      	ldr	r3, [r3, #12]
 8001c84:	68fa      	ldr	r2, [r7, #12]
 8001c86:	0151      	lsls	r1, r2, #5
 8001c88:	693a      	ldr	r2, [r7, #16]
 8001c8a:	440a      	add	r2, r1
 8001c8c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001c90:	f043 0302 	orr.w	r3, r3, #2
 8001c94:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	68fa      	ldr	r2, [r7, #12]
 8001c9c:	b2d2      	uxtb	r2, r2
 8001c9e:	4611      	mov	r1, r2
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f002 fde6 	bl	8004872 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	015a      	lsls	r2, r3, #5
 8001caa:	693b      	ldr	r3, [r7, #16]
 8001cac:	4413      	add	r3, r2
 8001cae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cb2:	461a      	mov	r2, r3
 8001cb4:	2310      	movs	r3, #16
 8001cb6:	6093      	str	r3, [r2, #8]
 8001cb8:	e070      	b.n	8001d9c <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8001cba:	6879      	ldr	r1, [r7, #4]
 8001cbc:	68fa      	ldr	r2, [r7, #12]
 8001cbe:	4613      	mov	r3, r2
 8001cc0:	009b      	lsls	r3, r3, #2
 8001cc2:	4413      	add	r3, r2
 8001cc4:	00db      	lsls	r3, r3, #3
 8001cc6:	440b      	add	r3, r1
 8001cc8:	333f      	adds	r3, #63	; 0x3f
 8001cca:	781b      	ldrb	r3, [r3, #0]
 8001ccc:	2b03      	cmp	r3, #3
 8001cce:	d12a      	bne.n	8001d26 <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	015a      	lsls	r2, r3, #5
 8001cd4:	693b      	ldr	r3, [r7, #16]
 8001cd6:	4413      	add	r3, r2
 8001cd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	68fa      	ldr	r2, [r7, #12]
 8001ce0:	0151      	lsls	r1, r2, #5
 8001ce2:	693a      	ldr	r2, [r7, #16]
 8001ce4:	440a      	add	r2, r1
 8001ce6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001cea:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001cee:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001cf0:	6879      	ldr	r1, [r7, #4]
 8001cf2:	68fa      	ldr	r2, [r7, #12]
 8001cf4:	4613      	mov	r3, r2
 8001cf6:	009b      	lsls	r3, r3, #2
 8001cf8:	4413      	add	r3, r2
 8001cfa:	00db      	lsls	r3, r3, #3
 8001cfc:	440b      	add	r3, r1
 8001cfe:	335c      	adds	r3, #92	; 0x5c
 8001d00:	2201      	movs	r2, #1
 8001d02:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	b2d8      	uxtb	r0, r3
 8001d08:	6879      	ldr	r1, [r7, #4]
 8001d0a:	68fa      	ldr	r2, [r7, #12]
 8001d0c:	4613      	mov	r3, r2
 8001d0e:	009b      	lsls	r3, r3, #2
 8001d10:	4413      	add	r3, r2
 8001d12:	00db      	lsls	r3, r3, #3
 8001d14:	440b      	add	r3, r1
 8001d16:	335c      	adds	r3, #92	; 0x5c
 8001d18:	781b      	ldrb	r3, [r3, #0]
 8001d1a:	461a      	mov	r2, r3
 8001d1c:	4601      	mov	r1, r0
 8001d1e:	6878      	ldr	r0, [r7, #4]
 8001d20:	f005 faa8 	bl	8007274 <HAL_HCD_HC_NotifyURBChange_Callback>
 8001d24:	e03a      	b.n	8001d9c <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8001d26:	6879      	ldr	r1, [r7, #4]
 8001d28:	68fa      	ldr	r2, [r7, #12]
 8001d2a:	4613      	mov	r3, r2
 8001d2c:	009b      	lsls	r3, r3, #2
 8001d2e:	4413      	add	r3, r2
 8001d30:	00db      	lsls	r3, r3, #3
 8001d32:	440b      	add	r3, r1
 8001d34:	333f      	adds	r3, #63	; 0x3f
 8001d36:	781b      	ldrb	r3, [r3, #0]
 8001d38:	2b01      	cmp	r3, #1
 8001d3a:	d12f      	bne.n	8001d9c <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001d3c:	6879      	ldr	r1, [r7, #4]
 8001d3e:	68fa      	ldr	r2, [r7, #12]
 8001d40:	4613      	mov	r3, r2
 8001d42:	009b      	lsls	r3, r3, #2
 8001d44:	4413      	add	r3, r2
 8001d46:	00db      	lsls	r3, r3, #3
 8001d48:	440b      	add	r3, r1
 8001d4a:	335c      	adds	r3, #92	; 0x5c
 8001d4c:	2201      	movs	r2, #1
 8001d4e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8001d50:	6879      	ldr	r1, [r7, #4]
 8001d52:	68fa      	ldr	r2, [r7, #12]
 8001d54:	4613      	mov	r3, r2
 8001d56:	009b      	lsls	r3, r3, #2
 8001d58:	4413      	add	r3, r2
 8001d5a:	00db      	lsls	r3, r3, #3
 8001d5c:	440b      	add	r3, r1
 8001d5e:	3350      	adds	r3, #80	; 0x50
 8001d60:	781b      	ldrb	r3, [r3, #0]
 8001d62:	f083 0301 	eor.w	r3, r3, #1
 8001d66:	b2d8      	uxtb	r0, r3
 8001d68:	6879      	ldr	r1, [r7, #4]
 8001d6a:	68fa      	ldr	r2, [r7, #12]
 8001d6c:	4613      	mov	r3, r2
 8001d6e:	009b      	lsls	r3, r3, #2
 8001d70:	4413      	add	r3, r2
 8001d72:	00db      	lsls	r3, r3, #3
 8001d74:	440b      	add	r3, r1
 8001d76:	3350      	adds	r3, #80	; 0x50
 8001d78:	4602      	mov	r2, r0
 8001d7a:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	b2d8      	uxtb	r0, r3
 8001d80:	6879      	ldr	r1, [r7, #4]
 8001d82:	68fa      	ldr	r2, [r7, #12]
 8001d84:	4613      	mov	r3, r2
 8001d86:	009b      	lsls	r3, r3, #2
 8001d88:	4413      	add	r3, r2
 8001d8a:	00db      	lsls	r3, r3, #3
 8001d8c:	440b      	add	r3, r1
 8001d8e:	335c      	adds	r3, #92	; 0x5c
 8001d90:	781b      	ldrb	r3, [r3, #0]
 8001d92:	461a      	mov	r2, r3
 8001d94:	4601      	mov	r1, r0
 8001d96:	6878      	ldr	r0, [r7, #4]
 8001d98:	f005 fa6c 	bl	8007274 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8001d9c:	6879      	ldr	r1, [r7, #4]
 8001d9e:	68fa      	ldr	r2, [r7, #12]
 8001da0:	4613      	mov	r3, r2
 8001da2:	009b      	lsls	r3, r3, #2
 8001da4:	4413      	add	r3, r2
 8001da6:	00db      	lsls	r3, r3, #3
 8001da8:	440b      	add	r3, r1
 8001daa:	3350      	adds	r3, #80	; 0x50
 8001dac:	781b      	ldrb	r3, [r3, #0]
 8001dae:	f083 0301 	eor.w	r3, r3, #1
 8001db2:	b2d8      	uxtb	r0, r3
 8001db4:	6879      	ldr	r1, [r7, #4]
 8001db6:	68fa      	ldr	r2, [r7, #12]
 8001db8:	4613      	mov	r3, r2
 8001dba:	009b      	lsls	r3, r3, #2
 8001dbc:	4413      	add	r3, r2
 8001dbe:	00db      	lsls	r3, r3, #3
 8001dc0:	440b      	add	r3, r1
 8001dc2:	3350      	adds	r3, #80	; 0x50
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	701a      	strb	r2, [r3, #0]
}
 8001dc8:	e1f7      	b.n	80021ba <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	015a      	lsls	r2, r3, #5
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	4413      	add	r3, r2
 8001dd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dd6:	689b      	ldr	r3, [r3, #8]
 8001dd8:	f003 0302 	and.w	r3, r3, #2
 8001ddc:	2b02      	cmp	r3, #2
 8001dde:	f040 811a 	bne.w	8002016 <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	015a      	lsls	r2, r3, #5
 8001de6:	693b      	ldr	r3, [r7, #16]
 8001de8:	4413      	add	r3, r2
 8001dea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dee:	68db      	ldr	r3, [r3, #12]
 8001df0:	68fa      	ldr	r2, [r7, #12]
 8001df2:	0151      	lsls	r1, r2, #5
 8001df4:	693a      	ldr	r2, [r7, #16]
 8001df6:	440a      	add	r2, r1
 8001df8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001dfc:	f023 0302 	bic.w	r3, r3, #2
 8001e00:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8001e02:	6879      	ldr	r1, [r7, #4]
 8001e04:	68fa      	ldr	r2, [r7, #12]
 8001e06:	4613      	mov	r3, r2
 8001e08:	009b      	lsls	r3, r3, #2
 8001e0a:	4413      	add	r3, r2
 8001e0c:	00db      	lsls	r3, r3, #3
 8001e0e:	440b      	add	r3, r1
 8001e10:	335d      	adds	r3, #93	; 0x5d
 8001e12:	781b      	ldrb	r3, [r3, #0]
 8001e14:	2b01      	cmp	r3, #1
 8001e16:	d10a      	bne.n	8001e2e <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8001e18:	6879      	ldr	r1, [r7, #4]
 8001e1a:	68fa      	ldr	r2, [r7, #12]
 8001e1c:	4613      	mov	r3, r2
 8001e1e:	009b      	lsls	r3, r3, #2
 8001e20:	4413      	add	r3, r2
 8001e22:	00db      	lsls	r3, r3, #3
 8001e24:	440b      	add	r3, r1
 8001e26:	335c      	adds	r3, #92	; 0x5c
 8001e28:	2201      	movs	r2, #1
 8001e2a:	701a      	strb	r2, [r3, #0]
 8001e2c:	e0d9      	b.n	8001fe2 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8001e2e:	6879      	ldr	r1, [r7, #4]
 8001e30:	68fa      	ldr	r2, [r7, #12]
 8001e32:	4613      	mov	r3, r2
 8001e34:	009b      	lsls	r3, r3, #2
 8001e36:	4413      	add	r3, r2
 8001e38:	00db      	lsls	r3, r3, #3
 8001e3a:	440b      	add	r3, r1
 8001e3c:	335d      	adds	r3, #93	; 0x5d
 8001e3e:	781b      	ldrb	r3, [r3, #0]
 8001e40:	2b05      	cmp	r3, #5
 8001e42:	d10a      	bne.n	8001e5a <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8001e44:	6879      	ldr	r1, [r7, #4]
 8001e46:	68fa      	ldr	r2, [r7, #12]
 8001e48:	4613      	mov	r3, r2
 8001e4a:	009b      	lsls	r3, r3, #2
 8001e4c:	4413      	add	r3, r2
 8001e4e:	00db      	lsls	r3, r3, #3
 8001e50:	440b      	add	r3, r1
 8001e52:	335c      	adds	r3, #92	; 0x5c
 8001e54:	2205      	movs	r2, #5
 8001e56:	701a      	strb	r2, [r3, #0]
 8001e58:	e0c3      	b.n	8001fe2 <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001e5a:	6879      	ldr	r1, [r7, #4]
 8001e5c:	68fa      	ldr	r2, [r7, #12]
 8001e5e:	4613      	mov	r3, r2
 8001e60:	009b      	lsls	r3, r3, #2
 8001e62:	4413      	add	r3, r2
 8001e64:	00db      	lsls	r3, r3, #3
 8001e66:	440b      	add	r3, r1
 8001e68:	335d      	adds	r3, #93	; 0x5d
 8001e6a:	781b      	ldrb	r3, [r3, #0]
 8001e6c:	2b06      	cmp	r3, #6
 8001e6e:	d00a      	beq.n	8001e86 <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8001e70:	6879      	ldr	r1, [r7, #4]
 8001e72:	68fa      	ldr	r2, [r7, #12]
 8001e74:	4613      	mov	r3, r2
 8001e76:	009b      	lsls	r3, r3, #2
 8001e78:	4413      	add	r3, r2
 8001e7a:	00db      	lsls	r3, r3, #3
 8001e7c:	440b      	add	r3, r1
 8001e7e:	335d      	adds	r3, #93	; 0x5d
 8001e80:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001e82:	2b08      	cmp	r3, #8
 8001e84:	d156      	bne.n	8001f34 <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 8001e86:	6879      	ldr	r1, [r7, #4]
 8001e88:	68fa      	ldr	r2, [r7, #12]
 8001e8a:	4613      	mov	r3, r2
 8001e8c:	009b      	lsls	r3, r3, #2
 8001e8e:	4413      	add	r3, r2
 8001e90:	00db      	lsls	r3, r3, #3
 8001e92:	440b      	add	r3, r1
 8001e94:	3358      	adds	r3, #88	; 0x58
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	1c59      	adds	r1, r3, #1
 8001e9a:	6878      	ldr	r0, [r7, #4]
 8001e9c:	68fa      	ldr	r2, [r7, #12]
 8001e9e:	4613      	mov	r3, r2
 8001ea0:	009b      	lsls	r3, r3, #2
 8001ea2:	4413      	add	r3, r2
 8001ea4:	00db      	lsls	r3, r3, #3
 8001ea6:	4403      	add	r3, r0
 8001ea8:	3358      	adds	r3, #88	; 0x58
 8001eaa:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8001eac:	6879      	ldr	r1, [r7, #4]
 8001eae:	68fa      	ldr	r2, [r7, #12]
 8001eb0:	4613      	mov	r3, r2
 8001eb2:	009b      	lsls	r3, r3, #2
 8001eb4:	4413      	add	r3, r2
 8001eb6:	00db      	lsls	r3, r3, #3
 8001eb8:	440b      	add	r3, r1
 8001eba:	3358      	adds	r3, #88	; 0x58
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	2b03      	cmp	r3, #3
 8001ec0:	d914      	bls.n	8001eec <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8001ec2:	6879      	ldr	r1, [r7, #4]
 8001ec4:	68fa      	ldr	r2, [r7, #12]
 8001ec6:	4613      	mov	r3, r2
 8001ec8:	009b      	lsls	r3, r3, #2
 8001eca:	4413      	add	r3, r2
 8001ecc:	00db      	lsls	r3, r3, #3
 8001ece:	440b      	add	r3, r1
 8001ed0:	3358      	adds	r3, #88	; 0x58
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8001ed6:	6879      	ldr	r1, [r7, #4]
 8001ed8:	68fa      	ldr	r2, [r7, #12]
 8001eda:	4613      	mov	r3, r2
 8001edc:	009b      	lsls	r3, r3, #2
 8001ede:	4413      	add	r3, r2
 8001ee0:	00db      	lsls	r3, r3, #3
 8001ee2:	440b      	add	r3, r1
 8001ee4:	335c      	adds	r3, #92	; 0x5c
 8001ee6:	2204      	movs	r2, #4
 8001ee8:	701a      	strb	r2, [r3, #0]
 8001eea:	e009      	b.n	8001f00 <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8001eec:	6879      	ldr	r1, [r7, #4]
 8001eee:	68fa      	ldr	r2, [r7, #12]
 8001ef0:	4613      	mov	r3, r2
 8001ef2:	009b      	lsls	r3, r3, #2
 8001ef4:	4413      	add	r3, r2
 8001ef6:	00db      	lsls	r3, r3, #3
 8001ef8:	440b      	add	r3, r1
 8001efa:	335c      	adds	r3, #92	; 0x5c
 8001efc:	2202      	movs	r2, #2
 8001efe:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	015a      	lsls	r2, r3, #5
 8001f04:	693b      	ldr	r3, [r7, #16]
 8001f06:	4413      	add	r3, r2
 8001f08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001f10:	68bb      	ldr	r3, [r7, #8]
 8001f12:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001f16:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001f18:	68bb      	ldr	r3, [r7, #8]
 8001f1a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001f1e:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	015a      	lsls	r2, r3, #5
 8001f24:	693b      	ldr	r3, [r7, #16]
 8001f26:	4413      	add	r3, r2
 8001f28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f2c:	461a      	mov	r2, r3
 8001f2e:	68bb      	ldr	r3, [r7, #8]
 8001f30:	6013      	str	r3, [r2, #0]
 8001f32:	e056      	b.n	8001fe2 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8001f34:	6879      	ldr	r1, [r7, #4]
 8001f36:	68fa      	ldr	r2, [r7, #12]
 8001f38:	4613      	mov	r3, r2
 8001f3a:	009b      	lsls	r3, r3, #2
 8001f3c:	4413      	add	r3, r2
 8001f3e:	00db      	lsls	r3, r3, #3
 8001f40:	440b      	add	r3, r1
 8001f42:	335d      	adds	r3, #93	; 0x5d
 8001f44:	781b      	ldrb	r3, [r3, #0]
 8001f46:	2b03      	cmp	r3, #3
 8001f48:	d123      	bne.n	8001f92 <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8001f4a:	6879      	ldr	r1, [r7, #4]
 8001f4c:	68fa      	ldr	r2, [r7, #12]
 8001f4e:	4613      	mov	r3, r2
 8001f50:	009b      	lsls	r3, r3, #2
 8001f52:	4413      	add	r3, r2
 8001f54:	00db      	lsls	r3, r3, #3
 8001f56:	440b      	add	r3, r1
 8001f58:	335c      	adds	r3, #92	; 0x5c
 8001f5a:	2202      	movs	r2, #2
 8001f5c:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	015a      	lsls	r2, r3, #5
 8001f62:	693b      	ldr	r3, [r7, #16]
 8001f64:	4413      	add	r3, r2
 8001f66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001f6e:	68bb      	ldr	r3, [r7, #8]
 8001f70:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001f74:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001f76:	68bb      	ldr	r3, [r7, #8]
 8001f78:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001f7c:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	015a      	lsls	r2, r3, #5
 8001f82:	693b      	ldr	r3, [r7, #16]
 8001f84:	4413      	add	r3, r2
 8001f86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f8a:	461a      	mov	r2, r3
 8001f8c:	68bb      	ldr	r3, [r7, #8]
 8001f8e:	6013      	str	r3, [r2, #0]
 8001f90:	e027      	b.n	8001fe2 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8001f92:	6879      	ldr	r1, [r7, #4]
 8001f94:	68fa      	ldr	r2, [r7, #12]
 8001f96:	4613      	mov	r3, r2
 8001f98:	009b      	lsls	r3, r3, #2
 8001f9a:	4413      	add	r3, r2
 8001f9c:	00db      	lsls	r3, r3, #3
 8001f9e:	440b      	add	r3, r1
 8001fa0:	335d      	adds	r3, #93	; 0x5d
 8001fa2:	781b      	ldrb	r3, [r3, #0]
 8001fa4:	2b07      	cmp	r3, #7
 8001fa6:	d11c      	bne.n	8001fe2 <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 8001fa8:	6879      	ldr	r1, [r7, #4]
 8001faa:	68fa      	ldr	r2, [r7, #12]
 8001fac:	4613      	mov	r3, r2
 8001fae:	009b      	lsls	r3, r3, #2
 8001fb0:	4413      	add	r3, r2
 8001fb2:	00db      	lsls	r3, r3, #3
 8001fb4:	440b      	add	r3, r1
 8001fb6:	3358      	adds	r3, #88	; 0x58
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	1c59      	adds	r1, r3, #1
 8001fbc:	6878      	ldr	r0, [r7, #4]
 8001fbe:	68fa      	ldr	r2, [r7, #12]
 8001fc0:	4613      	mov	r3, r2
 8001fc2:	009b      	lsls	r3, r3, #2
 8001fc4:	4413      	add	r3, r2
 8001fc6:	00db      	lsls	r3, r3, #3
 8001fc8:	4403      	add	r3, r0
 8001fca:	3358      	adds	r3, #88	; 0x58
 8001fcc:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8001fce:	6879      	ldr	r1, [r7, #4]
 8001fd0:	68fa      	ldr	r2, [r7, #12]
 8001fd2:	4613      	mov	r3, r2
 8001fd4:	009b      	lsls	r3, r3, #2
 8001fd6:	4413      	add	r3, r2
 8001fd8:	00db      	lsls	r3, r3, #3
 8001fda:	440b      	add	r3, r1
 8001fdc:	335c      	adds	r3, #92	; 0x5c
 8001fde:	2204      	movs	r2, #4
 8001fe0:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	015a      	lsls	r2, r3, #5
 8001fe6:	693b      	ldr	r3, [r7, #16]
 8001fe8:	4413      	add	r3, r2
 8001fea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fee:	461a      	mov	r2, r3
 8001ff0:	2302      	movs	r3, #2
 8001ff2:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	b2d8      	uxtb	r0, r3
 8001ff8:	6879      	ldr	r1, [r7, #4]
 8001ffa:	68fa      	ldr	r2, [r7, #12]
 8001ffc:	4613      	mov	r3, r2
 8001ffe:	009b      	lsls	r3, r3, #2
 8002000:	4413      	add	r3, r2
 8002002:	00db      	lsls	r3, r3, #3
 8002004:	440b      	add	r3, r1
 8002006:	335c      	adds	r3, #92	; 0x5c
 8002008:	781b      	ldrb	r3, [r3, #0]
 800200a:	461a      	mov	r2, r3
 800200c:	4601      	mov	r1, r0
 800200e:	6878      	ldr	r0, [r7, #4]
 8002010:	f005 f930 	bl	8007274 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002014:	e0d1      	b.n	80021ba <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	015a      	lsls	r2, r3, #5
 800201a:	693b      	ldr	r3, [r7, #16]
 800201c:	4413      	add	r3, r2
 800201e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002022:	689b      	ldr	r3, [r3, #8]
 8002024:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002028:	2b80      	cmp	r3, #128	; 0x80
 800202a:	d13e      	bne.n	80020aa <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	015a      	lsls	r2, r3, #5
 8002030:	693b      	ldr	r3, [r7, #16]
 8002032:	4413      	add	r3, r2
 8002034:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002038:	68db      	ldr	r3, [r3, #12]
 800203a:	68fa      	ldr	r2, [r7, #12]
 800203c:	0151      	lsls	r1, r2, #5
 800203e:	693a      	ldr	r2, [r7, #16]
 8002040:	440a      	add	r2, r1
 8002042:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002046:	f043 0302 	orr.w	r3, r3, #2
 800204a:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 800204c:	6879      	ldr	r1, [r7, #4]
 800204e:	68fa      	ldr	r2, [r7, #12]
 8002050:	4613      	mov	r3, r2
 8002052:	009b      	lsls	r3, r3, #2
 8002054:	4413      	add	r3, r2
 8002056:	00db      	lsls	r3, r3, #3
 8002058:	440b      	add	r3, r1
 800205a:	3358      	adds	r3, #88	; 0x58
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	1c59      	adds	r1, r3, #1
 8002060:	6878      	ldr	r0, [r7, #4]
 8002062:	68fa      	ldr	r2, [r7, #12]
 8002064:	4613      	mov	r3, r2
 8002066:	009b      	lsls	r3, r3, #2
 8002068:	4413      	add	r3, r2
 800206a:	00db      	lsls	r3, r3, #3
 800206c:	4403      	add	r3, r0
 800206e:	3358      	adds	r3, #88	; 0x58
 8002070:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002072:	6879      	ldr	r1, [r7, #4]
 8002074:	68fa      	ldr	r2, [r7, #12]
 8002076:	4613      	mov	r3, r2
 8002078:	009b      	lsls	r3, r3, #2
 800207a:	4413      	add	r3, r2
 800207c:	00db      	lsls	r3, r3, #3
 800207e:	440b      	add	r3, r1
 8002080:	335d      	adds	r3, #93	; 0x5d
 8002082:	2206      	movs	r2, #6
 8002084:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	68fa      	ldr	r2, [r7, #12]
 800208c:	b2d2      	uxtb	r2, r2
 800208e:	4611      	mov	r1, r2
 8002090:	4618      	mov	r0, r3
 8002092:	f002 fbee 	bl	8004872 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	015a      	lsls	r2, r3, #5
 800209a:	693b      	ldr	r3, [r7, #16]
 800209c:	4413      	add	r3, r2
 800209e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020a2:	461a      	mov	r2, r3
 80020a4:	2380      	movs	r3, #128	; 0x80
 80020a6:	6093      	str	r3, [r2, #8]
}
 80020a8:	e087      	b.n	80021ba <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	015a      	lsls	r2, r3, #5
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	4413      	add	r3, r2
 80020b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	f003 0310 	and.w	r3, r3, #16
 80020bc:	2b10      	cmp	r3, #16
 80020be:	d17c      	bne.n	80021ba <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80020c0:	6879      	ldr	r1, [r7, #4]
 80020c2:	68fa      	ldr	r2, [r7, #12]
 80020c4:	4613      	mov	r3, r2
 80020c6:	009b      	lsls	r3, r3, #2
 80020c8:	4413      	add	r3, r2
 80020ca:	00db      	lsls	r3, r3, #3
 80020cc:	440b      	add	r3, r1
 80020ce:	333f      	adds	r3, #63	; 0x3f
 80020d0:	781b      	ldrb	r3, [r3, #0]
 80020d2:	2b03      	cmp	r3, #3
 80020d4:	d122      	bne.n	800211c <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80020d6:	6879      	ldr	r1, [r7, #4]
 80020d8:	68fa      	ldr	r2, [r7, #12]
 80020da:	4613      	mov	r3, r2
 80020dc:	009b      	lsls	r3, r3, #2
 80020de:	4413      	add	r3, r2
 80020e0:	00db      	lsls	r3, r3, #3
 80020e2:	440b      	add	r3, r1
 80020e4:	3358      	adds	r3, #88	; 0x58
 80020e6:	2200      	movs	r2, #0
 80020e8:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	015a      	lsls	r2, r3, #5
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	4413      	add	r3, r2
 80020f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020f6:	68db      	ldr	r3, [r3, #12]
 80020f8:	68fa      	ldr	r2, [r7, #12]
 80020fa:	0151      	lsls	r1, r2, #5
 80020fc:	693a      	ldr	r2, [r7, #16]
 80020fe:	440a      	add	r2, r1
 8002100:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002104:	f043 0302 	orr.w	r3, r3, #2
 8002108:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	68fa      	ldr	r2, [r7, #12]
 8002110:	b2d2      	uxtb	r2, r2
 8002112:	4611      	mov	r1, r2
 8002114:	4618      	mov	r0, r3
 8002116:	f002 fbac 	bl	8004872 <USB_HC_Halt>
 800211a:	e045      	b.n	80021a8 <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800211c:	6879      	ldr	r1, [r7, #4]
 800211e:	68fa      	ldr	r2, [r7, #12]
 8002120:	4613      	mov	r3, r2
 8002122:	009b      	lsls	r3, r3, #2
 8002124:	4413      	add	r3, r2
 8002126:	00db      	lsls	r3, r3, #3
 8002128:	440b      	add	r3, r1
 800212a:	333f      	adds	r3, #63	; 0x3f
 800212c:	781b      	ldrb	r3, [r3, #0]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d00a      	beq.n	8002148 <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002132:	6879      	ldr	r1, [r7, #4]
 8002134:	68fa      	ldr	r2, [r7, #12]
 8002136:	4613      	mov	r3, r2
 8002138:	009b      	lsls	r3, r3, #2
 800213a:	4413      	add	r3, r2
 800213c:	00db      	lsls	r3, r3, #3
 800213e:	440b      	add	r3, r1
 8002140:	333f      	adds	r3, #63	; 0x3f
 8002142:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002144:	2b02      	cmp	r3, #2
 8002146:	d12f      	bne.n	80021a8 <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002148:	6879      	ldr	r1, [r7, #4]
 800214a:	68fa      	ldr	r2, [r7, #12]
 800214c:	4613      	mov	r3, r2
 800214e:	009b      	lsls	r3, r3, #2
 8002150:	4413      	add	r3, r2
 8002152:	00db      	lsls	r3, r3, #3
 8002154:	440b      	add	r3, r1
 8002156:	3358      	adds	r3, #88	; 0x58
 8002158:	2200      	movs	r2, #0
 800215a:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	691b      	ldr	r3, [r3, #16]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d121      	bne.n	80021a8 <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 8002164:	6879      	ldr	r1, [r7, #4]
 8002166:	68fa      	ldr	r2, [r7, #12]
 8002168:	4613      	mov	r3, r2
 800216a:	009b      	lsls	r3, r3, #2
 800216c:	4413      	add	r3, r2
 800216e:	00db      	lsls	r3, r3, #3
 8002170:	440b      	add	r3, r1
 8002172:	335d      	adds	r3, #93	; 0x5d
 8002174:	2203      	movs	r2, #3
 8002176:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	015a      	lsls	r2, r3, #5
 800217c:	693b      	ldr	r3, [r7, #16]
 800217e:	4413      	add	r3, r2
 8002180:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002184:	68db      	ldr	r3, [r3, #12]
 8002186:	68fa      	ldr	r2, [r7, #12]
 8002188:	0151      	lsls	r1, r2, #5
 800218a:	693a      	ldr	r2, [r7, #16]
 800218c:	440a      	add	r2, r1
 800218e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002192:	f043 0302 	orr.w	r3, r3, #2
 8002196:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	68fa      	ldr	r2, [r7, #12]
 800219e:	b2d2      	uxtb	r2, r2
 80021a0:	4611      	mov	r1, r2
 80021a2:	4618      	mov	r0, r3
 80021a4:	f002 fb65 	bl	8004872 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	015a      	lsls	r2, r3, #5
 80021ac:	693b      	ldr	r3, [r7, #16]
 80021ae:	4413      	add	r3, r2
 80021b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021b4:	461a      	mov	r2, r3
 80021b6:	2310      	movs	r3, #16
 80021b8:	6093      	str	r3, [r2, #8]
}
 80021ba:	bf00      	nop
 80021bc:	3718      	adds	r7, #24
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}

080021c2 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80021c2:	b580      	push	{r7, lr}
 80021c4:	b086      	sub	sp, #24
 80021c6:	af00      	add	r7, sp, #0
 80021c8:	6078      	str	r0, [r7, #4]
 80021ca:	460b      	mov	r3, r1
 80021cc:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80021d8:	78fb      	ldrb	r3, [r7, #3]
 80021da:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	015a      	lsls	r2, r3, #5
 80021e0:	693b      	ldr	r3, [r7, #16]
 80021e2:	4413      	add	r3, r2
 80021e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021e8:	689b      	ldr	r3, [r3, #8]
 80021ea:	f003 0304 	and.w	r3, r3, #4
 80021ee:	2b04      	cmp	r3, #4
 80021f0:	d119      	bne.n	8002226 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	015a      	lsls	r2, r3, #5
 80021f6:	693b      	ldr	r3, [r7, #16]
 80021f8:	4413      	add	r3, r2
 80021fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021fe:	461a      	mov	r2, r3
 8002200:	2304      	movs	r3, #4
 8002202:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	015a      	lsls	r2, r3, #5
 8002208:	693b      	ldr	r3, [r7, #16]
 800220a:	4413      	add	r3, r2
 800220c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002210:	68db      	ldr	r3, [r3, #12]
 8002212:	68fa      	ldr	r2, [r7, #12]
 8002214:	0151      	lsls	r1, r2, #5
 8002216:	693a      	ldr	r2, [r7, #16]
 8002218:	440a      	add	r2, r1
 800221a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800221e:	f043 0302 	orr.w	r3, r3, #2
 8002222:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8002224:	e33e      	b.n	80028a4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	015a      	lsls	r2, r3, #5
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	4413      	add	r3, r2
 800222e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002232:	689b      	ldr	r3, [r3, #8]
 8002234:	f003 0320 	and.w	r3, r3, #32
 8002238:	2b20      	cmp	r3, #32
 800223a:	d141      	bne.n	80022c0 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	015a      	lsls	r2, r3, #5
 8002240:	693b      	ldr	r3, [r7, #16]
 8002242:	4413      	add	r3, r2
 8002244:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002248:	461a      	mov	r2, r3
 800224a:	2320      	movs	r3, #32
 800224c:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800224e:	6879      	ldr	r1, [r7, #4]
 8002250:	68fa      	ldr	r2, [r7, #12]
 8002252:	4613      	mov	r3, r2
 8002254:	009b      	lsls	r3, r3, #2
 8002256:	4413      	add	r3, r2
 8002258:	00db      	lsls	r3, r3, #3
 800225a:	440b      	add	r3, r1
 800225c:	333d      	adds	r3, #61	; 0x3d
 800225e:	781b      	ldrb	r3, [r3, #0]
 8002260:	2b01      	cmp	r3, #1
 8002262:	f040 831f 	bne.w	80028a4 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 8002266:	6879      	ldr	r1, [r7, #4]
 8002268:	68fa      	ldr	r2, [r7, #12]
 800226a:	4613      	mov	r3, r2
 800226c:	009b      	lsls	r3, r3, #2
 800226e:	4413      	add	r3, r2
 8002270:	00db      	lsls	r3, r3, #3
 8002272:	440b      	add	r3, r1
 8002274:	333d      	adds	r3, #61	; 0x3d
 8002276:	2200      	movs	r2, #0
 8002278:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800227a:	6879      	ldr	r1, [r7, #4]
 800227c:	68fa      	ldr	r2, [r7, #12]
 800227e:	4613      	mov	r3, r2
 8002280:	009b      	lsls	r3, r3, #2
 8002282:	4413      	add	r3, r2
 8002284:	00db      	lsls	r3, r3, #3
 8002286:	440b      	add	r3, r1
 8002288:	335c      	adds	r3, #92	; 0x5c
 800228a:	2202      	movs	r2, #2
 800228c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	015a      	lsls	r2, r3, #5
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	4413      	add	r3, r2
 8002296:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800229a:	68db      	ldr	r3, [r3, #12]
 800229c:	68fa      	ldr	r2, [r7, #12]
 800229e:	0151      	lsls	r1, r2, #5
 80022a0:	693a      	ldr	r2, [r7, #16]
 80022a2:	440a      	add	r2, r1
 80022a4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80022a8:	f043 0302 	orr.w	r3, r3, #2
 80022ac:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	68fa      	ldr	r2, [r7, #12]
 80022b4:	b2d2      	uxtb	r2, r2
 80022b6:	4611      	mov	r1, r2
 80022b8:	4618      	mov	r0, r3
 80022ba:	f002 fada 	bl	8004872 <USB_HC_Halt>
}
 80022be:	e2f1      	b.n	80028a4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	015a      	lsls	r2, r3, #5
 80022c4:	693b      	ldr	r3, [r7, #16]
 80022c6:	4413      	add	r3, r2
 80022c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022cc:	689b      	ldr	r3, [r3, #8]
 80022ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022d2:	2b40      	cmp	r3, #64	; 0x40
 80022d4:	d13f      	bne.n	8002356 <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 80022d6:	6879      	ldr	r1, [r7, #4]
 80022d8:	68fa      	ldr	r2, [r7, #12]
 80022da:	4613      	mov	r3, r2
 80022dc:	009b      	lsls	r3, r3, #2
 80022de:	4413      	add	r3, r2
 80022e0:	00db      	lsls	r3, r3, #3
 80022e2:	440b      	add	r3, r1
 80022e4:	335d      	adds	r3, #93	; 0x5d
 80022e6:	2204      	movs	r2, #4
 80022e8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80022ea:	6879      	ldr	r1, [r7, #4]
 80022ec:	68fa      	ldr	r2, [r7, #12]
 80022ee:	4613      	mov	r3, r2
 80022f0:	009b      	lsls	r3, r3, #2
 80022f2:	4413      	add	r3, r2
 80022f4:	00db      	lsls	r3, r3, #3
 80022f6:	440b      	add	r3, r1
 80022f8:	333d      	adds	r3, #61	; 0x3d
 80022fa:	2201      	movs	r2, #1
 80022fc:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80022fe:	6879      	ldr	r1, [r7, #4]
 8002300:	68fa      	ldr	r2, [r7, #12]
 8002302:	4613      	mov	r3, r2
 8002304:	009b      	lsls	r3, r3, #2
 8002306:	4413      	add	r3, r2
 8002308:	00db      	lsls	r3, r3, #3
 800230a:	440b      	add	r3, r1
 800230c:	3358      	adds	r3, #88	; 0x58
 800230e:	2200      	movs	r2, #0
 8002310:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	015a      	lsls	r2, r3, #5
 8002316:	693b      	ldr	r3, [r7, #16]
 8002318:	4413      	add	r3, r2
 800231a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800231e:	68db      	ldr	r3, [r3, #12]
 8002320:	68fa      	ldr	r2, [r7, #12]
 8002322:	0151      	lsls	r1, r2, #5
 8002324:	693a      	ldr	r2, [r7, #16]
 8002326:	440a      	add	r2, r1
 8002328:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800232c:	f043 0302 	orr.w	r3, r3, #2
 8002330:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	68fa      	ldr	r2, [r7, #12]
 8002338:	b2d2      	uxtb	r2, r2
 800233a:	4611      	mov	r1, r2
 800233c:	4618      	mov	r0, r3
 800233e:	f002 fa98 	bl	8004872 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	015a      	lsls	r2, r3, #5
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	4413      	add	r3, r2
 800234a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800234e:	461a      	mov	r2, r3
 8002350:	2340      	movs	r3, #64	; 0x40
 8002352:	6093      	str	r3, [r2, #8]
}
 8002354:	e2a6      	b.n	80028a4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	015a      	lsls	r2, r3, #5
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	4413      	add	r3, r2
 800235e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002362:	689b      	ldr	r3, [r3, #8]
 8002364:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002368:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800236c:	d122      	bne.n	80023b4 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	015a      	lsls	r2, r3, #5
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	4413      	add	r3, r2
 8002376:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800237a:	68db      	ldr	r3, [r3, #12]
 800237c:	68fa      	ldr	r2, [r7, #12]
 800237e:	0151      	lsls	r1, r2, #5
 8002380:	693a      	ldr	r2, [r7, #16]
 8002382:	440a      	add	r2, r1
 8002384:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002388:	f043 0302 	orr.w	r3, r3, #2
 800238c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	68fa      	ldr	r2, [r7, #12]
 8002394:	b2d2      	uxtb	r2, r2
 8002396:	4611      	mov	r1, r2
 8002398:	4618      	mov	r0, r3
 800239a:	f002 fa6a 	bl	8004872 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	015a      	lsls	r2, r3, #5
 80023a2:	693b      	ldr	r3, [r7, #16]
 80023a4:	4413      	add	r3, r2
 80023a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023aa:	461a      	mov	r2, r3
 80023ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80023b0:	6093      	str	r3, [r2, #8]
}
 80023b2:	e277      	b.n	80028a4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	015a      	lsls	r2, r3, #5
 80023b8:	693b      	ldr	r3, [r7, #16]
 80023ba:	4413      	add	r3, r2
 80023bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023c0:	689b      	ldr	r3, [r3, #8]
 80023c2:	f003 0301 	and.w	r3, r3, #1
 80023c6:	2b01      	cmp	r3, #1
 80023c8:	d135      	bne.n	8002436 <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80023ca:	6879      	ldr	r1, [r7, #4]
 80023cc:	68fa      	ldr	r2, [r7, #12]
 80023ce:	4613      	mov	r3, r2
 80023d0:	009b      	lsls	r3, r3, #2
 80023d2:	4413      	add	r3, r2
 80023d4:	00db      	lsls	r3, r3, #3
 80023d6:	440b      	add	r3, r1
 80023d8:	3358      	adds	r3, #88	; 0x58
 80023da:	2200      	movs	r2, #0
 80023dc:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	015a      	lsls	r2, r3, #5
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	4413      	add	r3, r2
 80023e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023ea:	68db      	ldr	r3, [r3, #12]
 80023ec:	68fa      	ldr	r2, [r7, #12]
 80023ee:	0151      	lsls	r1, r2, #5
 80023f0:	693a      	ldr	r2, [r7, #16]
 80023f2:	440a      	add	r2, r1
 80023f4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80023f8:	f043 0302 	orr.w	r3, r3, #2
 80023fc:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	68fa      	ldr	r2, [r7, #12]
 8002404:	b2d2      	uxtb	r2, r2
 8002406:	4611      	mov	r1, r2
 8002408:	4618      	mov	r0, r3
 800240a:	f002 fa32 	bl	8004872 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	015a      	lsls	r2, r3, #5
 8002412:	693b      	ldr	r3, [r7, #16]
 8002414:	4413      	add	r3, r2
 8002416:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800241a:	461a      	mov	r2, r3
 800241c:	2301      	movs	r3, #1
 800241e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002420:	6879      	ldr	r1, [r7, #4]
 8002422:	68fa      	ldr	r2, [r7, #12]
 8002424:	4613      	mov	r3, r2
 8002426:	009b      	lsls	r3, r3, #2
 8002428:	4413      	add	r3, r2
 800242a:	00db      	lsls	r3, r3, #3
 800242c:	440b      	add	r3, r1
 800242e:	335d      	adds	r3, #93	; 0x5d
 8002430:	2201      	movs	r2, #1
 8002432:	701a      	strb	r2, [r3, #0]
}
 8002434:	e236      	b.n	80028a4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	015a      	lsls	r2, r3, #5
 800243a:	693b      	ldr	r3, [r7, #16]
 800243c:	4413      	add	r3, r2
 800243e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002442:	689b      	ldr	r3, [r3, #8]
 8002444:	f003 0308 	and.w	r3, r3, #8
 8002448:	2b08      	cmp	r3, #8
 800244a:	d12b      	bne.n	80024a4 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	015a      	lsls	r2, r3, #5
 8002450:	693b      	ldr	r3, [r7, #16]
 8002452:	4413      	add	r3, r2
 8002454:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002458:	461a      	mov	r2, r3
 800245a:	2308      	movs	r3, #8
 800245c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	015a      	lsls	r2, r3, #5
 8002462:	693b      	ldr	r3, [r7, #16]
 8002464:	4413      	add	r3, r2
 8002466:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800246a:	68db      	ldr	r3, [r3, #12]
 800246c:	68fa      	ldr	r2, [r7, #12]
 800246e:	0151      	lsls	r1, r2, #5
 8002470:	693a      	ldr	r2, [r7, #16]
 8002472:	440a      	add	r2, r1
 8002474:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002478:	f043 0302 	orr.w	r3, r3, #2
 800247c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	68fa      	ldr	r2, [r7, #12]
 8002484:	b2d2      	uxtb	r2, r2
 8002486:	4611      	mov	r1, r2
 8002488:	4618      	mov	r0, r3
 800248a:	f002 f9f2 	bl	8004872 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 800248e:	6879      	ldr	r1, [r7, #4]
 8002490:	68fa      	ldr	r2, [r7, #12]
 8002492:	4613      	mov	r3, r2
 8002494:	009b      	lsls	r3, r3, #2
 8002496:	4413      	add	r3, r2
 8002498:	00db      	lsls	r3, r3, #3
 800249a:	440b      	add	r3, r1
 800249c:	335d      	adds	r3, #93	; 0x5d
 800249e:	2205      	movs	r2, #5
 80024a0:	701a      	strb	r2, [r3, #0]
}
 80024a2:	e1ff      	b.n	80028a4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	015a      	lsls	r2, r3, #5
 80024a8:	693b      	ldr	r3, [r7, #16]
 80024aa:	4413      	add	r3, r2
 80024ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024b0:	689b      	ldr	r3, [r3, #8]
 80024b2:	f003 0310 	and.w	r3, r3, #16
 80024b6:	2b10      	cmp	r3, #16
 80024b8:	d155      	bne.n	8002566 <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80024ba:	6879      	ldr	r1, [r7, #4]
 80024bc:	68fa      	ldr	r2, [r7, #12]
 80024be:	4613      	mov	r3, r2
 80024c0:	009b      	lsls	r3, r3, #2
 80024c2:	4413      	add	r3, r2
 80024c4:	00db      	lsls	r3, r3, #3
 80024c6:	440b      	add	r3, r1
 80024c8:	3358      	adds	r3, #88	; 0x58
 80024ca:	2200      	movs	r2, #0
 80024cc:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80024ce:	6879      	ldr	r1, [r7, #4]
 80024d0:	68fa      	ldr	r2, [r7, #12]
 80024d2:	4613      	mov	r3, r2
 80024d4:	009b      	lsls	r3, r3, #2
 80024d6:	4413      	add	r3, r2
 80024d8:	00db      	lsls	r3, r3, #3
 80024da:	440b      	add	r3, r1
 80024dc:	335d      	adds	r3, #93	; 0x5d
 80024de:	2203      	movs	r2, #3
 80024e0:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80024e2:	6879      	ldr	r1, [r7, #4]
 80024e4:	68fa      	ldr	r2, [r7, #12]
 80024e6:	4613      	mov	r3, r2
 80024e8:	009b      	lsls	r3, r3, #2
 80024ea:	4413      	add	r3, r2
 80024ec:	00db      	lsls	r3, r3, #3
 80024ee:	440b      	add	r3, r1
 80024f0:	333d      	adds	r3, #61	; 0x3d
 80024f2:	781b      	ldrb	r3, [r3, #0]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d114      	bne.n	8002522 <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 80024f8:	6879      	ldr	r1, [r7, #4]
 80024fa:	68fa      	ldr	r2, [r7, #12]
 80024fc:	4613      	mov	r3, r2
 80024fe:	009b      	lsls	r3, r3, #2
 8002500:	4413      	add	r3, r2
 8002502:	00db      	lsls	r3, r3, #3
 8002504:	440b      	add	r3, r1
 8002506:	333c      	adds	r3, #60	; 0x3c
 8002508:	781b      	ldrb	r3, [r3, #0]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d109      	bne.n	8002522 <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 800250e:	6879      	ldr	r1, [r7, #4]
 8002510:	68fa      	ldr	r2, [r7, #12]
 8002512:	4613      	mov	r3, r2
 8002514:	009b      	lsls	r3, r3, #2
 8002516:	4413      	add	r3, r2
 8002518:	00db      	lsls	r3, r3, #3
 800251a:	440b      	add	r3, r1
 800251c:	333d      	adds	r3, #61	; 0x3d
 800251e:	2201      	movs	r2, #1
 8002520:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	015a      	lsls	r2, r3, #5
 8002526:	693b      	ldr	r3, [r7, #16]
 8002528:	4413      	add	r3, r2
 800252a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800252e:	68db      	ldr	r3, [r3, #12]
 8002530:	68fa      	ldr	r2, [r7, #12]
 8002532:	0151      	lsls	r1, r2, #5
 8002534:	693a      	ldr	r2, [r7, #16]
 8002536:	440a      	add	r2, r1
 8002538:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800253c:	f043 0302 	orr.w	r3, r3, #2
 8002540:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	68fa      	ldr	r2, [r7, #12]
 8002548:	b2d2      	uxtb	r2, r2
 800254a:	4611      	mov	r1, r2
 800254c:	4618      	mov	r0, r3
 800254e:	f002 f990 	bl	8004872 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	015a      	lsls	r2, r3, #5
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	4413      	add	r3, r2
 800255a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800255e:	461a      	mov	r2, r3
 8002560:	2310      	movs	r3, #16
 8002562:	6093      	str	r3, [r2, #8]
}
 8002564:	e19e      	b.n	80028a4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	015a      	lsls	r2, r3, #5
 800256a:	693b      	ldr	r3, [r7, #16]
 800256c:	4413      	add	r3, r2
 800256e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002572:	689b      	ldr	r3, [r3, #8]
 8002574:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002578:	2b80      	cmp	r3, #128	; 0x80
 800257a:	d12b      	bne.n	80025d4 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	015a      	lsls	r2, r3, #5
 8002580:	693b      	ldr	r3, [r7, #16]
 8002582:	4413      	add	r3, r2
 8002584:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002588:	68db      	ldr	r3, [r3, #12]
 800258a:	68fa      	ldr	r2, [r7, #12]
 800258c:	0151      	lsls	r1, r2, #5
 800258e:	693a      	ldr	r2, [r7, #16]
 8002590:	440a      	add	r2, r1
 8002592:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002596:	f043 0302 	orr.w	r3, r3, #2
 800259a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	68fa      	ldr	r2, [r7, #12]
 80025a2:	b2d2      	uxtb	r2, r2
 80025a4:	4611      	mov	r1, r2
 80025a6:	4618      	mov	r0, r3
 80025a8:	f002 f963 	bl	8004872 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 80025ac:	6879      	ldr	r1, [r7, #4]
 80025ae:	68fa      	ldr	r2, [r7, #12]
 80025b0:	4613      	mov	r3, r2
 80025b2:	009b      	lsls	r3, r3, #2
 80025b4:	4413      	add	r3, r2
 80025b6:	00db      	lsls	r3, r3, #3
 80025b8:	440b      	add	r3, r1
 80025ba:	335d      	adds	r3, #93	; 0x5d
 80025bc:	2206      	movs	r2, #6
 80025be:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	015a      	lsls	r2, r3, #5
 80025c4:	693b      	ldr	r3, [r7, #16]
 80025c6:	4413      	add	r3, r2
 80025c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025cc:	461a      	mov	r2, r3
 80025ce:	2380      	movs	r3, #128	; 0x80
 80025d0:	6093      	str	r3, [r2, #8]
}
 80025d2:	e167      	b.n	80028a4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	015a      	lsls	r2, r3, #5
 80025d8:	693b      	ldr	r3, [r7, #16]
 80025da:	4413      	add	r3, r2
 80025dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025e0:	689b      	ldr	r3, [r3, #8]
 80025e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025ea:	d135      	bne.n	8002658 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	015a      	lsls	r2, r3, #5
 80025f0:	693b      	ldr	r3, [r7, #16]
 80025f2:	4413      	add	r3, r2
 80025f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025f8:	68db      	ldr	r3, [r3, #12]
 80025fa:	68fa      	ldr	r2, [r7, #12]
 80025fc:	0151      	lsls	r1, r2, #5
 80025fe:	693a      	ldr	r2, [r7, #16]
 8002600:	440a      	add	r2, r1
 8002602:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002606:	f043 0302 	orr.w	r3, r3, #2
 800260a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	68fa      	ldr	r2, [r7, #12]
 8002612:	b2d2      	uxtb	r2, r2
 8002614:	4611      	mov	r1, r2
 8002616:	4618      	mov	r0, r3
 8002618:	f002 f92b 	bl	8004872 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	015a      	lsls	r2, r3, #5
 8002620:	693b      	ldr	r3, [r7, #16]
 8002622:	4413      	add	r3, r2
 8002624:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002628:	461a      	mov	r2, r3
 800262a:	2310      	movs	r3, #16
 800262c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	015a      	lsls	r2, r3, #5
 8002632:	693b      	ldr	r3, [r7, #16]
 8002634:	4413      	add	r3, r2
 8002636:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800263a:	461a      	mov	r2, r3
 800263c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002640:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002642:	6879      	ldr	r1, [r7, #4]
 8002644:	68fa      	ldr	r2, [r7, #12]
 8002646:	4613      	mov	r3, r2
 8002648:	009b      	lsls	r3, r3, #2
 800264a:	4413      	add	r3, r2
 800264c:	00db      	lsls	r3, r3, #3
 800264e:	440b      	add	r3, r1
 8002650:	335d      	adds	r3, #93	; 0x5d
 8002652:	2208      	movs	r2, #8
 8002654:	701a      	strb	r2, [r3, #0]
}
 8002656:	e125      	b.n	80028a4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	015a      	lsls	r2, r3, #5
 800265c:	693b      	ldr	r3, [r7, #16]
 800265e:	4413      	add	r3, r2
 8002660:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	f003 0302 	and.w	r3, r3, #2
 800266a:	2b02      	cmp	r3, #2
 800266c:	f040 811a 	bne.w	80028a4 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	015a      	lsls	r2, r3, #5
 8002674:	693b      	ldr	r3, [r7, #16]
 8002676:	4413      	add	r3, r2
 8002678:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800267c:	68db      	ldr	r3, [r3, #12]
 800267e:	68fa      	ldr	r2, [r7, #12]
 8002680:	0151      	lsls	r1, r2, #5
 8002682:	693a      	ldr	r2, [r7, #16]
 8002684:	440a      	add	r2, r1
 8002686:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800268a:	f023 0302 	bic.w	r3, r3, #2
 800268e:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002690:	6879      	ldr	r1, [r7, #4]
 8002692:	68fa      	ldr	r2, [r7, #12]
 8002694:	4613      	mov	r3, r2
 8002696:	009b      	lsls	r3, r3, #2
 8002698:	4413      	add	r3, r2
 800269a:	00db      	lsls	r3, r3, #3
 800269c:	440b      	add	r3, r1
 800269e:	335d      	adds	r3, #93	; 0x5d
 80026a0:	781b      	ldrb	r3, [r3, #0]
 80026a2:	2b01      	cmp	r3, #1
 80026a4:	d137      	bne.n	8002716 <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80026a6:	6879      	ldr	r1, [r7, #4]
 80026a8:	68fa      	ldr	r2, [r7, #12]
 80026aa:	4613      	mov	r3, r2
 80026ac:	009b      	lsls	r3, r3, #2
 80026ae:	4413      	add	r3, r2
 80026b0:	00db      	lsls	r3, r3, #3
 80026b2:	440b      	add	r3, r1
 80026b4:	335c      	adds	r3, #92	; 0x5c
 80026b6:	2201      	movs	r2, #1
 80026b8:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80026ba:	6879      	ldr	r1, [r7, #4]
 80026bc:	68fa      	ldr	r2, [r7, #12]
 80026be:	4613      	mov	r3, r2
 80026c0:	009b      	lsls	r3, r3, #2
 80026c2:	4413      	add	r3, r2
 80026c4:	00db      	lsls	r3, r3, #3
 80026c6:	440b      	add	r3, r1
 80026c8:	333f      	adds	r3, #63	; 0x3f
 80026ca:	781b      	ldrb	r3, [r3, #0]
 80026cc:	2b02      	cmp	r3, #2
 80026ce:	d00b      	beq.n	80026e8 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80026d0:	6879      	ldr	r1, [r7, #4]
 80026d2:	68fa      	ldr	r2, [r7, #12]
 80026d4:	4613      	mov	r3, r2
 80026d6:	009b      	lsls	r3, r3, #2
 80026d8:	4413      	add	r3, r2
 80026da:	00db      	lsls	r3, r3, #3
 80026dc:	440b      	add	r3, r1
 80026de:	333f      	adds	r3, #63	; 0x3f
 80026e0:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80026e2:	2b03      	cmp	r3, #3
 80026e4:	f040 80c5 	bne.w	8002872 <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 80026e8:	6879      	ldr	r1, [r7, #4]
 80026ea:	68fa      	ldr	r2, [r7, #12]
 80026ec:	4613      	mov	r3, r2
 80026ee:	009b      	lsls	r3, r3, #2
 80026f0:	4413      	add	r3, r2
 80026f2:	00db      	lsls	r3, r3, #3
 80026f4:	440b      	add	r3, r1
 80026f6:	3351      	adds	r3, #81	; 0x51
 80026f8:	781b      	ldrb	r3, [r3, #0]
 80026fa:	f083 0301 	eor.w	r3, r3, #1
 80026fe:	b2d8      	uxtb	r0, r3
 8002700:	6879      	ldr	r1, [r7, #4]
 8002702:	68fa      	ldr	r2, [r7, #12]
 8002704:	4613      	mov	r3, r2
 8002706:	009b      	lsls	r3, r3, #2
 8002708:	4413      	add	r3, r2
 800270a:	00db      	lsls	r3, r3, #3
 800270c:	440b      	add	r3, r1
 800270e:	3351      	adds	r3, #81	; 0x51
 8002710:	4602      	mov	r2, r0
 8002712:	701a      	strb	r2, [r3, #0]
 8002714:	e0ad      	b.n	8002872 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002716:	6879      	ldr	r1, [r7, #4]
 8002718:	68fa      	ldr	r2, [r7, #12]
 800271a:	4613      	mov	r3, r2
 800271c:	009b      	lsls	r3, r3, #2
 800271e:	4413      	add	r3, r2
 8002720:	00db      	lsls	r3, r3, #3
 8002722:	440b      	add	r3, r1
 8002724:	335d      	adds	r3, #93	; 0x5d
 8002726:	781b      	ldrb	r3, [r3, #0]
 8002728:	2b03      	cmp	r3, #3
 800272a:	d10a      	bne.n	8002742 <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800272c:	6879      	ldr	r1, [r7, #4]
 800272e:	68fa      	ldr	r2, [r7, #12]
 8002730:	4613      	mov	r3, r2
 8002732:	009b      	lsls	r3, r3, #2
 8002734:	4413      	add	r3, r2
 8002736:	00db      	lsls	r3, r3, #3
 8002738:	440b      	add	r3, r1
 800273a:	335c      	adds	r3, #92	; 0x5c
 800273c:	2202      	movs	r2, #2
 800273e:	701a      	strb	r2, [r3, #0]
 8002740:	e097      	b.n	8002872 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002742:	6879      	ldr	r1, [r7, #4]
 8002744:	68fa      	ldr	r2, [r7, #12]
 8002746:	4613      	mov	r3, r2
 8002748:	009b      	lsls	r3, r3, #2
 800274a:	4413      	add	r3, r2
 800274c:	00db      	lsls	r3, r3, #3
 800274e:	440b      	add	r3, r1
 8002750:	335d      	adds	r3, #93	; 0x5d
 8002752:	781b      	ldrb	r3, [r3, #0]
 8002754:	2b04      	cmp	r3, #4
 8002756:	d10a      	bne.n	800276e <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002758:	6879      	ldr	r1, [r7, #4]
 800275a:	68fa      	ldr	r2, [r7, #12]
 800275c:	4613      	mov	r3, r2
 800275e:	009b      	lsls	r3, r3, #2
 8002760:	4413      	add	r3, r2
 8002762:	00db      	lsls	r3, r3, #3
 8002764:	440b      	add	r3, r1
 8002766:	335c      	adds	r3, #92	; 0x5c
 8002768:	2202      	movs	r2, #2
 800276a:	701a      	strb	r2, [r3, #0]
 800276c:	e081      	b.n	8002872 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800276e:	6879      	ldr	r1, [r7, #4]
 8002770:	68fa      	ldr	r2, [r7, #12]
 8002772:	4613      	mov	r3, r2
 8002774:	009b      	lsls	r3, r3, #2
 8002776:	4413      	add	r3, r2
 8002778:	00db      	lsls	r3, r3, #3
 800277a:	440b      	add	r3, r1
 800277c:	335d      	adds	r3, #93	; 0x5d
 800277e:	781b      	ldrb	r3, [r3, #0]
 8002780:	2b05      	cmp	r3, #5
 8002782:	d10a      	bne.n	800279a <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002784:	6879      	ldr	r1, [r7, #4]
 8002786:	68fa      	ldr	r2, [r7, #12]
 8002788:	4613      	mov	r3, r2
 800278a:	009b      	lsls	r3, r3, #2
 800278c:	4413      	add	r3, r2
 800278e:	00db      	lsls	r3, r3, #3
 8002790:	440b      	add	r3, r1
 8002792:	335c      	adds	r3, #92	; 0x5c
 8002794:	2205      	movs	r2, #5
 8002796:	701a      	strb	r2, [r3, #0]
 8002798:	e06b      	b.n	8002872 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800279a:	6879      	ldr	r1, [r7, #4]
 800279c:	68fa      	ldr	r2, [r7, #12]
 800279e:	4613      	mov	r3, r2
 80027a0:	009b      	lsls	r3, r3, #2
 80027a2:	4413      	add	r3, r2
 80027a4:	00db      	lsls	r3, r3, #3
 80027a6:	440b      	add	r3, r1
 80027a8:	335d      	adds	r3, #93	; 0x5d
 80027aa:	781b      	ldrb	r3, [r3, #0]
 80027ac:	2b06      	cmp	r3, #6
 80027ae:	d00a      	beq.n	80027c6 <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80027b0:	6879      	ldr	r1, [r7, #4]
 80027b2:	68fa      	ldr	r2, [r7, #12]
 80027b4:	4613      	mov	r3, r2
 80027b6:	009b      	lsls	r3, r3, #2
 80027b8:	4413      	add	r3, r2
 80027ba:	00db      	lsls	r3, r3, #3
 80027bc:	440b      	add	r3, r1
 80027be:	335d      	adds	r3, #93	; 0x5d
 80027c0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80027c2:	2b08      	cmp	r3, #8
 80027c4:	d155      	bne.n	8002872 <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 80027c6:	6879      	ldr	r1, [r7, #4]
 80027c8:	68fa      	ldr	r2, [r7, #12]
 80027ca:	4613      	mov	r3, r2
 80027cc:	009b      	lsls	r3, r3, #2
 80027ce:	4413      	add	r3, r2
 80027d0:	00db      	lsls	r3, r3, #3
 80027d2:	440b      	add	r3, r1
 80027d4:	3358      	adds	r3, #88	; 0x58
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	1c59      	adds	r1, r3, #1
 80027da:	6878      	ldr	r0, [r7, #4]
 80027dc:	68fa      	ldr	r2, [r7, #12]
 80027de:	4613      	mov	r3, r2
 80027e0:	009b      	lsls	r3, r3, #2
 80027e2:	4413      	add	r3, r2
 80027e4:	00db      	lsls	r3, r3, #3
 80027e6:	4403      	add	r3, r0
 80027e8:	3358      	adds	r3, #88	; 0x58
 80027ea:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 80027ec:	6879      	ldr	r1, [r7, #4]
 80027ee:	68fa      	ldr	r2, [r7, #12]
 80027f0:	4613      	mov	r3, r2
 80027f2:	009b      	lsls	r3, r3, #2
 80027f4:	4413      	add	r3, r2
 80027f6:	00db      	lsls	r3, r3, #3
 80027f8:	440b      	add	r3, r1
 80027fa:	3358      	adds	r3, #88	; 0x58
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	2b03      	cmp	r3, #3
 8002800:	d914      	bls.n	800282c <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002802:	6879      	ldr	r1, [r7, #4]
 8002804:	68fa      	ldr	r2, [r7, #12]
 8002806:	4613      	mov	r3, r2
 8002808:	009b      	lsls	r3, r3, #2
 800280a:	4413      	add	r3, r2
 800280c:	00db      	lsls	r3, r3, #3
 800280e:	440b      	add	r3, r1
 8002810:	3358      	adds	r3, #88	; 0x58
 8002812:	2200      	movs	r2, #0
 8002814:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002816:	6879      	ldr	r1, [r7, #4]
 8002818:	68fa      	ldr	r2, [r7, #12]
 800281a:	4613      	mov	r3, r2
 800281c:	009b      	lsls	r3, r3, #2
 800281e:	4413      	add	r3, r2
 8002820:	00db      	lsls	r3, r3, #3
 8002822:	440b      	add	r3, r1
 8002824:	335c      	adds	r3, #92	; 0x5c
 8002826:	2204      	movs	r2, #4
 8002828:	701a      	strb	r2, [r3, #0]
 800282a:	e009      	b.n	8002840 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800282c:	6879      	ldr	r1, [r7, #4]
 800282e:	68fa      	ldr	r2, [r7, #12]
 8002830:	4613      	mov	r3, r2
 8002832:	009b      	lsls	r3, r3, #2
 8002834:	4413      	add	r3, r2
 8002836:	00db      	lsls	r3, r3, #3
 8002838:	440b      	add	r3, r1
 800283a:	335c      	adds	r3, #92	; 0x5c
 800283c:	2202      	movs	r2, #2
 800283e:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	015a      	lsls	r2, r3, #5
 8002844:	693b      	ldr	r3, [r7, #16]
 8002846:	4413      	add	r3, r2
 8002848:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002850:	68bb      	ldr	r3, [r7, #8]
 8002852:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002856:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800285e:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	015a      	lsls	r2, r3, #5
 8002864:	693b      	ldr	r3, [r7, #16]
 8002866:	4413      	add	r3, r2
 8002868:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800286c:	461a      	mov	r2, r3
 800286e:	68bb      	ldr	r3, [r7, #8]
 8002870:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	015a      	lsls	r2, r3, #5
 8002876:	693b      	ldr	r3, [r7, #16]
 8002878:	4413      	add	r3, r2
 800287a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800287e:	461a      	mov	r2, r3
 8002880:	2302      	movs	r3, #2
 8002882:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	b2d8      	uxtb	r0, r3
 8002888:	6879      	ldr	r1, [r7, #4]
 800288a:	68fa      	ldr	r2, [r7, #12]
 800288c:	4613      	mov	r3, r2
 800288e:	009b      	lsls	r3, r3, #2
 8002890:	4413      	add	r3, r2
 8002892:	00db      	lsls	r3, r3, #3
 8002894:	440b      	add	r3, r1
 8002896:	335c      	adds	r3, #92	; 0x5c
 8002898:	781b      	ldrb	r3, [r3, #0]
 800289a:	461a      	mov	r2, r3
 800289c:	4601      	mov	r1, r0
 800289e:	6878      	ldr	r0, [r7, #4]
 80028a0:	f004 fce8 	bl	8007274 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80028a4:	bf00      	nop
 80028a6:	3718      	adds	r7, #24
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bd80      	pop	{r7, pc}

080028ac <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b08a      	sub	sp, #40	; 0x28
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80028ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028bc:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	6a1b      	ldr	r3, [r3, #32]
 80028c4:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 80028c6:	69fb      	ldr	r3, [r7, #28]
 80028c8:	f003 030f 	and.w	r3, r3, #15
 80028cc:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80028ce:	69fb      	ldr	r3, [r7, #28]
 80028d0:	0c5b      	lsrs	r3, r3, #17
 80028d2:	f003 030f 	and.w	r3, r3, #15
 80028d6:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80028d8:	69fb      	ldr	r3, [r7, #28]
 80028da:	091b      	lsrs	r3, r3, #4
 80028dc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80028e0:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	2b02      	cmp	r3, #2
 80028e6:	d004      	beq.n	80028f2 <HCD_RXQLVL_IRQHandler+0x46>
 80028e8:	697b      	ldr	r3, [r7, #20]
 80028ea:	2b05      	cmp	r3, #5
 80028ec:	f000 8082 	beq.w	80029f4 <HCD_RXQLVL_IRQHandler+0x148>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80028f0:	e083      	b.n	80029fa <HCD_RXQLVL_IRQHandler+0x14e>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80028f2:	693b      	ldr	r3, [r7, #16]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d07f      	beq.n	80029f8 <HCD_RXQLVL_IRQHandler+0x14c>
 80028f8:	6879      	ldr	r1, [r7, #4]
 80028fa:	69ba      	ldr	r2, [r7, #24]
 80028fc:	4613      	mov	r3, r2
 80028fe:	009b      	lsls	r3, r3, #2
 8002900:	4413      	add	r3, r2
 8002902:	00db      	lsls	r3, r3, #3
 8002904:	440b      	add	r3, r1
 8002906:	3344      	adds	r3, #68	; 0x44
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d074      	beq.n	80029f8 <HCD_RXQLVL_IRQHandler+0x14c>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6818      	ldr	r0, [r3, #0]
 8002912:	6879      	ldr	r1, [r7, #4]
 8002914:	69ba      	ldr	r2, [r7, #24]
 8002916:	4613      	mov	r3, r2
 8002918:	009b      	lsls	r3, r3, #2
 800291a:	4413      	add	r3, r2
 800291c:	00db      	lsls	r3, r3, #3
 800291e:	440b      	add	r3, r1
 8002920:	3344      	adds	r3, #68	; 0x44
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	693a      	ldr	r2, [r7, #16]
 8002926:	b292      	uxth	r2, r2
 8002928:	4619      	mov	r1, r3
 800292a:	f001 fb44 	bl	8003fb6 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 800292e:	6879      	ldr	r1, [r7, #4]
 8002930:	69ba      	ldr	r2, [r7, #24]
 8002932:	4613      	mov	r3, r2
 8002934:	009b      	lsls	r3, r3, #2
 8002936:	4413      	add	r3, r2
 8002938:	00db      	lsls	r3, r3, #3
 800293a:	440b      	add	r3, r1
 800293c:	3344      	adds	r3, #68	; 0x44
 800293e:	681a      	ldr	r2, [r3, #0]
 8002940:	693b      	ldr	r3, [r7, #16]
 8002942:	18d1      	adds	r1, r2, r3
 8002944:	6878      	ldr	r0, [r7, #4]
 8002946:	69ba      	ldr	r2, [r7, #24]
 8002948:	4613      	mov	r3, r2
 800294a:	009b      	lsls	r3, r3, #2
 800294c:	4413      	add	r3, r2
 800294e:	00db      	lsls	r3, r3, #3
 8002950:	4403      	add	r3, r0
 8002952:	3344      	adds	r3, #68	; 0x44
 8002954:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8002956:	6879      	ldr	r1, [r7, #4]
 8002958:	69ba      	ldr	r2, [r7, #24]
 800295a:	4613      	mov	r3, r2
 800295c:	009b      	lsls	r3, r3, #2
 800295e:	4413      	add	r3, r2
 8002960:	00db      	lsls	r3, r3, #3
 8002962:	440b      	add	r3, r1
 8002964:	334c      	adds	r3, #76	; 0x4c
 8002966:	681a      	ldr	r2, [r3, #0]
 8002968:	693b      	ldr	r3, [r7, #16]
 800296a:	18d1      	adds	r1, r2, r3
 800296c:	6878      	ldr	r0, [r7, #4]
 800296e:	69ba      	ldr	r2, [r7, #24]
 8002970:	4613      	mov	r3, r2
 8002972:	009b      	lsls	r3, r3, #2
 8002974:	4413      	add	r3, r2
 8002976:	00db      	lsls	r3, r3, #3
 8002978:	4403      	add	r3, r0
 800297a:	334c      	adds	r3, #76	; 0x4c
 800297c:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 800297e:	69bb      	ldr	r3, [r7, #24]
 8002980:	015a      	lsls	r2, r3, #5
 8002982:	6a3b      	ldr	r3, [r7, #32]
 8002984:	4413      	add	r3, r2
 8002986:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800298a:	691a      	ldr	r2, [r3, #16]
 800298c:	4b1d      	ldr	r3, [pc, #116]	; (8002a04 <HCD_RXQLVL_IRQHandler+0x158>)
 800298e:	4013      	ands	r3, r2
 8002990:	2b00      	cmp	r3, #0
 8002992:	d031      	beq.n	80029f8 <HCD_RXQLVL_IRQHandler+0x14c>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002994:	69bb      	ldr	r3, [r7, #24]
 8002996:	015a      	lsls	r2, r3, #5
 8002998:	6a3b      	ldr	r3, [r7, #32]
 800299a:	4413      	add	r3, r2
 800299c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80029aa:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80029b2:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 80029b4:	69bb      	ldr	r3, [r7, #24]
 80029b6:	015a      	lsls	r2, r3, #5
 80029b8:	6a3b      	ldr	r3, [r7, #32]
 80029ba:	4413      	add	r3, r2
 80029bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029c0:	461a      	mov	r2, r3
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 80029c6:	6879      	ldr	r1, [r7, #4]
 80029c8:	69ba      	ldr	r2, [r7, #24]
 80029ca:	4613      	mov	r3, r2
 80029cc:	009b      	lsls	r3, r3, #2
 80029ce:	4413      	add	r3, r2
 80029d0:	00db      	lsls	r3, r3, #3
 80029d2:	440b      	add	r3, r1
 80029d4:	3350      	adds	r3, #80	; 0x50
 80029d6:	781b      	ldrb	r3, [r3, #0]
 80029d8:	f083 0301 	eor.w	r3, r3, #1
 80029dc:	b2d8      	uxtb	r0, r3
 80029de:	6879      	ldr	r1, [r7, #4]
 80029e0:	69ba      	ldr	r2, [r7, #24]
 80029e2:	4613      	mov	r3, r2
 80029e4:	009b      	lsls	r3, r3, #2
 80029e6:	4413      	add	r3, r2
 80029e8:	00db      	lsls	r3, r3, #3
 80029ea:	440b      	add	r3, r1
 80029ec:	3350      	adds	r3, #80	; 0x50
 80029ee:	4602      	mov	r2, r0
 80029f0:	701a      	strb	r2, [r3, #0]
      break;
 80029f2:	e001      	b.n	80029f8 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 80029f4:	bf00      	nop
 80029f6:	e000      	b.n	80029fa <HCD_RXQLVL_IRQHandler+0x14e>
      break;
 80029f8:	bf00      	nop
  }
}
 80029fa:	bf00      	nop
 80029fc:	3728      	adds	r7, #40	; 0x28
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}
 8002a02:	bf00      	nop
 8002a04:	1ff80000 	.word	0x1ff80000

08002a08 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b086      	sub	sp, #24
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002a16:	697b      	ldr	r3, [r7, #20]
 8002a18:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002a1a:	693b      	ldr	r3, [r7, #16]
 8002a1c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002a24:	693b      	ldr	r3, [r7, #16]
 8002a26:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002a2e:	68bb      	ldr	r3, [r7, #8]
 8002a30:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002a34:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	f003 0302 	and.w	r3, r3, #2
 8002a3c:	2b02      	cmp	r3, #2
 8002a3e:	d10b      	bne.n	8002a58 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	f003 0301 	and.w	r3, r3, #1
 8002a46:	2b01      	cmp	r3, #1
 8002a48:	d102      	bne.n	8002a50 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002a4a:	6878      	ldr	r0, [r7, #4]
 8002a4c:	f004 fbf6 	bl	800723c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	f043 0302 	orr.w	r3, r3, #2
 8002a56:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	f003 0308 	and.w	r3, r3, #8
 8002a5e:	2b08      	cmp	r3, #8
 8002a60:	d132      	bne.n	8002ac8 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002a62:	68bb      	ldr	r3, [r7, #8]
 8002a64:	f043 0308 	orr.w	r3, r3, #8
 8002a68:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	f003 0304 	and.w	r3, r3, #4
 8002a70:	2b04      	cmp	r3, #4
 8002a72:	d126      	bne.n	8002ac2 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	699b      	ldr	r3, [r3, #24]
 8002a78:	2b02      	cmp	r3, #2
 8002a7a:	d113      	bne.n	8002aa4 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002a82:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002a86:	d106      	bne.n	8002a96 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	2102      	movs	r1, #2
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f001 fbcc 	bl	800422c <USB_InitFSLSPClkSel>
 8002a94:	e011      	b.n	8002aba <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	2101      	movs	r1, #1
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	f001 fbc5 	bl	800422c <USB_InitFSLSPClkSel>
 8002aa2:	e00a      	b.n	8002aba <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	68db      	ldr	r3, [r3, #12]
 8002aa8:	2b01      	cmp	r3, #1
 8002aaa:	d106      	bne.n	8002aba <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8002aac:	693b      	ldr	r3, [r7, #16]
 8002aae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002ab2:	461a      	mov	r2, r3
 8002ab4:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002ab8:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002aba:	6878      	ldr	r0, [r7, #4]
 8002abc:	f004 fbe8 	bl	8007290 <HAL_HCD_PortEnabled_Callback>
 8002ac0:	e002      	b.n	8002ac8 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002ac2:	6878      	ldr	r0, [r7, #4]
 8002ac4:	f004 fbf2 	bl	80072ac <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	f003 0320 	and.w	r3, r3, #32
 8002ace:	2b20      	cmp	r3, #32
 8002ad0:	d103      	bne.n	8002ada <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	f043 0320 	orr.w	r3, r3, #32
 8002ad8:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002ae0:	461a      	mov	r2, r3
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	6013      	str	r3, [r2, #0]
}
 8002ae6:	bf00      	nop
 8002ae8:	3718      	adds	r7, #24
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}
	...

08002af0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b086      	sub	sp, #24
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d101      	bne.n	8002b02 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002afe:	2301      	movs	r3, #1
 8002b00:	e25b      	b.n	8002fba <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f003 0301 	and.w	r3, r3, #1
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d075      	beq.n	8002bfa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b0e:	4ba3      	ldr	r3, [pc, #652]	; (8002d9c <HAL_RCC_OscConfig+0x2ac>)
 8002b10:	689b      	ldr	r3, [r3, #8]
 8002b12:	f003 030c 	and.w	r3, r3, #12
 8002b16:	2b04      	cmp	r3, #4
 8002b18:	d00c      	beq.n	8002b34 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b1a:	4ba0      	ldr	r3, [pc, #640]	; (8002d9c <HAL_RCC_OscConfig+0x2ac>)
 8002b1c:	689b      	ldr	r3, [r3, #8]
 8002b1e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b22:	2b08      	cmp	r3, #8
 8002b24:	d112      	bne.n	8002b4c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b26:	4b9d      	ldr	r3, [pc, #628]	; (8002d9c <HAL_RCC_OscConfig+0x2ac>)
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b2e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b32:	d10b      	bne.n	8002b4c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b34:	4b99      	ldr	r3, [pc, #612]	; (8002d9c <HAL_RCC_OscConfig+0x2ac>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d05b      	beq.n	8002bf8 <HAL_RCC_OscConfig+0x108>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d157      	bne.n	8002bf8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	e236      	b.n	8002fba <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b54:	d106      	bne.n	8002b64 <HAL_RCC_OscConfig+0x74>
 8002b56:	4b91      	ldr	r3, [pc, #580]	; (8002d9c <HAL_RCC_OscConfig+0x2ac>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4a90      	ldr	r2, [pc, #576]	; (8002d9c <HAL_RCC_OscConfig+0x2ac>)
 8002b5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b60:	6013      	str	r3, [r2, #0]
 8002b62:	e01d      	b.n	8002ba0 <HAL_RCC_OscConfig+0xb0>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b6c:	d10c      	bne.n	8002b88 <HAL_RCC_OscConfig+0x98>
 8002b6e:	4b8b      	ldr	r3, [pc, #556]	; (8002d9c <HAL_RCC_OscConfig+0x2ac>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4a8a      	ldr	r2, [pc, #552]	; (8002d9c <HAL_RCC_OscConfig+0x2ac>)
 8002b74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b78:	6013      	str	r3, [r2, #0]
 8002b7a:	4b88      	ldr	r3, [pc, #544]	; (8002d9c <HAL_RCC_OscConfig+0x2ac>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4a87      	ldr	r2, [pc, #540]	; (8002d9c <HAL_RCC_OscConfig+0x2ac>)
 8002b80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b84:	6013      	str	r3, [r2, #0]
 8002b86:	e00b      	b.n	8002ba0 <HAL_RCC_OscConfig+0xb0>
 8002b88:	4b84      	ldr	r3, [pc, #528]	; (8002d9c <HAL_RCC_OscConfig+0x2ac>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a83      	ldr	r2, [pc, #524]	; (8002d9c <HAL_RCC_OscConfig+0x2ac>)
 8002b8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b92:	6013      	str	r3, [r2, #0]
 8002b94:	4b81      	ldr	r3, [pc, #516]	; (8002d9c <HAL_RCC_OscConfig+0x2ac>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a80      	ldr	r2, [pc, #512]	; (8002d9c <HAL_RCC_OscConfig+0x2ac>)
 8002b9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b9e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d013      	beq.n	8002bd0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ba8:	f7fd ffb8 	bl	8000b1c <HAL_GetTick>
 8002bac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bae:	e008      	b.n	8002bc2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002bb0:	f7fd ffb4 	bl	8000b1c <HAL_GetTick>
 8002bb4:	4602      	mov	r2, r0
 8002bb6:	693b      	ldr	r3, [r7, #16]
 8002bb8:	1ad3      	subs	r3, r2, r3
 8002bba:	2b64      	cmp	r3, #100	; 0x64
 8002bbc:	d901      	bls.n	8002bc2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002bbe:	2303      	movs	r3, #3
 8002bc0:	e1fb      	b.n	8002fba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bc2:	4b76      	ldr	r3, [pc, #472]	; (8002d9c <HAL_RCC_OscConfig+0x2ac>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d0f0      	beq.n	8002bb0 <HAL_RCC_OscConfig+0xc0>
 8002bce:	e014      	b.n	8002bfa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bd0:	f7fd ffa4 	bl	8000b1c <HAL_GetTick>
 8002bd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bd6:	e008      	b.n	8002bea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002bd8:	f7fd ffa0 	bl	8000b1c <HAL_GetTick>
 8002bdc:	4602      	mov	r2, r0
 8002bde:	693b      	ldr	r3, [r7, #16]
 8002be0:	1ad3      	subs	r3, r2, r3
 8002be2:	2b64      	cmp	r3, #100	; 0x64
 8002be4:	d901      	bls.n	8002bea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002be6:	2303      	movs	r3, #3
 8002be8:	e1e7      	b.n	8002fba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bea:	4b6c      	ldr	r3, [pc, #432]	; (8002d9c <HAL_RCC_OscConfig+0x2ac>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d1f0      	bne.n	8002bd8 <HAL_RCC_OscConfig+0xe8>
 8002bf6:	e000      	b.n	8002bfa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bf8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f003 0302 	and.w	r3, r3, #2
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d063      	beq.n	8002cce <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c06:	4b65      	ldr	r3, [pc, #404]	; (8002d9c <HAL_RCC_OscConfig+0x2ac>)
 8002c08:	689b      	ldr	r3, [r3, #8]
 8002c0a:	f003 030c 	and.w	r3, r3, #12
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d00b      	beq.n	8002c2a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c12:	4b62      	ldr	r3, [pc, #392]	; (8002d9c <HAL_RCC_OscConfig+0x2ac>)
 8002c14:	689b      	ldr	r3, [r3, #8]
 8002c16:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c1a:	2b08      	cmp	r3, #8
 8002c1c:	d11c      	bne.n	8002c58 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c1e:	4b5f      	ldr	r3, [pc, #380]	; (8002d9c <HAL_RCC_OscConfig+0x2ac>)
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d116      	bne.n	8002c58 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c2a:	4b5c      	ldr	r3, [pc, #368]	; (8002d9c <HAL_RCC_OscConfig+0x2ac>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f003 0302 	and.w	r3, r3, #2
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d005      	beq.n	8002c42 <HAL_RCC_OscConfig+0x152>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	68db      	ldr	r3, [r3, #12]
 8002c3a:	2b01      	cmp	r3, #1
 8002c3c:	d001      	beq.n	8002c42 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e1bb      	b.n	8002fba <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c42:	4b56      	ldr	r3, [pc, #344]	; (8002d9c <HAL_RCC_OscConfig+0x2ac>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	691b      	ldr	r3, [r3, #16]
 8002c4e:	00db      	lsls	r3, r3, #3
 8002c50:	4952      	ldr	r1, [pc, #328]	; (8002d9c <HAL_RCC_OscConfig+0x2ac>)
 8002c52:	4313      	orrs	r3, r2
 8002c54:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c56:	e03a      	b.n	8002cce <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	68db      	ldr	r3, [r3, #12]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d020      	beq.n	8002ca2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c60:	4b4f      	ldr	r3, [pc, #316]	; (8002da0 <HAL_RCC_OscConfig+0x2b0>)
 8002c62:	2201      	movs	r2, #1
 8002c64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c66:	f7fd ff59 	bl	8000b1c <HAL_GetTick>
 8002c6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c6c:	e008      	b.n	8002c80 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c6e:	f7fd ff55 	bl	8000b1c <HAL_GetTick>
 8002c72:	4602      	mov	r2, r0
 8002c74:	693b      	ldr	r3, [r7, #16]
 8002c76:	1ad3      	subs	r3, r2, r3
 8002c78:	2b02      	cmp	r3, #2
 8002c7a:	d901      	bls.n	8002c80 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002c7c:	2303      	movs	r3, #3
 8002c7e:	e19c      	b.n	8002fba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c80:	4b46      	ldr	r3, [pc, #280]	; (8002d9c <HAL_RCC_OscConfig+0x2ac>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f003 0302 	and.w	r3, r3, #2
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d0f0      	beq.n	8002c6e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c8c:	4b43      	ldr	r3, [pc, #268]	; (8002d9c <HAL_RCC_OscConfig+0x2ac>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	691b      	ldr	r3, [r3, #16]
 8002c98:	00db      	lsls	r3, r3, #3
 8002c9a:	4940      	ldr	r1, [pc, #256]	; (8002d9c <HAL_RCC_OscConfig+0x2ac>)
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	600b      	str	r3, [r1, #0]
 8002ca0:	e015      	b.n	8002cce <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ca2:	4b3f      	ldr	r3, [pc, #252]	; (8002da0 <HAL_RCC_OscConfig+0x2b0>)
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ca8:	f7fd ff38 	bl	8000b1c <HAL_GetTick>
 8002cac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cae:	e008      	b.n	8002cc2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002cb0:	f7fd ff34 	bl	8000b1c <HAL_GetTick>
 8002cb4:	4602      	mov	r2, r0
 8002cb6:	693b      	ldr	r3, [r7, #16]
 8002cb8:	1ad3      	subs	r3, r2, r3
 8002cba:	2b02      	cmp	r3, #2
 8002cbc:	d901      	bls.n	8002cc2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002cbe:	2303      	movs	r3, #3
 8002cc0:	e17b      	b.n	8002fba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cc2:	4b36      	ldr	r3, [pc, #216]	; (8002d9c <HAL_RCC_OscConfig+0x2ac>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f003 0302 	and.w	r3, r3, #2
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d1f0      	bne.n	8002cb0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f003 0308 	and.w	r3, r3, #8
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d030      	beq.n	8002d3c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	695b      	ldr	r3, [r3, #20]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d016      	beq.n	8002d10 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ce2:	4b30      	ldr	r3, [pc, #192]	; (8002da4 <HAL_RCC_OscConfig+0x2b4>)
 8002ce4:	2201      	movs	r2, #1
 8002ce6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ce8:	f7fd ff18 	bl	8000b1c <HAL_GetTick>
 8002cec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cee:	e008      	b.n	8002d02 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002cf0:	f7fd ff14 	bl	8000b1c <HAL_GetTick>
 8002cf4:	4602      	mov	r2, r0
 8002cf6:	693b      	ldr	r3, [r7, #16]
 8002cf8:	1ad3      	subs	r3, r2, r3
 8002cfa:	2b02      	cmp	r3, #2
 8002cfc:	d901      	bls.n	8002d02 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002cfe:	2303      	movs	r3, #3
 8002d00:	e15b      	b.n	8002fba <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d02:	4b26      	ldr	r3, [pc, #152]	; (8002d9c <HAL_RCC_OscConfig+0x2ac>)
 8002d04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d06:	f003 0302 	and.w	r3, r3, #2
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d0f0      	beq.n	8002cf0 <HAL_RCC_OscConfig+0x200>
 8002d0e:	e015      	b.n	8002d3c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d10:	4b24      	ldr	r3, [pc, #144]	; (8002da4 <HAL_RCC_OscConfig+0x2b4>)
 8002d12:	2200      	movs	r2, #0
 8002d14:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d16:	f7fd ff01 	bl	8000b1c <HAL_GetTick>
 8002d1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d1c:	e008      	b.n	8002d30 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d1e:	f7fd fefd 	bl	8000b1c <HAL_GetTick>
 8002d22:	4602      	mov	r2, r0
 8002d24:	693b      	ldr	r3, [r7, #16]
 8002d26:	1ad3      	subs	r3, r2, r3
 8002d28:	2b02      	cmp	r3, #2
 8002d2a:	d901      	bls.n	8002d30 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002d2c:	2303      	movs	r3, #3
 8002d2e:	e144      	b.n	8002fba <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d30:	4b1a      	ldr	r3, [pc, #104]	; (8002d9c <HAL_RCC_OscConfig+0x2ac>)
 8002d32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d34:	f003 0302 	and.w	r3, r3, #2
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d1f0      	bne.n	8002d1e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f003 0304 	and.w	r3, r3, #4
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	f000 80a0 	beq.w	8002e8a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d4e:	4b13      	ldr	r3, [pc, #76]	; (8002d9c <HAL_RCC_OscConfig+0x2ac>)
 8002d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d10f      	bne.n	8002d7a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	60bb      	str	r3, [r7, #8]
 8002d5e:	4b0f      	ldr	r3, [pc, #60]	; (8002d9c <HAL_RCC_OscConfig+0x2ac>)
 8002d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d62:	4a0e      	ldr	r2, [pc, #56]	; (8002d9c <HAL_RCC_OscConfig+0x2ac>)
 8002d64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d68:	6413      	str	r3, [r2, #64]	; 0x40
 8002d6a:	4b0c      	ldr	r3, [pc, #48]	; (8002d9c <HAL_RCC_OscConfig+0x2ac>)
 8002d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d72:	60bb      	str	r3, [r7, #8]
 8002d74:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d76:	2301      	movs	r3, #1
 8002d78:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d7a:	4b0b      	ldr	r3, [pc, #44]	; (8002da8 <HAL_RCC_OscConfig+0x2b8>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d121      	bne.n	8002dca <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d86:	4b08      	ldr	r3, [pc, #32]	; (8002da8 <HAL_RCC_OscConfig+0x2b8>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a07      	ldr	r2, [pc, #28]	; (8002da8 <HAL_RCC_OscConfig+0x2b8>)
 8002d8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d90:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d92:	f7fd fec3 	bl	8000b1c <HAL_GetTick>
 8002d96:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d98:	e011      	b.n	8002dbe <HAL_RCC_OscConfig+0x2ce>
 8002d9a:	bf00      	nop
 8002d9c:	40023800 	.word	0x40023800
 8002da0:	42470000 	.word	0x42470000
 8002da4:	42470e80 	.word	0x42470e80
 8002da8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002dac:	f7fd feb6 	bl	8000b1c <HAL_GetTick>
 8002db0:	4602      	mov	r2, r0
 8002db2:	693b      	ldr	r3, [r7, #16]
 8002db4:	1ad3      	subs	r3, r2, r3
 8002db6:	2b02      	cmp	r3, #2
 8002db8:	d901      	bls.n	8002dbe <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002dba:	2303      	movs	r3, #3
 8002dbc:	e0fd      	b.n	8002fba <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dbe:	4b81      	ldr	r3, [pc, #516]	; (8002fc4 <HAL_RCC_OscConfig+0x4d4>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d0f0      	beq.n	8002dac <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	689b      	ldr	r3, [r3, #8]
 8002dce:	2b01      	cmp	r3, #1
 8002dd0:	d106      	bne.n	8002de0 <HAL_RCC_OscConfig+0x2f0>
 8002dd2:	4b7d      	ldr	r3, [pc, #500]	; (8002fc8 <HAL_RCC_OscConfig+0x4d8>)
 8002dd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dd6:	4a7c      	ldr	r2, [pc, #496]	; (8002fc8 <HAL_RCC_OscConfig+0x4d8>)
 8002dd8:	f043 0301 	orr.w	r3, r3, #1
 8002ddc:	6713      	str	r3, [r2, #112]	; 0x70
 8002dde:	e01c      	b.n	8002e1a <HAL_RCC_OscConfig+0x32a>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	689b      	ldr	r3, [r3, #8]
 8002de4:	2b05      	cmp	r3, #5
 8002de6:	d10c      	bne.n	8002e02 <HAL_RCC_OscConfig+0x312>
 8002de8:	4b77      	ldr	r3, [pc, #476]	; (8002fc8 <HAL_RCC_OscConfig+0x4d8>)
 8002dea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dec:	4a76      	ldr	r2, [pc, #472]	; (8002fc8 <HAL_RCC_OscConfig+0x4d8>)
 8002dee:	f043 0304 	orr.w	r3, r3, #4
 8002df2:	6713      	str	r3, [r2, #112]	; 0x70
 8002df4:	4b74      	ldr	r3, [pc, #464]	; (8002fc8 <HAL_RCC_OscConfig+0x4d8>)
 8002df6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002df8:	4a73      	ldr	r2, [pc, #460]	; (8002fc8 <HAL_RCC_OscConfig+0x4d8>)
 8002dfa:	f043 0301 	orr.w	r3, r3, #1
 8002dfe:	6713      	str	r3, [r2, #112]	; 0x70
 8002e00:	e00b      	b.n	8002e1a <HAL_RCC_OscConfig+0x32a>
 8002e02:	4b71      	ldr	r3, [pc, #452]	; (8002fc8 <HAL_RCC_OscConfig+0x4d8>)
 8002e04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e06:	4a70      	ldr	r2, [pc, #448]	; (8002fc8 <HAL_RCC_OscConfig+0x4d8>)
 8002e08:	f023 0301 	bic.w	r3, r3, #1
 8002e0c:	6713      	str	r3, [r2, #112]	; 0x70
 8002e0e:	4b6e      	ldr	r3, [pc, #440]	; (8002fc8 <HAL_RCC_OscConfig+0x4d8>)
 8002e10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e12:	4a6d      	ldr	r2, [pc, #436]	; (8002fc8 <HAL_RCC_OscConfig+0x4d8>)
 8002e14:	f023 0304 	bic.w	r3, r3, #4
 8002e18:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	689b      	ldr	r3, [r3, #8]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d015      	beq.n	8002e4e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e22:	f7fd fe7b 	bl	8000b1c <HAL_GetTick>
 8002e26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e28:	e00a      	b.n	8002e40 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e2a:	f7fd fe77 	bl	8000b1c <HAL_GetTick>
 8002e2e:	4602      	mov	r2, r0
 8002e30:	693b      	ldr	r3, [r7, #16]
 8002e32:	1ad3      	subs	r3, r2, r3
 8002e34:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d901      	bls.n	8002e40 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002e3c:	2303      	movs	r3, #3
 8002e3e:	e0bc      	b.n	8002fba <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e40:	4b61      	ldr	r3, [pc, #388]	; (8002fc8 <HAL_RCC_OscConfig+0x4d8>)
 8002e42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e44:	f003 0302 	and.w	r3, r3, #2
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d0ee      	beq.n	8002e2a <HAL_RCC_OscConfig+0x33a>
 8002e4c:	e014      	b.n	8002e78 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e4e:	f7fd fe65 	bl	8000b1c <HAL_GetTick>
 8002e52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e54:	e00a      	b.n	8002e6c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e56:	f7fd fe61 	bl	8000b1c <HAL_GetTick>
 8002e5a:	4602      	mov	r2, r0
 8002e5c:	693b      	ldr	r3, [r7, #16]
 8002e5e:	1ad3      	subs	r3, r2, r3
 8002e60:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d901      	bls.n	8002e6c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002e68:	2303      	movs	r3, #3
 8002e6a:	e0a6      	b.n	8002fba <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e6c:	4b56      	ldr	r3, [pc, #344]	; (8002fc8 <HAL_RCC_OscConfig+0x4d8>)
 8002e6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e70:	f003 0302 	and.w	r3, r3, #2
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d1ee      	bne.n	8002e56 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e78:	7dfb      	ldrb	r3, [r7, #23]
 8002e7a:	2b01      	cmp	r3, #1
 8002e7c:	d105      	bne.n	8002e8a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e7e:	4b52      	ldr	r3, [pc, #328]	; (8002fc8 <HAL_RCC_OscConfig+0x4d8>)
 8002e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e82:	4a51      	ldr	r2, [pc, #324]	; (8002fc8 <HAL_RCC_OscConfig+0x4d8>)
 8002e84:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e88:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	699b      	ldr	r3, [r3, #24]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	f000 8092 	beq.w	8002fb8 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002e94:	4b4c      	ldr	r3, [pc, #304]	; (8002fc8 <HAL_RCC_OscConfig+0x4d8>)
 8002e96:	689b      	ldr	r3, [r3, #8]
 8002e98:	f003 030c 	and.w	r3, r3, #12
 8002e9c:	2b08      	cmp	r3, #8
 8002e9e:	d05c      	beq.n	8002f5a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	699b      	ldr	r3, [r3, #24]
 8002ea4:	2b02      	cmp	r3, #2
 8002ea6:	d141      	bne.n	8002f2c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ea8:	4b48      	ldr	r3, [pc, #288]	; (8002fcc <HAL_RCC_OscConfig+0x4dc>)
 8002eaa:	2200      	movs	r2, #0
 8002eac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eae:	f7fd fe35 	bl	8000b1c <HAL_GetTick>
 8002eb2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002eb4:	e008      	b.n	8002ec8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002eb6:	f7fd fe31 	bl	8000b1c <HAL_GetTick>
 8002eba:	4602      	mov	r2, r0
 8002ebc:	693b      	ldr	r3, [r7, #16]
 8002ebe:	1ad3      	subs	r3, r2, r3
 8002ec0:	2b02      	cmp	r3, #2
 8002ec2:	d901      	bls.n	8002ec8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002ec4:	2303      	movs	r3, #3
 8002ec6:	e078      	b.n	8002fba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ec8:	4b3f      	ldr	r3, [pc, #252]	; (8002fc8 <HAL_RCC_OscConfig+0x4d8>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d1f0      	bne.n	8002eb6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	69da      	ldr	r2, [r3, #28]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6a1b      	ldr	r3, [r3, #32]
 8002edc:	431a      	orrs	r2, r3
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ee2:	019b      	lsls	r3, r3, #6
 8002ee4:	431a      	orrs	r2, r3
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eea:	085b      	lsrs	r3, r3, #1
 8002eec:	3b01      	subs	r3, #1
 8002eee:	041b      	lsls	r3, r3, #16
 8002ef0:	431a      	orrs	r2, r3
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ef6:	061b      	lsls	r3, r3, #24
 8002ef8:	4933      	ldr	r1, [pc, #204]	; (8002fc8 <HAL_RCC_OscConfig+0x4d8>)
 8002efa:	4313      	orrs	r3, r2
 8002efc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002efe:	4b33      	ldr	r3, [pc, #204]	; (8002fcc <HAL_RCC_OscConfig+0x4dc>)
 8002f00:	2201      	movs	r2, #1
 8002f02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f04:	f7fd fe0a 	bl	8000b1c <HAL_GetTick>
 8002f08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f0a:	e008      	b.n	8002f1e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f0c:	f7fd fe06 	bl	8000b1c <HAL_GetTick>
 8002f10:	4602      	mov	r2, r0
 8002f12:	693b      	ldr	r3, [r7, #16]
 8002f14:	1ad3      	subs	r3, r2, r3
 8002f16:	2b02      	cmp	r3, #2
 8002f18:	d901      	bls.n	8002f1e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002f1a:	2303      	movs	r3, #3
 8002f1c:	e04d      	b.n	8002fba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f1e:	4b2a      	ldr	r3, [pc, #168]	; (8002fc8 <HAL_RCC_OscConfig+0x4d8>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d0f0      	beq.n	8002f0c <HAL_RCC_OscConfig+0x41c>
 8002f2a:	e045      	b.n	8002fb8 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f2c:	4b27      	ldr	r3, [pc, #156]	; (8002fcc <HAL_RCC_OscConfig+0x4dc>)
 8002f2e:	2200      	movs	r2, #0
 8002f30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f32:	f7fd fdf3 	bl	8000b1c <HAL_GetTick>
 8002f36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f38:	e008      	b.n	8002f4c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f3a:	f7fd fdef 	bl	8000b1c <HAL_GetTick>
 8002f3e:	4602      	mov	r2, r0
 8002f40:	693b      	ldr	r3, [r7, #16]
 8002f42:	1ad3      	subs	r3, r2, r3
 8002f44:	2b02      	cmp	r3, #2
 8002f46:	d901      	bls.n	8002f4c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002f48:	2303      	movs	r3, #3
 8002f4a:	e036      	b.n	8002fba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f4c:	4b1e      	ldr	r3, [pc, #120]	; (8002fc8 <HAL_RCC_OscConfig+0x4d8>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d1f0      	bne.n	8002f3a <HAL_RCC_OscConfig+0x44a>
 8002f58:	e02e      	b.n	8002fb8 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	699b      	ldr	r3, [r3, #24]
 8002f5e:	2b01      	cmp	r3, #1
 8002f60:	d101      	bne.n	8002f66 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	e029      	b.n	8002fba <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002f66:	4b18      	ldr	r3, [pc, #96]	; (8002fc8 <HAL_RCC_OscConfig+0x4d8>)
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	69db      	ldr	r3, [r3, #28]
 8002f76:	429a      	cmp	r2, r3
 8002f78:	d11c      	bne.n	8002fb4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f84:	429a      	cmp	r2, r3
 8002f86:	d115      	bne.n	8002fb4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002f88:	68fa      	ldr	r2, [r7, #12]
 8002f8a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002f8e:	4013      	ands	r3, r2
 8002f90:	687a      	ldr	r2, [r7, #4]
 8002f92:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d10d      	bne.n	8002fb4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002fa2:	429a      	cmp	r2, r3
 8002fa4:	d106      	bne.n	8002fb4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002fb0:	429a      	cmp	r2, r3
 8002fb2:	d001      	beq.n	8002fb8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	e000      	b.n	8002fba <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002fb8:	2300      	movs	r3, #0
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	3718      	adds	r7, #24
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}
 8002fc2:	bf00      	nop
 8002fc4:	40007000 	.word	0x40007000
 8002fc8:	40023800 	.word	0x40023800
 8002fcc:	42470060 	.word	0x42470060

08002fd0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b084      	sub	sp, #16
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
 8002fd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d101      	bne.n	8002fe4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	e0cc      	b.n	800317e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002fe4:	4b68      	ldr	r3, [pc, #416]	; (8003188 <HAL_RCC_ClockConfig+0x1b8>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f003 030f 	and.w	r3, r3, #15
 8002fec:	683a      	ldr	r2, [r7, #0]
 8002fee:	429a      	cmp	r2, r3
 8002ff0:	d90c      	bls.n	800300c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ff2:	4b65      	ldr	r3, [pc, #404]	; (8003188 <HAL_RCC_ClockConfig+0x1b8>)
 8002ff4:	683a      	ldr	r2, [r7, #0]
 8002ff6:	b2d2      	uxtb	r2, r2
 8002ff8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ffa:	4b63      	ldr	r3, [pc, #396]	; (8003188 <HAL_RCC_ClockConfig+0x1b8>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f003 030f 	and.w	r3, r3, #15
 8003002:	683a      	ldr	r2, [r7, #0]
 8003004:	429a      	cmp	r2, r3
 8003006:	d001      	beq.n	800300c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003008:	2301      	movs	r3, #1
 800300a:	e0b8      	b.n	800317e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f003 0302 	and.w	r3, r3, #2
 8003014:	2b00      	cmp	r3, #0
 8003016:	d020      	beq.n	800305a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f003 0304 	and.w	r3, r3, #4
 8003020:	2b00      	cmp	r3, #0
 8003022:	d005      	beq.n	8003030 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003024:	4b59      	ldr	r3, [pc, #356]	; (800318c <HAL_RCC_ClockConfig+0x1bc>)
 8003026:	689b      	ldr	r3, [r3, #8]
 8003028:	4a58      	ldr	r2, [pc, #352]	; (800318c <HAL_RCC_ClockConfig+0x1bc>)
 800302a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800302e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f003 0308 	and.w	r3, r3, #8
 8003038:	2b00      	cmp	r3, #0
 800303a:	d005      	beq.n	8003048 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800303c:	4b53      	ldr	r3, [pc, #332]	; (800318c <HAL_RCC_ClockConfig+0x1bc>)
 800303e:	689b      	ldr	r3, [r3, #8]
 8003040:	4a52      	ldr	r2, [pc, #328]	; (800318c <HAL_RCC_ClockConfig+0x1bc>)
 8003042:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003046:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003048:	4b50      	ldr	r3, [pc, #320]	; (800318c <HAL_RCC_ClockConfig+0x1bc>)
 800304a:	689b      	ldr	r3, [r3, #8]
 800304c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	689b      	ldr	r3, [r3, #8]
 8003054:	494d      	ldr	r1, [pc, #308]	; (800318c <HAL_RCC_ClockConfig+0x1bc>)
 8003056:	4313      	orrs	r3, r2
 8003058:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f003 0301 	and.w	r3, r3, #1
 8003062:	2b00      	cmp	r3, #0
 8003064:	d044      	beq.n	80030f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	2b01      	cmp	r3, #1
 800306c:	d107      	bne.n	800307e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800306e:	4b47      	ldr	r3, [pc, #284]	; (800318c <HAL_RCC_ClockConfig+0x1bc>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003076:	2b00      	cmp	r3, #0
 8003078:	d119      	bne.n	80030ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800307a:	2301      	movs	r3, #1
 800307c:	e07f      	b.n	800317e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	2b02      	cmp	r3, #2
 8003084:	d003      	beq.n	800308e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800308a:	2b03      	cmp	r3, #3
 800308c:	d107      	bne.n	800309e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800308e:	4b3f      	ldr	r3, [pc, #252]	; (800318c <HAL_RCC_ClockConfig+0x1bc>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003096:	2b00      	cmp	r3, #0
 8003098:	d109      	bne.n	80030ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800309a:	2301      	movs	r3, #1
 800309c:	e06f      	b.n	800317e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800309e:	4b3b      	ldr	r3, [pc, #236]	; (800318c <HAL_RCC_ClockConfig+0x1bc>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f003 0302 	and.w	r3, r3, #2
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d101      	bne.n	80030ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030aa:	2301      	movs	r3, #1
 80030ac:	e067      	b.n	800317e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80030ae:	4b37      	ldr	r3, [pc, #220]	; (800318c <HAL_RCC_ClockConfig+0x1bc>)
 80030b0:	689b      	ldr	r3, [r3, #8]
 80030b2:	f023 0203 	bic.w	r2, r3, #3
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	4934      	ldr	r1, [pc, #208]	; (800318c <HAL_RCC_ClockConfig+0x1bc>)
 80030bc:	4313      	orrs	r3, r2
 80030be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80030c0:	f7fd fd2c 	bl	8000b1c <HAL_GetTick>
 80030c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030c6:	e00a      	b.n	80030de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030c8:	f7fd fd28 	bl	8000b1c <HAL_GetTick>
 80030cc:	4602      	mov	r2, r0
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	1ad3      	subs	r3, r2, r3
 80030d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d901      	bls.n	80030de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80030da:	2303      	movs	r3, #3
 80030dc:	e04f      	b.n	800317e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030de:	4b2b      	ldr	r3, [pc, #172]	; (800318c <HAL_RCC_ClockConfig+0x1bc>)
 80030e0:	689b      	ldr	r3, [r3, #8]
 80030e2:	f003 020c 	and.w	r2, r3, #12
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	009b      	lsls	r3, r3, #2
 80030ec:	429a      	cmp	r2, r3
 80030ee:	d1eb      	bne.n	80030c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80030f0:	4b25      	ldr	r3, [pc, #148]	; (8003188 <HAL_RCC_ClockConfig+0x1b8>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f003 030f 	and.w	r3, r3, #15
 80030f8:	683a      	ldr	r2, [r7, #0]
 80030fa:	429a      	cmp	r2, r3
 80030fc:	d20c      	bcs.n	8003118 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030fe:	4b22      	ldr	r3, [pc, #136]	; (8003188 <HAL_RCC_ClockConfig+0x1b8>)
 8003100:	683a      	ldr	r2, [r7, #0]
 8003102:	b2d2      	uxtb	r2, r2
 8003104:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003106:	4b20      	ldr	r3, [pc, #128]	; (8003188 <HAL_RCC_ClockConfig+0x1b8>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f003 030f 	and.w	r3, r3, #15
 800310e:	683a      	ldr	r2, [r7, #0]
 8003110:	429a      	cmp	r2, r3
 8003112:	d001      	beq.n	8003118 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003114:	2301      	movs	r3, #1
 8003116:	e032      	b.n	800317e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f003 0304 	and.w	r3, r3, #4
 8003120:	2b00      	cmp	r3, #0
 8003122:	d008      	beq.n	8003136 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003124:	4b19      	ldr	r3, [pc, #100]	; (800318c <HAL_RCC_ClockConfig+0x1bc>)
 8003126:	689b      	ldr	r3, [r3, #8]
 8003128:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	68db      	ldr	r3, [r3, #12]
 8003130:	4916      	ldr	r1, [pc, #88]	; (800318c <HAL_RCC_ClockConfig+0x1bc>)
 8003132:	4313      	orrs	r3, r2
 8003134:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f003 0308 	and.w	r3, r3, #8
 800313e:	2b00      	cmp	r3, #0
 8003140:	d009      	beq.n	8003156 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003142:	4b12      	ldr	r3, [pc, #72]	; (800318c <HAL_RCC_ClockConfig+0x1bc>)
 8003144:	689b      	ldr	r3, [r3, #8]
 8003146:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	691b      	ldr	r3, [r3, #16]
 800314e:	00db      	lsls	r3, r3, #3
 8003150:	490e      	ldr	r1, [pc, #56]	; (800318c <HAL_RCC_ClockConfig+0x1bc>)
 8003152:	4313      	orrs	r3, r2
 8003154:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003156:	f000 f821 	bl	800319c <HAL_RCC_GetSysClockFreq>
 800315a:	4602      	mov	r2, r0
 800315c:	4b0b      	ldr	r3, [pc, #44]	; (800318c <HAL_RCC_ClockConfig+0x1bc>)
 800315e:	689b      	ldr	r3, [r3, #8]
 8003160:	091b      	lsrs	r3, r3, #4
 8003162:	f003 030f 	and.w	r3, r3, #15
 8003166:	490a      	ldr	r1, [pc, #40]	; (8003190 <HAL_RCC_ClockConfig+0x1c0>)
 8003168:	5ccb      	ldrb	r3, [r1, r3]
 800316a:	fa22 f303 	lsr.w	r3, r2, r3
 800316e:	4a09      	ldr	r2, [pc, #36]	; (8003194 <HAL_RCC_ClockConfig+0x1c4>)
 8003170:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003172:	4b09      	ldr	r3, [pc, #36]	; (8003198 <HAL_RCC_ClockConfig+0x1c8>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4618      	mov	r0, r3
 8003178:	f7fd fc8c 	bl	8000a94 <HAL_InitTick>

  return HAL_OK;
 800317c:	2300      	movs	r3, #0
}
 800317e:	4618      	mov	r0, r3
 8003180:	3710      	adds	r7, #16
 8003182:	46bd      	mov	sp, r7
 8003184:	bd80      	pop	{r7, pc}
 8003186:	bf00      	nop
 8003188:	40023c00 	.word	0x40023c00
 800318c:	40023800 	.word	0x40023800
 8003190:	08007ff4 	.word	0x08007ff4
 8003194:	20000000 	.word	0x20000000
 8003198:	20000004 	.word	0x20000004

0800319c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800319c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80031a0:	b084      	sub	sp, #16
 80031a2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80031a4:	2300      	movs	r3, #0
 80031a6:	607b      	str	r3, [r7, #4]
 80031a8:	2300      	movs	r3, #0
 80031aa:	60fb      	str	r3, [r7, #12]
 80031ac:	2300      	movs	r3, #0
 80031ae:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80031b0:	2300      	movs	r3, #0
 80031b2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80031b4:	4b67      	ldr	r3, [pc, #412]	; (8003354 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80031b6:	689b      	ldr	r3, [r3, #8]
 80031b8:	f003 030c 	and.w	r3, r3, #12
 80031bc:	2b08      	cmp	r3, #8
 80031be:	d00d      	beq.n	80031dc <HAL_RCC_GetSysClockFreq+0x40>
 80031c0:	2b08      	cmp	r3, #8
 80031c2:	f200 80bd 	bhi.w	8003340 <HAL_RCC_GetSysClockFreq+0x1a4>
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d002      	beq.n	80031d0 <HAL_RCC_GetSysClockFreq+0x34>
 80031ca:	2b04      	cmp	r3, #4
 80031cc:	d003      	beq.n	80031d6 <HAL_RCC_GetSysClockFreq+0x3a>
 80031ce:	e0b7      	b.n	8003340 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80031d0:	4b61      	ldr	r3, [pc, #388]	; (8003358 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80031d2:	60bb      	str	r3, [r7, #8]
       break;
 80031d4:	e0b7      	b.n	8003346 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80031d6:	4b61      	ldr	r3, [pc, #388]	; (800335c <HAL_RCC_GetSysClockFreq+0x1c0>)
 80031d8:	60bb      	str	r3, [r7, #8]
      break;
 80031da:	e0b4      	b.n	8003346 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80031dc:	4b5d      	ldr	r3, [pc, #372]	; (8003354 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80031e4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80031e6:	4b5b      	ldr	r3, [pc, #364]	; (8003354 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d04d      	beq.n	800328e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031f2:	4b58      	ldr	r3, [pc, #352]	; (8003354 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	099b      	lsrs	r3, r3, #6
 80031f8:	461a      	mov	r2, r3
 80031fa:	f04f 0300 	mov.w	r3, #0
 80031fe:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003202:	f04f 0100 	mov.w	r1, #0
 8003206:	ea02 0800 	and.w	r8, r2, r0
 800320a:	ea03 0901 	and.w	r9, r3, r1
 800320e:	4640      	mov	r0, r8
 8003210:	4649      	mov	r1, r9
 8003212:	f04f 0200 	mov.w	r2, #0
 8003216:	f04f 0300 	mov.w	r3, #0
 800321a:	014b      	lsls	r3, r1, #5
 800321c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003220:	0142      	lsls	r2, r0, #5
 8003222:	4610      	mov	r0, r2
 8003224:	4619      	mov	r1, r3
 8003226:	ebb0 0008 	subs.w	r0, r0, r8
 800322a:	eb61 0109 	sbc.w	r1, r1, r9
 800322e:	f04f 0200 	mov.w	r2, #0
 8003232:	f04f 0300 	mov.w	r3, #0
 8003236:	018b      	lsls	r3, r1, #6
 8003238:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800323c:	0182      	lsls	r2, r0, #6
 800323e:	1a12      	subs	r2, r2, r0
 8003240:	eb63 0301 	sbc.w	r3, r3, r1
 8003244:	f04f 0000 	mov.w	r0, #0
 8003248:	f04f 0100 	mov.w	r1, #0
 800324c:	00d9      	lsls	r1, r3, #3
 800324e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003252:	00d0      	lsls	r0, r2, #3
 8003254:	4602      	mov	r2, r0
 8003256:	460b      	mov	r3, r1
 8003258:	eb12 0208 	adds.w	r2, r2, r8
 800325c:	eb43 0309 	adc.w	r3, r3, r9
 8003260:	f04f 0000 	mov.w	r0, #0
 8003264:	f04f 0100 	mov.w	r1, #0
 8003268:	0259      	lsls	r1, r3, #9
 800326a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800326e:	0250      	lsls	r0, r2, #9
 8003270:	4602      	mov	r2, r0
 8003272:	460b      	mov	r3, r1
 8003274:	4610      	mov	r0, r2
 8003276:	4619      	mov	r1, r3
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	461a      	mov	r2, r3
 800327c:	f04f 0300 	mov.w	r3, #0
 8003280:	f7fc fff6 	bl	8000270 <__aeabi_uldivmod>
 8003284:	4602      	mov	r2, r0
 8003286:	460b      	mov	r3, r1
 8003288:	4613      	mov	r3, r2
 800328a:	60fb      	str	r3, [r7, #12]
 800328c:	e04a      	b.n	8003324 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800328e:	4b31      	ldr	r3, [pc, #196]	; (8003354 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	099b      	lsrs	r3, r3, #6
 8003294:	461a      	mov	r2, r3
 8003296:	f04f 0300 	mov.w	r3, #0
 800329a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800329e:	f04f 0100 	mov.w	r1, #0
 80032a2:	ea02 0400 	and.w	r4, r2, r0
 80032a6:	ea03 0501 	and.w	r5, r3, r1
 80032aa:	4620      	mov	r0, r4
 80032ac:	4629      	mov	r1, r5
 80032ae:	f04f 0200 	mov.w	r2, #0
 80032b2:	f04f 0300 	mov.w	r3, #0
 80032b6:	014b      	lsls	r3, r1, #5
 80032b8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80032bc:	0142      	lsls	r2, r0, #5
 80032be:	4610      	mov	r0, r2
 80032c0:	4619      	mov	r1, r3
 80032c2:	1b00      	subs	r0, r0, r4
 80032c4:	eb61 0105 	sbc.w	r1, r1, r5
 80032c8:	f04f 0200 	mov.w	r2, #0
 80032cc:	f04f 0300 	mov.w	r3, #0
 80032d0:	018b      	lsls	r3, r1, #6
 80032d2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80032d6:	0182      	lsls	r2, r0, #6
 80032d8:	1a12      	subs	r2, r2, r0
 80032da:	eb63 0301 	sbc.w	r3, r3, r1
 80032de:	f04f 0000 	mov.w	r0, #0
 80032e2:	f04f 0100 	mov.w	r1, #0
 80032e6:	00d9      	lsls	r1, r3, #3
 80032e8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80032ec:	00d0      	lsls	r0, r2, #3
 80032ee:	4602      	mov	r2, r0
 80032f0:	460b      	mov	r3, r1
 80032f2:	1912      	adds	r2, r2, r4
 80032f4:	eb45 0303 	adc.w	r3, r5, r3
 80032f8:	f04f 0000 	mov.w	r0, #0
 80032fc:	f04f 0100 	mov.w	r1, #0
 8003300:	0299      	lsls	r1, r3, #10
 8003302:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003306:	0290      	lsls	r0, r2, #10
 8003308:	4602      	mov	r2, r0
 800330a:	460b      	mov	r3, r1
 800330c:	4610      	mov	r0, r2
 800330e:	4619      	mov	r1, r3
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	461a      	mov	r2, r3
 8003314:	f04f 0300 	mov.w	r3, #0
 8003318:	f7fc ffaa 	bl	8000270 <__aeabi_uldivmod>
 800331c:	4602      	mov	r2, r0
 800331e:	460b      	mov	r3, r1
 8003320:	4613      	mov	r3, r2
 8003322:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003324:	4b0b      	ldr	r3, [pc, #44]	; (8003354 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	0c1b      	lsrs	r3, r3, #16
 800332a:	f003 0303 	and.w	r3, r3, #3
 800332e:	3301      	adds	r3, #1
 8003330:	005b      	lsls	r3, r3, #1
 8003332:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003334:	68fa      	ldr	r2, [r7, #12]
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	fbb2 f3f3 	udiv	r3, r2, r3
 800333c:	60bb      	str	r3, [r7, #8]
      break;
 800333e:	e002      	b.n	8003346 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003340:	4b05      	ldr	r3, [pc, #20]	; (8003358 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003342:	60bb      	str	r3, [r7, #8]
      break;
 8003344:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003346:	68bb      	ldr	r3, [r7, #8]
}
 8003348:	4618      	mov	r0, r3
 800334a:	3710      	adds	r7, #16
 800334c:	46bd      	mov	sp, r7
 800334e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003352:	bf00      	nop
 8003354:	40023800 	.word	0x40023800
 8003358:	00f42400 	.word	0x00f42400
 800335c:	007a1200 	.word	0x007a1200

08003360 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003360:	b480      	push	{r7}
 8003362:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003364:	4b03      	ldr	r3, [pc, #12]	; (8003374 <HAL_RCC_GetHCLKFreq+0x14>)
 8003366:	681b      	ldr	r3, [r3, #0]
}
 8003368:	4618      	mov	r0, r3
 800336a:	46bd      	mov	sp, r7
 800336c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003370:	4770      	bx	lr
 8003372:	bf00      	nop
 8003374:	20000000 	.word	0x20000000

08003378 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800337c:	f7ff fff0 	bl	8003360 <HAL_RCC_GetHCLKFreq>
 8003380:	4602      	mov	r2, r0
 8003382:	4b05      	ldr	r3, [pc, #20]	; (8003398 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003384:	689b      	ldr	r3, [r3, #8]
 8003386:	0a9b      	lsrs	r3, r3, #10
 8003388:	f003 0307 	and.w	r3, r3, #7
 800338c:	4903      	ldr	r1, [pc, #12]	; (800339c <HAL_RCC_GetPCLK1Freq+0x24>)
 800338e:	5ccb      	ldrb	r3, [r1, r3]
 8003390:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003394:	4618      	mov	r0, r3
 8003396:	bd80      	pop	{r7, pc}
 8003398:	40023800 	.word	0x40023800
 800339c:	08008004 	.word	0x08008004

080033a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80033a4:	f7ff ffdc 	bl	8003360 <HAL_RCC_GetHCLKFreq>
 80033a8:	4602      	mov	r2, r0
 80033aa:	4b05      	ldr	r3, [pc, #20]	; (80033c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80033ac:	689b      	ldr	r3, [r3, #8]
 80033ae:	0b5b      	lsrs	r3, r3, #13
 80033b0:	f003 0307 	and.w	r3, r3, #7
 80033b4:	4903      	ldr	r1, [pc, #12]	; (80033c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80033b6:	5ccb      	ldrb	r3, [r1, r3]
 80033b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033bc:	4618      	mov	r0, r3
 80033be:	bd80      	pop	{r7, pc}
 80033c0:	40023800 	.word	0x40023800
 80033c4:	08008004 	.word	0x08008004

080033c8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b082      	sub	sp, #8
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d101      	bne.n	80033da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80033d6:	2301      	movs	r3, #1
 80033d8:	e03f      	b.n	800345a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80033e0:	b2db      	uxtb	r3, r3
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d106      	bne.n	80033f4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2200      	movs	r2, #0
 80033ea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80033ee:	6878      	ldr	r0, [r7, #4]
 80033f0:	f7fd fa42 	bl	8000878 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2224      	movs	r2, #36	; 0x24
 80033f8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	68da      	ldr	r2, [r3, #12]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800340a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800340c:	6878      	ldr	r0, [r7, #4]
 800340e:	f000 f90b 	bl	8003628 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	691a      	ldr	r2, [r3, #16]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003420:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	695a      	ldr	r2, [r3, #20]
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003430:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	68da      	ldr	r2, [r3, #12]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003440:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2200      	movs	r2, #0
 8003446:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2220      	movs	r2, #32
 800344c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2220      	movs	r2, #32
 8003454:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003458:	2300      	movs	r3, #0
}
 800345a:	4618      	mov	r0, r3
 800345c:	3708      	adds	r7, #8
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}

08003462 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003462:	b580      	push	{r7, lr}
 8003464:	b088      	sub	sp, #32
 8003466:	af02      	add	r7, sp, #8
 8003468:	60f8      	str	r0, [r7, #12]
 800346a:	60b9      	str	r1, [r7, #8]
 800346c:	603b      	str	r3, [r7, #0]
 800346e:	4613      	mov	r3, r2
 8003470:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8003472:	2300      	movs	r3, #0
 8003474:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800347c:	b2db      	uxtb	r3, r3
 800347e:	2b20      	cmp	r3, #32
 8003480:	f040 8083 	bne.w	800358a <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d002      	beq.n	8003490 <HAL_UART_Transmit+0x2e>
 800348a:	88fb      	ldrh	r3, [r7, #6]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d101      	bne.n	8003494 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8003490:	2301      	movs	r3, #1
 8003492:	e07b      	b.n	800358c <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800349a:	2b01      	cmp	r3, #1
 800349c:	d101      	bne.n	80034a2 <HAL_UART_Transmit+0x40>
 800349e:	2302      	movs	r3, #2
 80034a0:	e074      	b.n	800358c <HAL_UART_Transmit+0x12a>
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	2201      	movs	r2, #1
 80034a6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	2200      	movs	r2, #0
 80034ae:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	2221      	movs	r2, #33	; 0x21
 80034b4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80034b8:	f7fd fb30 	bl	8000b1c <HAL_GetTick>
 80034bc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	88fa      	ldrh	r2, [r7, #6]
 80034c2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	88fa      	ldrh	r2, [r7, #6]
 80034c8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	2200      	movs	r2, #0
 80034ce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80034d2:	e042      	b.n	800355a <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80034d8:	b29b      	uxth	r3, r3
 80034da:	3b01      	subs	r3, #1
 80034dc:	b29a      	uxth	r2, r3
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	689b      	ldr	r3, [r3, #8]
 80034e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034ea:	d122      	bne.n	8003532 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	9300      	str	r3, [sp, #0]
 80034f0:	697b      	ldr	r3, [r7, #20]
 80034f2:	2200      	movs	r2, #0
 80034f4:	2180      	movs	r1, #128	; 0x80
 80034f6:	68f8      	ldr	r0, [r7, #12]
 80034f8:	f000 f84c 	bl	8003594 <UART_WaitOnFlagUntilTimeout>
 80034fc:	4603      	mov	r3, r0
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d001      	beq.n	8003506 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8003502:	2303      	movs	r3, #3
 8003504:	e042      	b.n	800358c <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8003506:	68bb      	ldr	r3, [r7, #8]
 8003508:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800350a:	693b      	ldr	r3, [r7, #16]
 800350c:	881b      	ldrh	r3, [r3, #0]
 800350e:	461a      	mov	r2, r3
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003518:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	691b      	ldr	r3, [r3, #16]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d103      	bne.n	800352a <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8003522:	68bb      	ldr	r3, [r7, #8]
 8003524:	3302      	adds	r3, #2
 8003526:	60bb      	str	r3, [r7, #8]
 8003528:	e017      	b.n	800355a <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800352a:	68bb      	ldr	r3, [r7, #8]
 800352c:	3301      	adds	r3, #1
 800352e:	60bb      	str	r3, [r7, #8]
 8003530:	e013      	b.n	800355a <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	9300      	str	r3, [sp, #0]
 8003536:	697b      	ldr	r3, [r7, #20]
 8003538:	2200      	movs	r2, #0
 800353a:	2180      	movs	r1, #128	; 0x80
 800353c:	68f8      	ldr	r0, [r7, #12]
 800353e:	f000 f829 	bl	8003594 <UART_WaitOnFlagUntilTimeout>
 8003542:	4603      	mov	r3, r0
 8003544:	2b00      	cmp	r3, #0
 8003546:	d001      	beq.n	800354c <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8003548:	2303      	movs	r3, #3
 800354a:	e01f      	b.n	800358c <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	1c5a      	adds	r2, r3, #1
 8003550:	60ba      	str	r2, [r7, #8]
 8003552:	781a      	ldrb	r2, [r3, #0]
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800355e:	b29b      	uxth	r3, r3
 8003560:	2b00      	cmp	r3, #0
 8003562:	d1b7      	bne.n	80034d4 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	9300      	str	r3, [sp, #0]
 8003568:	697b      	ldr	r3, [r7, #20]
 800356a:	2200      	movs	r2, #0
 800356c:	2140      	movs	r1, #64	; 0x40
 800356e:	68f8      	ldr	r0, [r7, #12]
 8003570:	f000 f810 	bl	8003594 <UART_WaitOnFlagUntilTimeout>
 8003574:	4603      	mov	r3, r0
 8003576:	2b00      	cmp	r3, #0
 8003578:	d001      	beq.n	800357e <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800357a:	2303      	movs	r3, #3
 800357c:	e006      	b.n	800358c <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	2220      	movs	r2, #32
 8003582:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8003586:	2300      	movs	r3, #0
 8003588:	e000      	b.n	800358c <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800358a:	2302      	movs	r3, #2
  }
}
 800358c:	4618      	mov	r0, r3
 800358e:	3718      	adds	r7, #24
 8003590:	46bd      	mov	sp, r7
 8003592:	bd80      	pop	{r7, pc}

08003594 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b084      	sub	sp, #16
 8003598:	af00      	add	r7, sp, #0
 800359a:	60f8      	str	r0, [r7, #12]
 800359c:	60b9      	str	r1, [r7, #8]
 800359e:	603b      	str	r3, [r7, #0]
 80035a0:	4613      	mov	r3, r2
 80035a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035a4:	e02c      	b.n	8003600 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035a6:	69bb      	ldr	r3, [r7, #24]
 80035a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035ac:	d028      	beq.n	8003600 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80035ae:	69bb      	ldr	r3, [r7, #24]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d007      	beq.n	80035c4 <UART_WaitOnFlagUntilTimeout+0x30>
 80035b4:	f7fd fab2 	bl	8000b1c <HAL_GetTick>
 80035b8:	4602      	mov	r2, r0
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	1ad3      	subs	r3, r2, r3
 80035be:	69ba      	ldr	r2, [r7, #24]
 80035c0:	429a      	cmp	r2, r3
 80035c2:	d21d      	bcs.n	8003600 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	68da      	ldr	r2, [r3, #12]
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80035d2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	695a      	ldr	r2, [r3, #20]
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f022 0201 	bic.w	r2, r2, #1
 80035e2:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	2220      	movs	r2, #32
 80035e8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	2220      	movs	r2, #32
 80035f0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	2200      	movs	r2, #0
 80035f8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80035fc:	2303      	movs	r3, #3
 80035fe:	e00f      	b.n	8003620 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	681a      	ldr	r2, [r3, #0]
 8003606:	68bb      	ldr	r3, [r7, #8]
 8003608:	4013      	ands	r3, r2
 800360a:	68ba      	ldr	r2, [r7, #8]
 800360c:	429a      	cmp	r2, r3
 800360e:	bf0c      	ite	eq
 8003610:	2301      	moveq	r3, #1
 8003612:	2300      	movne	r3, #0
 8003614:	b2db      	uxtb	r3, r3
 8003616:	461a      	mov	r2, r3
 8003618:	79fb      	ldrb	r3, [r7, #7]
 800361a:	429a      	cmp	r2, r3
 800361c:	d0c3      	beq.n	80035a6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800361e:	2300      	movs	r3, #0
}
 8003620:	4618      	mov	r0, r3
 8003622:	3710      	adds	r7, #16
 8003624:	46bd      	mov	sp, r7
 8003626:	bd80      	pop	{r7, pc}

08003628 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800362c:	b0bd      	sub	sp, #244	; 0xf4
 800362e:	af00      	add	r7, sp, #0
 8003630:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003634:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	691b      	ldr	r3, [r3, #16]
 800363c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003640:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003644:	68d9      	ldr	r1, [r3, #12]
 8003646:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800364a:	681a      	ldr	r2, [r3, #0]
 800364c:	ea40 0301 	orr.w	r3, r0, r1
 8003650:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003652:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003656:	689a      	ldr	r2, [r3, #8]
 8003658:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800365c:	691b      	ldr	r3, [r3, #16]
 800365e:	431a      	orrs	r2, r3
 8003660:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003664:	695b      	ldr	r3, [r3, #20]
 8003666:	431a      	orrs	r2, r3
 8003668:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800366c:	69db      	ldr	r3, [r3, #28]
 800366e:	4313      	orrs	r3, r2
 8003670:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  MODIFY_REG(huart->Instance->CR1,
 8003674:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	68db      	ldr	r3, [r3, #12]
 800367c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003680:	f021 010c 	bic.w	r1, r1, #12
 8003684:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003688:	681a      	ldr	r2, [r3, #0]
 800368a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800368e:	430b      	orrs	r3, r1
 8003690:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003692:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	695b      	ldr	r3, [r3, #20]
 800369a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800369e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036a2:	6999      	ldr	r1, [r3, #24]
 80036a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036a8:	681a      	ldr	r2, [r3, #0]
 80036aa:	ea40 0301 	orr.w	r3, r0, r1
 80036ae:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80036b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036b4:	69db      	ldr	r3, [r3, #28]
 80036b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80036ba:	f040 81a5 	bne.w	8003a08 <UART_SetConfig+0x3e0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80036be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036c2:	681a      	ldr	r2, [r3, #0]
 80036c4:	4bcd      	ldr	r3, [pc, #820]	; (80039fc <UART_SetConfig+0x3d4>)
 80036c6:	429a      	cmp	r2, r3
 80036c8:	d006      	beq.n	80036d8 <UART_SetConfig+0xb0>
 80036ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036ce:	681a      	ldr	r2, [r3, #0]
 80036d0:	4bcb      	ldr	r3, [pc, #812]	; (8003a00 <UART_SetConfig+0x3d8>)
 80036d2:	429a      	cmp	r2, r3
 80036d4:	f040 80cb 	bne.w	800386e <UART_SetConfig+0x246>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80036d8:	f7ff fe62 	bl	80033a0 <HAL_RCC_GetPCLK2Freq>
 80036dc:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80036e0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80036e4:	461c      	mov	r4, r3
 80036e6:	f04f 0500 	mov.w	r5, #0
 80036ea:	4622      	mov	r2, r4
 80036ec:	462b      	mov	r3, r5
 80036ee:	1891      	adds	r1, r2, r2
 80036f0:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 80036f4:	415b      	adcs	r3, r3
 80036f6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80036fa:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80036fe:	1912      	adds	r2, r2, r4
 8003700:	eb45 0303 	adc.w	r3, r5, r3
 8003704:	f04f 0000 	mov.w	r0, #0
 8003708:	f04f 0100 	mov.w	r1, #0
 800370c:	00d9      	lsls	r1, r3, #3
 800370e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003712:	00d0      	lsls	r0, r2, #3
 8003714:	4602      	mov	r2, r0
 8003716:	460b      	mov	r3, r1
 8003718:	1911      	adds	r1, r2, r4
 800371a:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 800371e:	416b      	adcs	r3, r5
 8003720:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8003724:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	461a      	mov	r2, r3
 800372c:	f04f 0300 	mov.w	r3, #0
 8003730:	1891      	adds	r1, r2, r2
 8003732:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 8003736:	415b      	adcs	r3, r3
 8003738:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800373c:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8003740:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8003744:	f7fc fd94 	bl	8000270 <__aeabi_uldivmod>
 8003748:	4602      	mov	r2, r0
 800374a:	460b      	mov	r3, r1
 800374c:	4bad      	ldr	r3, [pc, #692]	; (8003a04 <UART_SetConfig+0x3dc>)
 800374e:	fba3 2302 	umull	r2, r3, r3, r2
 8003752:	095b      	lsrs	r3, r3, #5
 8003754:	011e      	lsls	r6, r3, #4
 8003756:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800375a:	461c      	mov	r4, r3
 800375c:	f04f 0500 	mov.w	r5, #0
 8003760:	4622      	mov	r2, r4
 8003762:	462b      	mov	r3, r5
 8003764:	1891      	adds	r1, r2, r2
 8003766:	67b9      	str	r1, [r7, #120]	; 0x78
 8003768:	415b      	adcs	r3, r3
 800376a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800376c:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8003770:	1912      	adds	r2, r2, r4
 8003772:	eb45 0303 	adc.w	r3, r5, r3
 8003776:	f04f 0000 	mov.w	r0, #0
 800377a:	f04f 0100 	mov.w	r1, #0
 800377e:	00d9      	lsls	r1, r3, #3
 8003780:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003784:	00d0      	lsls	r0, r2, #3
 8003786:	4602      	mov	r2, r0
 8003788:	460b      	mov	r3, r1
 800378a:	1911      	adds	r1, r2, r4
 800378c:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8003790:	416b      	adcs	r3, r5
 8003792:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8003796:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	461a      	mov	r2, r3
 800379e:	f04f 0300 	mov.w	r3, #0
 80037a2:	1891      	adds	r1, r2, r2
 80037a4:	6739      	str	r1, [r7, #112]	; 0x70
 80037a6:	415b      	adcs	r3, r3
 80037a8:	677b      	str	r3, [r7, #116]	; 0x74
 80037aa:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80037ae:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 80037b2:	f7fc fd5d 	bl	8000270 <__aeabi_uldivmod>
 80037b6:	4602      	mov	r2, r0
 80037b8:	460b      	mov	r3, r1
 80037ba:	4b92      	ldr	r3, [pc, #584]	; (8003a04 <UART_SetConfig+0x3dc>)
 80037bc:	fba3 1302 	umull	r1, r3, r3, r2
 80037c0:	095b      	lsrs	r3, r3, #5
 80037c2:	2164      	movs	r1, #100	; 0x64
 80037c4:	fb01 f303 	mul.w	r3, r1, r3
 80037c8:	1ad3      	subs	r3, r2, r3
 80037ca:	00db      	lsls	r3, r3, #3
 80037cc:	3332      	adds	r3, #50	; 0x32
 80037ce:	4a8d      	ldr	r2, [pc, #564]	; (8003a04 <UART_SetConfig+0x3dc>)
 80037d0:	fba2 2303 	umull	r2, r3, r2, r3
 80037d4:	095b      	lsrs	r3, r3, #5
 80037d6:	005b      	lsls	r3, r3, #1
 80037d8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80037dc:	441e      	add	r6, r3
 80037de:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80037e2:	4618      	mov	r0, r3
 80037e4:	f04f 0100 	mov.w	r1, #0
 80037e8:	4602      	mov	r2, r0
 80037ea:	460b      	mov	r3, r1
 80037ec:	1894      	adds	r4, r2, r2
 80037ee:	66bc      	str	r4, [r7, #104]	; 0x68
 80037f0:	415b      	adcs	r3, r3
 80037f2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80037f4:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80037f8:	1812      	adds	r2, r2, r0
 80037fa:	eb41 0303 	adc.w	r3, r1, r3
 80037fe:	f04f 0400 	mov.w	r4, #0
 8003802:	f04f 0500 	mov.w	r5, #0
 8003806:	00dd      	lsls	r5, r3, #3
 8003808:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800380c:	00d4      	lsls	r4, r2, #3
 800380e:	4622      	mov	r2, r4
 8003810:	462b      	mov	r3, r5
 8003812:	1814      	adds	r4, r2, r0
 8003814:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 8003818:	414b      	adcs	r3, r1
 800381a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800381e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	461a      	mov	r2, r3
 8003826:	f04f 0300 	mov.w	r3, #0
 800382a:	1891      	adds	r1, r2, r2
 800382c:	6639      	str	r1, [r7, #96]	; 0x60
 800382e:	415b      	adcs	r3, r3
 8003830:	667b      	str	r3, [r7, #100]	; 0x64
 8003832:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8003836:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800383a:	f7fc fd19 	bl	8000270 <__aeabi_uldivmod>
 800383e:	4602      	mov	r2, r0
 8003840:	460b      	mov	r3, r1
 8003842:	4b70      	ldr	r3, [pc, #448]	; (8003a04 <UART_SetConfig+0x3dc>)
 8003844:	fba3 1302 	umull	r1, r3, r3, r2
 8003848:	095b      	lsrs	r3, r3, #5
 800384a:	2164      	movs	r1, #100	; 0x64
 800384c:	fb01 f303 	mul.w	r3, r1, r3
 8003850:	1ad3      	subs	r3, r2, r3
 8003852:	00db      	lsls	r3, r3, #3
 8003854:	3332      	adds	r3, #50	; 0x32
 8003856:	4a6b      	ldr	r2, [pc, #428]	; (8003a04 <UART_SetConfig+0x3dc>)
 8003858:	fba2 2303 	umull	r2, r3, r2, r3
 800385c:	095b      	lsrs	r3, r3, #5
 800385e:	f003 0207 	and.w	r2, r3, #7
 8003862:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4432      	add	r2, r6
 800386a:	609a      	str	r2, [r3, #8]
 800386c:	e26d      	b.n	8003d4a <UART_SetConfig+0x722>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800386e:	f7ff fd83 	bl	8003378 <HAL_RCC_GetPCLK1Freq>
 8003872:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003876:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800387a:	461c      	mov	r4, r3
 800387c:	f04f 0500 	mov.w	r5, #0
 8003880:	4622      	mov	r2, r4
 8003882:	462b      	mov	r3, r5
 8003884:	1891      	adds	r1, r2, r2
 8003886:	65b9      	str	r1, [r7, #88]	; 0x58
 8003888:	415b      	adcs	r3, r3
 800388a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800388c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003890:	1912      	adds	r2, r2, r4
 8003892:	eb45 0303 	adc.w	r3, r5, r3
 8003896:	f04f 0000 	mov.w	r0, #0
 800389a:	f04f 0100 	mov.w	r1, #0
 800389e:	00d9      	lsls	r1, r3, #3
 80038a0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80038a4:	00d0      	lsls	r0, r2, #3
 80038a6:	4602      	mov	r2, r0
 80038a8:	460b      	mov	r3, r1
 80038aa:	1911      	adds	r1, r2, r4
 80038ac:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 80038b0:	416b      	adcs	r3, r5
 80038b2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80038b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	461a      	mov	r2, r3
 80038be:	f04f 0300 	mov.w	r3, #0
 80038c2:	1891      	adds	r1, r2, r2
 80038c4:	6539      	str	r1, [r7, #80]	; 0x50
 80038c6:	415b      	adcs	r3, r3
 80038c8:	657b      	str	r3, [r7, #84]	; 0x54
 80038ca:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80038ce:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 80038d2:	f7fc fccd 	bl	8000270 <__aeabi_uldivmod>
 80038d6:	4602      	mov	r2, r0
 80038d8:	460b      	mov	r3, r1
 80038da:	4b4a      	ldr	r3, [pc, #296]	; (8003a04 <UART_SetConfig+0x3dc>)
 80038dc:	fba3 2302 	umull	r2, r3, r3, r2
 80038e0:	095b      	lsrs	r3, r3, #5
 80038e2:	011e      	lsls	r6, r3, #4
 80038e4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80038e8:	461c      	mov	r4, r3
 80038ea:	f04f 0500 	mov.w	r5, #0
 80038ee:	4622      	mov	r2, r4
 80038f0:	462b      	mov	r3, r5
 80038f2:	1891      	adds	r1, r2, r2
 80038f4:	64b9      	str	r1, [r7, #72]	; 0x48
 80038f6:	415b      	adcs	r3, r3
 80038f8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80038fa:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80038fe:	1912      	adds	r2, r2, r4
 8003900:	eb45 0303 	adc.w	r3, r5, r3
 8003904:	f04f 0000 	mov.w	r0, #0
 8003908:	f04f 0100 	mov.w	r1, #0
 800390c:	00d9      	lsls	r1, r3, #3
 800390e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003912:	00d0      	lsls	r0, r2, #3
 8003914:	4602      	mov	r2, r0
 8003916:	460b      	mov	r3, r1
 8003918:	1911      	adds	r1, r2, r4
 800391a:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 800391e:	416b      	adcs	r3, r5
 8003920:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003924:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	461a      	mov	r2, r3
 800392c:	f04f 0300 	mov.w	r3, #0
 8003930:	1891      	adds	r1, r2, r2
 8003932:	6439      	str	r1, [r7, #64]	; 0x40
 8003934:	415b      	adcs	r3, r3
 8003936:	647b      	str	r3, [r7, #68]	; 0x44
 8003938:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800393c:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8003940:	f7fc fc96 	bl	8000270 <__aeabi_uldivmod>
 8003944:	4602      	mov	r2, r0
 8003946:	460b      	mov	r3, r1
 8003948:	4b2e      	ldr	r3, [pc, #184]	; (8003a04 <UART_SetConfig+0x3dc>)
 800394a:	fba3 1302 	umull	r1, r3, r3, r2
 800394e:	095b      	lsrs	r3, r3, #5
 8003950:	2164      	movs	r1, #100	; 0x64
 8003952:	fb01 f303 	mul.w	r3, r1, r3
 8003956:	1ad3      	subs	r3, r2, r3
 8003958:	00db      	lsls	r3, r3, #3
 800395a:	3332      	adds	r3, #50	; 0x32
 800395c:	4a29      	ldr	r2, [pc, #164]	; (8003a04 <UART_SetConfig+0x3dc>)
 800395e:	fba2 2303 	umull	r2, r3, r2, r3
 8003962:	095b      	lsrs	r3, r3, #5
 8003964:	005b      	lsls	r3, r3, #1
 8003966:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800396a:	441e      	add	r6, r3
 800396c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003970:	4618      	mov	r0, r3
 8003972:	f04f 0100 	mov.w	r1, #0
 8003976:	4602      	mov	r2, r0
 8003978:	460b      	mov	r3, r1
 800397a:	1894      	adds	r4, r2, r2
 800397c:	63bc      	str	r4, [r7, #56]	; 0x38
 800397e:	415b      	adcs	r3, r3
 8003980:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003982:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003986:	1812      	adds	r2, r2, r0
 8003988:	eb41 0303 	adc.w	r3, r1, r3
 800398c:	f04f 0400 	mov.w	r4, #0
 8003990:	f04f 0500 	mov.w	r5, #0
 8003994:	00dd      	lsls	r5, r3, #3
 8003996:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800399a:	00d4      	lsls	r4, r2, #3
 800399c:	4622      	mov	r2, r4
 800399e:	462b      	mov	r3, r5
 80039a0:	1814      	adds	r4, r2, r0
 80039a2:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 80039a6:	414b      	adcs	r3, r1
 80039a8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80039ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	461a      	mov	r2, r3
 80039b4:	f04f 0300 	mov.w	r3, #0
 80039b8:	1891      	adds	r1, r2, r2
 80039ba:	6339      	str	r1, [r7, #48]	; 0x30
 80039bc:	415b      	adcs	r3, r3
 80039be:	637b      	str	r3, [r7, #52]	; 0x34
 80039c0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80039c4:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80039c8:	f7fc fc52 	bl	8000270 <__aeabi_uldivmod>
 80039cc:	4602      	mov	r2, r0
 80039ce:	460b      	mov	r3, r1
 80039d0:	4b0c      	ldr	r3, [pc, #48]	; (8003a04 <UART_SetConfig+0x3dc>)
 80039d2:	fba3 1302 	umull	r1, r3, r3, r2
 80039d6:	095b      	lsrs	r3, r3, #5
 80039d8:	2164      	movs	r1, #100	; 0x64
 80039da:	fb01 f303 	mul.w	r3, r1, r3
 80039de:	1ad3      	subs	r3, r2, r3
 80039e0:	00db      	lsls	r3, r3, #3
 80039e2:	3332      	adds	r3, #50	; 0x32
 80039e4:	4a07      	ldr	r2, [pc, #28]	; (8003a04 <UART_SetConfig+0x3dc>)
 80039e6:	fba2 2303 	umull	r2, r3, r2, r3
 80039ea:	095b      	lsrs	r3, r3, #5
 80039ec:	f003 0207 	and.w	r2, r3, #7
 80039f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4432      	add	r2, r6
 80039f8:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80039fa:	e1a6      	b.n	8003d4a <UART_SetConfig+0x722>
 80039fc:	40011000 	.word	0x40011000
 8003a00:	40011400 	.word	0x40011400
 8003a04:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003a08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a0c:	681a      	ldr	r2, [r3, #0]
 8003a0e:	4bd1      	ldr	r3, [pc, #836]	; (8003d54 <UART_SetConfig+0x72c>)
 8003a10:	429a      	cmp	r2, r3
 8003a12:	d006      	beq.n	8003a22 <UART_SetConfig+0x3fa>
 8003a14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a18:	681a      	ldr	r2, [r3, #0]
 8003a1a:	4bcf      	ldr	r3, [pc, #828]	; (8003d58 <UART_SetConfig+0x730>)
 8003a1c:	429a      	cmp	r2, r3
 8003a1e:	f040 80ca 	bne.w	8003bb6 <UART_SetConfig+0x58e>
      pclk = HAL_RCC_GetPCLK2Freq();
 8003a22:	f7ff fcbd 	bl	80033a0 <HAL_RCC_GetPCLK2Freq>
 8003a26:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003a2a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003a2e:	461c      	mov	r4, r3
 8003a30:	f04f 0500 	mov.w	r5, #0
 8003a34:	4622      	mov	r2, r4
 8003a36:	462b      	mov	r3, r5
 8003a38:	1891      	adds	r1, r2, r2
 8003a3a:	62b9      	str	r1, [r7, #40]	; 0x28
 8003a3c:	415b      	adcs	r3, r3
 8003a3e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a40:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003a44:	1912      	adds	r2, r2, r4
 8003a46:	eb45 0303 	adc.w	r3, r5, r3
 8003a4a:	f04f 0000 	mov.w	r0, #0
 8003a4e:	f04f 0100 	mov.w	r1, #0
 8003a52:	00d9      	lsls	r1, r3, #3
 8003a54:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003a58:	00d0      	lsls	r0, r2, #3
 8003a5a:	4602      	mov	r2, r0
 8003a5c:	460b      	mov	r3, r1
 8003a5e:	eb12 0a04 	adds.w	sl, r2, r4
 8003a62:	eb43 0b05 	adc.w	fp, r3, r5
 8003a66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	f04f 0100 	mov.w	r1, #0
 8003a72:	f04f 0200 	mov.w	r2, #0
 8003a76:	f04f 0300 	mov.w	r3, #0
 8003a7a:	008b      	lsls	r3, r1, #2
 8003a7c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003a80:	0082      	lsls	r2, r0, #2
 8003a82:	4650      	mov	r0, sl
 8003a84:	4659      	mov	r1, fp
 8003a86:	f7fc fbf3 	bl	8000270 <__aeabi_uldivmod>
 8003a8a:	4602      	mov	r2, r0
 8003a8c:	460b      	mov	r3, r1
 8003a8e:	4bb3      	ldr	r3, [pc, #716]	; (8003d5c <UART_SetConfig+0x734>)
 8003a90:	fba3 2302 	umull	r2, r3, r3, r2
 8003a94:	095b      	lsrs	r3, r3, #5
 8003a96:	011e      	lsls	r6, r3, #4
 8003a98:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	f04f 0100 	mov.w	r1, #0
 8003aa2:	4602      	mov	r2, r0
 8003aa4:	460b      	mov	r3, r1
 8003aa6:	1894      	adds	r4, r2, r2
 8003aa8:	623c      	str	r4, [r7, #32]
 8003aaa:	415b      	adcs	r3, r3
 8003aac:	627b      	str	r3, [r7, #36]	; 0x24
 8003aae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003ab2:	1812      	adds	r2, r2, r0
 8003ab4:	eb41 0303 	adc.w	r3, r1, r3
 8003ab8:	f04f 0400 	mov.w	r4, #0
 8003abc:	f04f 0500 	mov.w	r5, #0
 8003ac0:	00dd      	lsls	r5, r3, #3
 8003ac2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003ac6:	00d4      	lsls	r4, r2, #3
 8003ac8:	4622      	mov	r2, r4
 8003aca:	462b      	mov	r3, r5
 8003acc:	1814      	adds	r4, r2, r0
 8003ace:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 8003ad2:	414b      	adcs	r3, r1
 8003ad4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003ad8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	4618      	mov	r0, r3
 8003ae0:	f04f 0100 	mov.w	r1, #0
 8003ae4:	f04f 0200 	mov.w	r2, #0
 8003ae8:	f04f 0300 	mov.w	r3, #0
 8003aec:	008b      	lsls	r3, r1, #2
 8003aee:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003af2:	0082      	lsls	r2, r0, #2
 8003af4:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8003af8:	f7fc fbba 	bl	8000270 <__aeabi_uldivmod>
 8003afc:	4602      	mov	r2, r0
 8003afe:	460b      	mov	r3, r1
 8003b00:	4b96      	ldr	r3, [pc, #600]	; (8003d5c <UART_SetConfig+0x734>)
 8003b02:	fba3 1302 	umull	r1, r3, r3, r2
 8003b06:	095b      	lsrs	r3, r3, #5
 8003b08:	2164      	movs	r1, #100	; 0x64
 8003b0a:	fb01 f303 	mul.w	r3, r1, r3
 8003b0e:	1ad3      	subs	r3, r2, r3
 8003b10:	011b      	lsls	r3, r3, #4
 8003b12:	3332      	adds	r3, #50	; 0x32
 8003b14:	4a91      	ldr	r2, [pc, #580]	; (8003d5c <UART_SetConfig+0x734>)
 8003b16:	fba2 2303 	umull	r2, r3, r2, r3
 8003b1a:	095b      	lsrs	r3, r3, #5
 8003b1c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b20:	441e      	add	r6, r3
 8003b22:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003b26:	4618      	mov	r0, r3
 8003b28:	f04f 0100 	mov.w	r1, #0
 8003b2c:	4602      	mov	r2, r0
 8003b2e:	460b      	mov	r3, r1
 8003b30:	1894      	adds	r4, r2, r2
 8003b32:	61bc      	str	r4, [r7, #24]
 8003b34:	415b      	adcs	r3, r3
 8003b36:	61fb      	str	r3, [r7, #28]
 8003b38:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b3c:	1812      	adds	r2, r2, r0
 8003b3e:	eb41 0303 	adc.w	r3, r1, r3
 8003b42:	f04f 0400 	mov.w	r4, #0
 8003b46:	f04f 0500 	mov.w	r5, #0
 8003b4a:	00dd      	lsls	r5, r3, #3
 8003b4c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003b50:	00d4      	lsls	r4, r2, #3
 8003b52:	4622      	mov	r2, r4
 8003b54:	462b      	mov	r3, r5
 8003b56:	1814      	adds	r4, r2, r0
 8003b58:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 8003b5c:	414b      	adcs	r3, r1
 8003b5e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003b62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	4618      	mov	r0, r3
 8003b6a:	f04f 0100 	mov.w	r1, #0
 8003b6e:	f04f 0200 	mov.w	r2, #0
 8003b72:	f04f 0300 	mov.w	r3, #0
 8003b76:	008b      	lsls	r3, r1, #2
 8003b78:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003b7c:	0082      	lsls	r2, r0, #2
 8003b7e:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8003b82:	f7fc fb75 	bl	8000270 <__aeabi_uldivmod>
 8003b86:	4602      	mov	r2, r0
 8003b88:	460b      	mov	r3, r1
 8003b8a:	4b74      	ldr	r3, [pc, #464]	; (8003d5c <UART_SetConfig+0x734>)
 8003b8c:	fba3 1302 	umull	r1, r3, r3, r2
 8003b90:	095b      	lsrs	r3, r3, #5
 8003b92:	2164      	movs	r1, #100	; 0x64
 8003b94:	fb01 f303 	mul.w	r3, r1, r3
 8003b98:	1ad3      	subs	r3, r2, r3
 8003b9a:	011b      	lsls	r3, r3, #4
 8003b9c:	3332      	adds	r3, #50	; 0x32
 8003b9e:	4a6f      	ldr	r2, [pc, #444]	; (8003d5c <UART_SetConfig+0x734>)
 8003ba0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ba4:	095b      	lsrs	r3, r3, #5
 8003ba6:	f003 020f 	and.w	r2, r3, #15
 8003baa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4432      	add	r2, r6
 8003bb2:	609a      	str	r2, [r3, #8]
 8003bb4:	e0c9      	b.n	8003d4a <UART_SetConfig+0x722>
      pclk = HAL_RCC_GetPCLK1Freq();
 8003bb6:	f7ff fbdf 	bl	8003378 <HAL_RCC_GetPCLK1Freq>
 8003bba:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003bbe:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003bc2:	461c      	mov	r4, r3
 8003bc4:	f04f 0500 	mov.w	r5, #0
 8003bc8:	4622      	mov	r2, r4
 8003bca:	462b      	mov	r3, r5
 8003bcc:	1891      	adds	r1, r2, r2
 8003bce:	6139      	str	r1, [r7, #16]
 8003bd0:	415b      	adcs	r3, r3
 8003bd2:	617b      	str	r3, [r7, #20]
 8003bd4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003bd8:	1912      	adds	r2, r2, r4
 8003bda:	eb45 0303 	adc.w	r3, r5, r3
 8003bde:	f04f 0000 	mov.w	r0, #0
 8003be2:	f04f 0100 	mov.w	r1, #0
 8003be6:	00d9      	lsls	r1, r3, #3
 8003be8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003bec:	00d0      	lsls	r0, r2, #3
 8003bee:	4602      	mov	r2, r0
 8003bf0:	460b      	mov	r3, r1
 8003bf2:	eb12 0804 	adds.w	r8, r2, r4
 8003bf6:	eb43 0905 	adc.w	r9, r3, r5
 8003bfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	4618      	mov	r0, r3
 8003c02:	f04f 0100 	mov.w	r1, #0
 8003c06:	f04f 0200 	mov.w	r2, #0
 8003c0a:	f04f 0300 	mov.w	r3, #0
 8003c0e:	008b      	lsls	r3, r1, #2
 8003c10:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003c14:	0082      	lsls	r2, r0, #2
 8003c16:	4640      	mov	r0, r8
 8003c18:	4649      	mov	r1, r9
 8003c1a:	f7fc fb29 	bl	8000270 <__aeabi_uldivmod>
 8003c1e:	4602      	mov	r2, r0
 8003c20:	460b      	mov	r3, r1
 8003c22:	4b4e      	ldr	r3, [pc, #312]	; (8003d5c <UART_SetConfig+0x734>)
 8003c24:	fba3 2302 	umull	r2, r3, r3, r2
 8003c28:	095b      	lsrs	r3, r3, #5
 8003c2a:	011e      	lsls	r6, r3, #4
 8003c2c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003c30:	4618      	mov	r0, r3
 8003c32:	f04f 0100 	mov.w	r1, #0
 8003c36:	4602      	mov	r2, r0
 8003c38:	460b      	mov	r3, r1
 8003c3a:	1894      	adds	r4, r2, r2
 8003c3c:	60bc      	str	r4, [r7, #8]
 8003c3e:	415b      	adcs	r3, r3
 8003c40:	60fb      	str	r3, [r7, #12]
 8003c42:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003c46:	1812      	adds	r2, r2, r0
 8003c48:	eb41 0303 	adc.w	r3, r1, r3
 8003c4c:	f04f 0400 	mov.w	r4, #0
 8003c50:	f04f 0500 	mov.w	r5, #0
 8003c54:	00dd      	lsls	r5, r3, #3
 8003c56:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003c5a:	00d4      	lsls	r4, r2, #3
 8003c5c:	4622      	mov	r2, r4
 8003c5e:	462b      	mov	r3, r5
 8003c60:	1814      	adds	r4, r2, r0
 8003c62:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 8003c66:	414b      	adcs	r3, r1
 8003c68:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003c6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	4618      	mov	r0, r3
 8003c74:	f04f 0100 	mov.w	r1, #0
 8003c78:	f04f 0200 	mov.w	r2, #0
 8003c7c:	f04f 0300 	mov.w	r3, #0
 8003c80:	008b      	lsls	r3, r1, #2
 8003c82:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003c86:	0082      	lsls	r2, r0, #2
 8003c88:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003c8c:	f7fc faf0 	bl	8000270 <__aeabi_uldivmod>
 8003c90:	4602      	mov	r2, r0
 8003c92:	460b      	mov	r3, r1
 8003c94:	4b31      	ldr	r3, [pc, #196]	; (8003d5c <UART_SetConfig+0x734>)
 8003c96:	fba3 1302 	umull	r1, r3, r3, r2
 8003c9a:	095b      	lsrs	r3, r3, #5
 8003c9c:	2164      	movs	r1, #100	; 0x64
 8003c9e:	fb01 f303 	mul.w	r3, r1, r3
 8003ca2:	1ad3      	subs	r3, r2, r3
 8003ca4:	011b      	lsls	r3, r3, #4
 8003ca6:	3332      	adds	r3, #50	; 0x32
 8003ca8:	4a2c      	ldr	r2, [pc, #176]	; (8003d5c <UART_SetConfig+0x734>)
 8003caa:	fba2 2303 	umull	r2, r3, r2, r3
 8003cae:	095b      	lsrs	r3, r3, #5
 8003cb0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003cb4:	441e      	add	r6, r3
 8003cb6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f04f 0100 	mov.w	r1, #0
 8003cc0:	4602      	mov	r2, r0
 8003cc2:	460b      	mov	r3, r1
 8003cc4:	1894      	adds	r4, r2, r2
 8003cc6:	603c      	str	r4, [r7, #0]
 8003cc8:	415b      	adcs	r3, r3
 8003cca:	607b      	str	r3, [r7, #4]
 8003ccc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003cd0:	1812      	adds	r2, r2, r0
 8003cd2:	eb41 0303 	adc.w	r3, r1, r3
 8003cd6:	f04f 0400 	mov.w	r4, #0
 8003cda:	f04f 0500 	mov.w	r5, #0
 8003cde:	00dd      	lsls	r5, r3, #3
 8003ce0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003ce4:	00d4      	lsls	r4, r2, #3
 8003ce6:	4622      	mov	r2, r4
 8003ce8:	462b      	mov	r3, r5
 8003cea:	1814      	adds	r4, r2, r0
 8003cec:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 8003cf0:	414b      	adcs	r3, r1
 8003cf2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003cf6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	f04f 0100 	mov.w	r1, #0
 8003d02:	f04f 0200 	mov.w	r2, #0
 8003d06:	f04f 0300 	mov.w	r3, #0
 8003d0a:	008b      	lsls	r3, r1, #2
 8003d0c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003d10:	0082      	lsls	r2, r0, #2
 8003d12:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8003d16:	f7fc faab 	bl	8000270 <__aeabi_uldivmod>
 8003d1a:	4602      	mov	r2, r0
 8003d1c:	460b      	mov	r3, r1
 8003d1e:	4b0f      	ldr	r3, [pc, #60]	; (8003d5c <UART_SetConfig+0x734>)
 8003d20:	fba3 1302 	umull	r1, r3, r3, r2
 8003d24:	095b      	lsrs	r3, r3, #5
 8003d26:	2164      	movs	r1, #100	; 0x64
 8003d28:	fb01 f303 	mul.w	r3, r1, r3
 8003d2c:	1ad3      	subs	r3, r2, r3
 8003d2e:	011b      	lsls	r3, r3, #4
 8003d30:	3332      	adds	r3, #50	; 0x32
 8003d32:	4a0a      	ldr	r2, [pc, #40]	; (8003d5c <UART_SetConfig+0x734>)
 8003d34:	fba2 2303 	umull	r2, r3, r2, r3
 8003d38:	095b      	lsrs	r3, r3, #5
 8003d3a:	f003 020f 	and.w	r2, r3, #15
 8003d3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4432      	add	r2, r6
 8003d46:	609a      	str	r2, [r3, #8]
}
 8003d48:	e7ff      	b.n	8003d4a <UART_SetConfig+0x722>
 8003d4a:	bf00      	nop
 8003d4c:	37f4      	adds	r7, #244	; 0xf4
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d54:	40011000 	.word	0x40011000
 8003d58:	40011400 	.word	0x40011400
 8003d5c:	51eb851f 	.word	0x51eb851f

08003d60 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003d60:	b084      	sub	sp, #16
 8003d62:	b580      	push	{r7, lr}
 8003d64:	b084      	sub	sp, #16
 8003d66:	af00      	add	r7, sp, #0
 8003d68:	6078      	str	r0, [r7, #4]
 8003d6a:	f107 001c 	add.w	r0, r7, #28
 8003d6e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d74:	2b01      	cmp	r3, #1
 8003d76:	d122      	bne.n	8003dbe <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d7c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	68db      	ldr	r3, [r3, #12]
 8003d88:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003d8c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d90:	687a      	ldr	r2, [r7, #4]
 8003d92:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	68db      	ldr	r3, [r3, #12]
 8003d98:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003da0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003da2:	2b01      	cmp	r3, #1
 8003da4:	d105      	bne.n	8003db2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	68db      	ldr	r3, [r3, #12]
 8003daa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8003db2:	6878      	ldr	r0, [r7, #4]
 8003db4:	f000 f94a 	bl	800404c <USB_CoreReset>
 8003db8:	4603      	mov	r3, r0
 8003dba:	73fb      	strb	r3, [r7, #15]
 8003dbc:	e01a      	b.n	8003df4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	68db      	ldr	r3, [r3, #12]
 8003dc2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8003dca:	6878      	ldr	r0, [r7, #4]
 8003dcc:	f000 f93e 	bl	800404c <USB_CoreReset>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003dd4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d106      	bne.n	8003de8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dde:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	639a      	str	r2, [r3, #56]	; 0x38
 8003de6:	e005      	b.n	8003df4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dec:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003df4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003df6:	2b01      	cmp	r3, #1
 8003df8:	d10b      	bne.n	8003e12 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	689b      	ldr	r3, [r3, #8]
 8003dfe:	f043 0206 	orr.w	r2, r3, #6
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	689b      	ldr	r3, [r3, #8]
 8003e0a:	f043 0220 	orr.w	r2, r3, #32
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003e12:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e14:	4618      	mov	r0, r3
 8003e16:	3710      	adds	r7, #16
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003e1e:	b004      	add	sp, #16
 8003e20:	4770      	bx	lr

08003e22 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003e22:	b480      	push	{r7}
 8003e24:	b083      	sub	sp, #12
 8003e26:	af00      	add	r7, sp, #0
 8003e28:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	689b      	ldr	r3, [r3, #8]
 8003e2e:	f043 0201 	orr.w	r2, r3, #1
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003e36:	2300      	movs	r3, #0
}
 8003e38:	4618      	mov	r0, r3
 8003e3a:	370c      	adds	r7, #12
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e42:	4770      	bx	lr

08003e44 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003e44:	b480      	push	{r7}
 8003e46:	b083      	sub	sp, #12
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	689b      	ldr	r3, [r3, #8]
 8003e50:	f023 0201 	bic.w	r2, r3, #1
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003e58:	2300      	movs	r3, #0
}
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	370c      	adds	r7, #12
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e64:	4770      	bx	lr

08003e66 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003e66:	b580      	push	{r7, lr}
 8003e68:	b082      	sub	sp, #8
 8003e6a:	af00      	add	r7, sp, #0
 8003e6c:	6078      	str	r0, [r7, #4]
 8003e6e:	460b      	mov	r3, r1
 8003e70:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	68db      	ldr	r3, [r3, #12]
 8003e76:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003e7e:	78fb      	ldrb	r3, [r7, #3]
 8003e80:	2b01      	cmp	r3, #1
 8003e82:	d106      	bne.n	8003e92 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	68db      	ldr	r3, [r3, #12]
 8003e88:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	60da      	str	r2, [r3, #12]
 8003e90:	e00b      	b.n	8003eaa <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8003e92:	78fb      	ldrb	r3, [r7, #3]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d106      	bne.n	8003ea6 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	68db      	ldr	r3, [r3, #12]
 8003e9c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	60da      	str	r2, [r3, #12]
 8003ea4:	e001      	b.n	8003eaa <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	e003      	b.n	8003eb2 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8003eaa:	2032      	movs	r0, #50	; 0x32
 8003eac:	f7fc fe42 	bl	8000b34 <HAL_Delay>

  return HAL_OK;
 8003eb0:	2300      	movs	r3, #0
}
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	3708      	adds	r7, #8
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bd80      	pop	{r7, pc}
	...

08003ebc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	b085      	sub	sp, #20
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
 8003ec4:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	019b      	lsls	r3, r3, #6
 8003ece:	f043 0220 	orr.w	r2, r3, #32
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	3301      	adds	r3, #1
 8003eda:	60fb      	str	r3, [r7, #12]
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	4a09      	ldr	r2, [pc, #36]	; (8003f04 <USB_FlushTxFifo+0x48>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d901      	bls.n	8003ee8 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8003ee4:	2303      	movs	r3, #3
 8003ee6:	e006      	b.n	8003ef6 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	691b      	ldr	r3, [r3, #16]
 8003eec:	f003 0320 	and.w	r3, r3, #32
 8003ef0:	2b20      	cmp	r3, #32
 8003ef2:	d0f0      	beq.n	8003ed6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8003ef4:	2300      	movs	r3, #0
}
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	3714      	adds	r7, #20
 8003efa:	46bd      	mov	sp, r7
 8003efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f00:	4770      	bx	lr
 8003f02:	bf00      	nop
 8003f04:	00030d40 	.word	0x00030d40

08003f08 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003f08:	b480      	push	{r7}
 8003f0a:	b085      	sub	sp, #20
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8003f10:	2300      	movs	r3, #0
 8003f12:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2210      	movs	r2, #16
 8003f18:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	3301      	adds	r3, #1
 8003f1e:	60fb      	str	r3, [r7, #12]
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	4a09      	ldr	r2, [pc, #36]	; (8003f48 <USB_FlushRxFifo+0x40>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d901      	bls.n	8003f2c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8003f28:	2303      	movs	r3, #3
 8003f2a:	e006      	b.n	8003f3a <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	691b      	ldr	r3, [r3, #16]
 8003f30:	f003 0310 	and.w	r3, r3, #16
 8003f34:	2b10      	cmp	r3, #16
 8003f36:	d0f0      	beq.n	8003f1a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8003f38:	2300      	movs	r3, #0
}
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	3714      	adds	r7, #20
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f44:	4770      	bx	lr
 8003f46:	bf00      	nop
 8003f48:	00030d40 	.word	0x00030d40

08003f4c <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	b089      	sub	sp, #36	; 0x24
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	60f8      	str	r0, [r7, #12]
 8003f54:	60b9      	str	r1, [r7, #8]
 8003f56:	4611      	mov	r1, r2
 8003f58:	461a      	mov	r2, r3
 8003f5a:	460b      	mov	r3, r1
 8003f5c:	71fb      	strb	r3, [r7, #7]
 8003f5e:	4613      	mov	r3, r2
 8003f60:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8003f66:	68bb      	ldr	r3, [r7, #8]
 8003f68:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8003f6a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d11a      	bne.n	8003fa8 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8003f72:	88bb      	ldrh	r3, [r7, #4]
 8003f74:	3303      	adds	r3, #3
 8003f76:	089b      	lsrs	r3, r3, #2
 8003f78:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	61bb      	str	r3, [r7, #24]
 8003f7e:	e00f      	b.n	8003fa0 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8003f80:	79fb      	ldrb	r3, [r7, #7]
 8003f82:	031a      	lsls	r2, r3, #12
 8003f84:	697b      	ldr	r3, [r7, #20]
 8003f86:	4413      	add	r3, r2
 8003f88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f8c:	461a      	mov	r2, r3
 8003f8e:	69fb      	ldr	r3, [r7, #28]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	6013      	str	r3, [r2, #0]
      pSrc++;
 8003f94:	69fb      	ldr	r3, [r7, #28]
 8003f96:	3304      	adds	r3, #4
 8003f98:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8003f9a:	69bb      	ldr	r3, [r7, #24]
 8003f9c:	3301      	adds	r3, #1
 8003f9e:	61bb      	str	r3, [r7, #24]
 8003fa0:	69ba      	ldr	r2, [r7, #24]
 8003fa2:	693b      	ldr	r3, [r7, #16]
 8003fa4:	429a      	cmp	r2, r3
 8003fa6:	d3eb      	bcc.n	8003f80 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8003fa8:	2300      	movs	r3, #0
}
 8003faa:	4618      	mov	r0, r3
 8003fac:	3724      	adds	r7, #36	; 0x24
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb4:	4770      	bx	lr

08003fb6 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8003fb6:	b480      	push	{r7}
 8003fb8:	b089      	sub	sp, #36	; 0x24
 8003fba:	af00      	add	r7, sp, #0
 8003fbc:	60f8      	str	r0, [r7, #12]
 8003fbe:	60b9      	str	r1, [r7, #8]
 8003fc0:	4613      	mov	r3, r2
 8003fc2:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8003fc8:	68bb      	ldr	r3, [r7, #8]
 8003fca:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8003fcc:	88fb      	ldrh	r3, [r7, #6]
 8003fce:	3303      	adds	r3, #3
 8003fd0:	089b      	lsrs	r3, r3, #2
 8003fd2:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	61bb      	str	r3, [r7, #24]
 8003fd8:	e00b      	b.n	8003ff2 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fe0:	681a      	ldr	r2, [r3, #0]
 8003fe2:	69fb      	ldr	r3, [r7, #28]
 8003fe4:	601a      	str	r2, [r3, #0]
    pDest++;
 8003fe6:	69fb      	ldr	r3, [r7, #28]
 8003fe8:	3304      	adds	r3, #4
 8003fea:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8003fec:	69bb      	ldr	r3, [r7, #24]
 8003fee:	3301      	adds	r3, #1
 8003ff0:	61bb      	str	r3, [r7, #24]
 8003ff2:	69ba      	ldr	r2, [r7, #24]
 8003ff4:	693b      	ldr	r3, [r7, #16]
 8003ff6:	429a      	cmp	r2, r3
 8003ff8:	d3ef      	bcc.n	8003fda <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8003ffa:	69fb      	ldr	r3, [r7, #28]
}
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	3724      	adds	r7, #36	; 0x24
 8004000:	46bd      	mov	sp, r7
 8004002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004006:	4770      	bx	lr

08004008 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004008:	b480      	push	{r7}
 800400a:	b085      	sub	sp, #20
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	695b      	ldr	r3, [r3, #20]
 8004014:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	699b      	ldr	r3, [r3, #24]
 800401a:	68fa      	ldr	r2, [r7, #12]
 800401c:	4013      	ands	r3, r2
 800401e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004020:	68fb      	ldr	r3, [r7, #12]
}
 8004022:	4618      	mov	r0, r3
 8004024:	3714      	adds	r7, #20
 8004026:	46bd      	mov	sp, r7
 8004028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402c:	4770      	bx	lr

0800402e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800402e:	b480      	push	{r7}
 8004030:	b083      	sub	sp, #12
 8004032:	af00      	add	r7, sp, #0
 8004034:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	695b      	ldr	r3, [r3, #20]
 800403a:	f003 0301 	and.w	r3, r3, #1
}
 800403e:	4618      	mov	r0, r3
 8004040:	370c      	adds	r7, #12
 8004042:	46bd      	mov	sp, r7
 8004044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004048:	4770      	bx	lr
	...

0800404c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800404c:	b480      	push	{r7}
 800404e:	b085      	sub	sp, #20
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8004054:	2300      	movs	r3, #0
 8004056:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	3301      	adds	r3, #1
 800405c:	60fb      	str	r3, [r7, #12]
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	4a13      	ldr	r2, [pc, #76]	; (80040b0 <USB_CoreReset+0x64>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d901      	bls.n	800406a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004066:	2303      	movs	r3, #3
 8004068:	e01b      	b.n	80040a2 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	691b      	ldr	r3, [r3, #16]
 800406e:	2b00      	cmp	r3, #0
 8004070:	daf2      	bge.n	8004058 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004072:	2300      	movs	r3, #0
 8004074:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	691b      	ldr	r3, [r3, #16]
 800407a:	f043 0201 	orr.w	r2, r3, #1
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	3301      	adds	r3, #1
 8004086:	60fb      	str	r3, [r7, #12]
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	4a09      	ldr	r2, [pc, #36]	; (80040b0 <USB_CoreReset+0x64>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d901      	bls.n	8004094 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004090:	2303      	movs	r3, #3
 8004092:	e006      	b.n	80040a2 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	691b      	ldr	r3, [r3, #16]
 8004098:	f003 0301 	and.w	r3, r3, #1
 800409c:	2b01      	cmp	r3, #1
 800409e:	d0f0      	beq.n	8004082 <USB_CoreReset+0x36>

  return HAL_OK;
 80040a0:	2300      	movs	r3, #0
}
 80040a2:	4618      	mov	r0, r3
 80040a4:	3714      	adds	r7, #20
 80040a6:	46bd      	mov	sp, r7
 80040a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ac:	4770      	bx	lr
 80040ae:	bf00      	nop
 80040b0:	00030d40 	.word	0x00030d40

080040b4 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80040b4:	b084      	sub	sp, #16
 80040b6:	b580      	push	{r7, lr}
 80040b8:	b084      	sub	sp, #16
 80040ba:	af00      	add	r7, sp, #0
 80040bc:	6078      	str	r0, [r7, #4]
 80040be:	f107 001c 	add.w	r0, r7, #28
 80040c2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80040ca:	68bb      	ldr	r3, [r7, #8]
 80040cc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80040d0:	461a      	mov	r2, r3
 80040d2:	2300      	movs	r3, #0
 80040d4:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040da:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040e6:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040f2:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004102:	2b00      	cmp	r3, #0
 8004104:	d018      	beq.n	8004138 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8004106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004108:	2b01      	cmp	r3, #1
 800410a:	d10a      	bne.n	8004122 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	68ba      	ldr	r2, [r7, #8]
 8004116:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800411a:	f043 0304 	orr.w	r3, r3, #4
 800411e:	6013      	str	r3, [r2, #0]
 8004120:	e014      	b.n	800414c <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004122:	68bb      	ldr	r3, [r7, #8]
 8004124:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	68ba      	ldr	r2, [r7, #8]
 800412c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004130:	f023 0304 	bic.w	r3, r3, #4
 8004134:	6013      	str	r3, [r2, #0]
 8004136:	e009      	b.n	800414c <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004138:	68bb      	ldr	r3, [r7, #8]
 800413a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	68ba      	ldr	r2, [r7, #8]
 8004142:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004146:	f023 0304 	bic.w	r3, r3, #4
 800414a:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 800414c:	2110      	movs	r1, #16
 800414e:	6878      	ldr	r0, [r7, #4]
 8004150:	f7ff feb4 	bl	8003ebc <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8004154:	6878      	ldr	r0, [r7, #4]
 8004156:	f7ff fed7 	bl	8003f08 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800415a:	2300      	movs	r3, #0
 800415c:	60fb      	str	r3, [r7, #12]
 800415e:	e015      	b.n	800418c <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	015a      	lsls	r2, r3, #5
 8004164:	68bb      	ldr	r3, [r7, #8]
 8004166:	4413      	add	r3, r2
 8004168:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800416c:	461a      	mov	r2, r3
 800416e:	f04f 33ff 	mov.w	r3, #4294967295
 8004172:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	015a      	lsls	r2, r3, #5
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	4413      	add	r3, r2
 800417c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004180:	461a      	mov	r2, r3
 8004182:	2300      	movs	r3, #0
 8004184:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	3301      	adds	r3, #1
 800418a:	60fb      	str	r3, [r7, #12]
 800418c:	6a3b      	ldr	r3, [r7, #32]
 800418e:	68fa      	ldr	r2, [r7, #12]
 8004190:	429a      	cmp	r2, r3
 8004192:	d3e5      	bcc.n	8004160 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8004194:	2101      	movs	r1, #1
 8004196:	6878      	ldr	r0, [r7, #4]
 8004198:	f000 f8ac 	bl	80042f4 <USB_DriveVbus>

  HAL_Delay(200U);
 800419c:	20c8      	movs	r0, #200	; 0xc8
 800419e:	f7fc fcc9 	bl	8000b34 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2200      	movs	r2, #0
 80041a6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	f04f 32ff 	mov.w	r2, #4294967295
 80041ae:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d00b      	beq.n	80041d4 <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80041c2:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	4a14      	ldr	r2, [pc, #80]	; (8004218 <USB_HostInit+0x164>)
 80041c8:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	4a13      	ldr	r2, [pc, #76]	; (800421c <USB_HostInit+0x168>)
 80041ce:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80041d2:	e009      	b.n	80041e8 <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2280      	movs	r2, #128	; 0x80
 80041d8:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	4a10      	ldr	r2, [pc, #64]	; (8004220 <USB_HostInit+0x16c>)
 80041de:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	4a10      	ldr	r2, [pc, #64]	; (8004224 <USB_HostInit+0x170>)
 80041e4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80041e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d105      	bne.n	80041fa <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	699b      	ldr	r3, [r3, #24]
 80041f2:	f043 0210 	orr.w	r2, r3, #16
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	699a      	ldr	r2, [r3, #24]
 80041fe:	4b0a      	ldr	r3, [pc, #40]	; (8004228 <USB_HostInit+0x174>)
 8004200:	4313      	orrs	r3, r2
 8004202:	687a      	ldr	r2, [r7, #4]
 8004204:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8004206:	2300      	movs	r3, #0
}
 8004208:	4618      	mov	r0, r3
 800420a:	3710      	adds	r7, #16
 800420c:	46bd      	mov	sp, r7
 800420e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004212:	b004      	add	sp, #16
 8004214:	4770      	bx	lr
 8004216:	bf00      	nop
 8004218:	01000200 	.word	0x01000200
 800421c:	00e00300 	.word	0x00e00300
 8004220:	00600080 	.word	0x00600080
 8004224:	004000e0 	.word	0x004000e0
 8004228:	a3200008 	.word	0xa3200008

0800422c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800422c:	b480      	push	{r7}
 800422e:	b085      	sub	sp, #20
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
 8004234:	460b      	mov	r3, r1
 8004236:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	68fa      	ldr	r2, [r7, #12]
 8004246:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800424a:	f023 0303 	bic.w	r3, r3, #3
 800424e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004256:	681a      	ldr	r2, [r3, #0]
 8004258:	78fb      	ldrb	r3, [r7, #3]
 800425a:	f003 0303 	and.w	r3, r3, #3
 800425e:	68f9      	ldr	r1, [r7, #12]
 8004260:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004264:	4313      	orrs	r3, r2
 8004266:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8004268:	78fb      	ldrb	r3, [r7, #3]
 800426a:	2b01      	cmp	r3, #1
 800426c:	d107      	bne.n	800427e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004274:	461a      	mov	r2, r3
 8004276:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800427a:	6053      	str	r3, [r2, #4]
 800427c:	e009      	b.n	8004292 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800427e:	78fb      	ldrb	r3, [r7, #3]
 8004280:	2b02      	cmp	r3, #2
 8004282:	d106      	bne.n	8004292 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800428a:	461a      	mov	r2, r3
 800428c:	f241 7370 	movw	r3, #6000	; 0x1770
 8004290:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8004292:	2300      	movs	r3, #0
}
 8004294:	4618      	mov	r0, r3
 8004296:	3714      	adds	r7, #20
 8004298:	46bd      	mov	sp, r7
 800429a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429e:	4770      	bx	lr

080042a0 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b084      	sub	sp, #16
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80042ac:	2300      	movs	r3, #0
 80042ae:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80042ba:	68bb      	ldr	r3, [r7, #8]
 80042bc:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80042c0:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80042c2:	68bb      	ldr	r3, [r7, #8]
 80042c4:	68fa      	ldr	r2, [r7, #12]
 80042c6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80042ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042ce:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80042d0:	2064      	movs	r0, #100	; 0x64
 80042d2:	f7fc fc2f 	bl	8000b34 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80042d6:	68bb      	ldr	r3, [r7, #8]
 80042d8:	68fa      	ldr	r2, [r7, #12]
 80042da:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80042de:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80042e2:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80042e4:	200a      	movs	r0, #10
 80042e6:	f7fc fc25 	bl	8000b34 <HAL_Delay>

  return HAL_OK;
 80042ea:	2300      	movs	r3, #0
}
 80042ec:	4618      	mov	r0, r3
 80042ee:	3710      	adds	r7, #16
 80042f0:	46bd      	mov	sp, r7
 80042f2:	bd80      	pop	{r7, pc}

080042f4 <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80042f4:	b480      	push	{r7}
 80042f6:	b085      	sub	sp, #20
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
 80042fc:	460b      	mov	r3, r1
 80042fe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8004304:	2300      	movs	r3, #0
 8004306:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8004312:	68bb      	ldr	r3, [r7, #8]
 8004314:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004318:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800431a:	68bb      	ldr	r3, [r7, #8]
 800431c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004320:	2b00      	cmp	r3, #0
 8004322:	d109      	bne.n	8004338 <USB_DriveVbus+0x44>
 8004324:	78fb      	ldrb	r3, [r7, #3]
 8004326:	2b01      	cmp	r3, #1
 8004328:	d106      	bne.n	8004338 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	68fa      	ldr	r2, [r7, #12]
 800432e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004332:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004336:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800433e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004342:	d109      	bne.n	8004358 <USB_DriveVbus+0x64>
 8004344:	78fb      	ldrb	r3, [r7, #3]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d106      	bne.n	8004358 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800434a:	68bb      	ldr	r3, [r7, #8]
 800434c:	68fa      	ldr	r2, [r7, #12]
 800434e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004352:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004356:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8004358:	2300      	movs	r3, #0
}
 800435a:	4618      	mov	r0, r3
 800435c:	3714      	adds	r7, #20
 800435e:	46bd      	mov	sp, r7
 8004360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004364:	4770      	bx	lr

08004366 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004366:	b480      	push	{r7}
 8004368:	b085      	sub	sp, #20
 800436a:	af00      	add	r7, sp, #0
 800436c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8004372:	2300      	movs	r3, #0
 8004374:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	0c5b      	lsrs	r3, r3, #17
 8004384:	f003 0303 	and.w	r3, r3, #3
}
 8004388:	4618      	mov	r0, r3
 800438a:	3714      	adds	r7, #20
 800438c:	46bd      	mov	sp, r7
 800438e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004392:	4770      	bx	lr

08004394 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
*/
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8004394:	b480      	push	{r7}
 8004396:	b085      	sub	sp, #20
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80043a6:	689b      	ldr	r3, [r3, #8]
 80043a8:	b29b      	uxth	r3, r3
}
 80043aa:	4618      	mov	r0, r3
 80043ac:	3714      	adds	r7, #20
 80043ae:	46bd      	mov	sp, r7
 80043b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b4:	4770      	bx	lr
	...

080043b8 <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 80043b8:	b480      	push	{r7}
 80043ba:	b087      	sub	sp, #28
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
 80043c0:	4608      	mov	r0, r1
 80043c2:	4611      	mov	r1, r2
 80043c4:	461a      	mov	r2, r3
 80043c6:	4603      	mov	r3, r0
 80043c8:	70fb      	strb	r3, [r7, #3]
 80043ca:	460b      	mov	r3, r1
 80043cc:	70bb      	strb	r3, [r7, #2]
 80043ce:	4613      	mov	r3, r2
 80043d0:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80043d2:	2300      	movs	r3, #0
 80043d4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80043da:	78fb      	ldrb	r3, [r7, #3]
 80043dc:	015a      	lsls	r2, r3, #5
 80043de:	68bb      	ldr	r3, [r7, #8]
 80043e0:	4413      	add	r3, r2
 80043e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043e6:	461a      	mov	r2, r3
 80043e8:	f04f 33ff 	mov.w	r3, #4294967295
 80043ec:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80043ee:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80043f2:	2b03      	cmp	r3, #3
 80043f4:	d87e      	bhi.n	80044f4 <USB_HC_Init+0x13c>
 80043f6:	a201      	add	r2, pc, #4	; (adr r2, 80043fc <USB_HC_Init+0x44>)
 80043f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043fc:	0800440d 	.word	0x0800440d
 8004400:	080044b7 	.word	0x080044b7
 8004404:	0800440d 	.word	0x0800440d
 8004408:	08004479 	.word	0x08004479
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800440c:	78fb      	ldrb	r3, [r7, #3]
 800440e:	015a      	lsls	r2, r3, #5
 8004410:	68bb      	ldr	r3, [r7, #8]
 8004412:	4413      	add	r3, r2
 8004414:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004418:	461a      	mov	r2, r3
 800441a:	f240 439d 	movw	r3, #1181	; 0x49d
 800441e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8004420:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004424:	2b00      	cmp	r3, #0
 8004426:	da10      	bge.n	800444a <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004428:	78fb      	ldrb	r3, [r7, #3]
 800442a:	015a      	lsls	r2, r3, #5
 800442c:	68bb      	ldr	r3, [r7, #8]
 800442e:	4413      	add	r3, r2
 8004430:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004434:	68db      	ldr	r3, [r3, #12]
 8004436:	78fa      	ldrb	r2, [r7, #3]
 8004438:	0151      	lsls	r1, r2, #5
 800443a:	68ba      	ldr	r2, [r7, #8]
 800443c:	440a      	add	r2, r1
 800443e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004442:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004446:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 8004448:	e057      	b.n	80044fa <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800444e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004452:	2b00      	cmp	r3, #0
 8004454:	d051      	beq.n	80044fa <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8004456:	78fb      	ldrb	r3, [r7, #3]
 8004458:	015a      	lsls	r2, r3, #5
 800445a:	68bb      	ldr	r3, [r7, #8]
 800445c:	4413      	add	r3, r2
 800445e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004462:	68db      	ldr	r3, [r3, #12]
 8004464:	78fa      	ldrb	r2, [r7, #3]
 8004466:	0151      	lsls	r1, r2, #5
 8004468:	68ba      	ldr	r2, [r7, #8]
 800446a:	440a      	add	r2, r1
 800446c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004470:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004474:	60d3      	str	r3, [r2, #12]
      break;
 8004476:	e040      	b.n	80044fa <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004478:	78fb      	ldrb	r3, [r7, #3]
 800447a:	015a      	lsls	r2, r3, #5
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	4413      	add	r3, r2
 8004480:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004484:	461a      	mov	r2, r3
 8004486:	f240 639d 	movw	r3, #1693	; 0x69d
 800448a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800448c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004490:	2b00      	cmp	r3, #0
 8004492:	da34      	bge.n	80044fe <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004494:	78fb      	ldrb	r3, [r7, #3]
 8004496:	015a      	lsls	r2, r3, #5
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	4413      	add	r3, r2
 800449c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044a0:	68db      	ldr	r3, [r3, #12]
 80044a2:	78fa      	ldrb	r2, [r7, #3]
 80044a4:	0151      	lsls	r1, r2, #5
 80044a6:	68ba      	ldr	r2, [r7, #8]
 80044a8:	440a      	add	r2, r1
 80044aa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80044ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044b2:	60d3      	str	r3, [r2, #12]
      }

      break;
 80044b4:	e023      	b.n	80044fe <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80044b6:	78fb      	ldrb	r3, [r7, #3]
 80044b8:	015a      	lsls	r2, r3, #5
 80044ba:	68bb      	ldr	r3, [r7, #8]
 80044bc:	4413      	add	r3, r2
 80044be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044c2:	461a      	mov	r2, r3
 80044c4:	f240 2325 	movw	r3, #549	; 0x225
 80044c8:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80044ca:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	da17      	bge.n	8004502 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80044d2:	78fb      	ldrb	r3, [r7, #3]
 80044d4:	015a      	lsls	r2, r3, #5
 80044d6:	68bb      	ldr	r3, [r7, #8]
 80044d8:	4413      	add	r3, r2
 80044da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044de:	68db      	ldr	r3, [r3, #12]
 80044e0:	78fa      	ldrb	r2, [r7, #3]
 80044e2:	0151      	lsls	r1, r2, #5
 80044e4:	68ba      	ldr	r2, [r7, #8]
 80044e6:	440a      	add	r2, r1
 80044e8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80044ec:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80044f0:	60d3      	str	r3, [r2, #12]
      }
      break;
 80044f2:	e006      	b.n	8004502 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 80044f4:	2301      	movs	r3, #1
 80044f6:	75fb      	strb	r3, [r7, #23]
      break;
 80044f8:	e004      	b.n	8004504 <USB_HC_Init+0x14c>
      break;
 80044fa:	bf00      	nop
 80044fc:	e002      	b.n	8004504 <USB_HC_Init+0x14c>
      break;
 80044fe:	bf00      	nop
 8004500:	e000      	b.n	8004504 <USB_HC_Init+0x14c>
      break;
 8004502:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8004504:	68bb      	ldr	r3, [r7, #8]
 8004506:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800450a:	699a      	ldr	r2, [r3, #24]
 800450c:	78fb      	ldrb	r3, [r7, #3]
 800450e:	f003 030f 	and.w	r3, r3, #15
 8004512:	2101      	movs	r1, #1
 8004514:	fa01 f303 	lsl.w	r3, r1, r3
 8004518:	68b9      	ldr	r1, [r7, #8]
 800451a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800451e:	4313      	orrs	r3, r2
 8004520:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	699b      	ldr	r3, [r3, #24]
 8004526:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800452e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004532:	2b00      	cmp	r3, #0
 8004534:	da03      	bge.n	800453e <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8004536:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800453a:	613b      	str	r3, [r7, #16]
 800453c:	e001      	b.n	8004542 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 800453e:	2300      	movs	r3, #0
 8004540:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 8004542:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004546:	2b02      	cmp	r3, #2
 8004548:	d103      	bne.n	8004552 <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800454a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800454e:	60fb      	str	r3, [r7, #12]
 8004550:	e001      	b.n	8004556 <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8004552:	2300      	movs	r3, #0
 8004554:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004556:	787b      	ldrb	r3, [r7, #1]
 8004558:	059b      	lsls	r3, r3, #22
 800455a:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800455e:	78bb      	ldrb	r3, [r7, #2]
 8004560:	02db      	lsls	r3, r3, #11
 8004562:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004566:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8004568:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800456c:	049b      	lsls	r3, r3, #18
 800456e:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8004572:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004574:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004576:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800457a:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800457c:	693b      	ldr	r3, [r7, #16]
 800457e:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004580:	78fb      	ldrb	r3, [r7, #3]
 8004582:	0159      	lsls	r1, r3, #5
 8004584:	68bb      	ldr	r3, [r7, #8]
 8004586:	440b      	add	r3, r1
 8004588:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800458c:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004592:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8004594:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004598:	2b03      	cmp	r3, #3
 800459a:	d10f      	bne.n	80045bc <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 800459c:	78fb      	ldrb	r3, [r7, #3]
 800459e:	015a      	lsls	r2, r3, #5
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	4413      	add	r3, r2
 80045a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	78fa      	ldrb	r2, [r7, #3]
 80045ac:	0151      	lsls	r1, r2, #5
 80045ae:	68ba      	ldr	r2, [r7, #8]
 80045b0:	440a      	add	r2, r1
 80045b2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80045b6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80045ba:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80045bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80045be:	4618      	mov	r0, r3
 80045c0:	371c      	adds	r7, #28
 80045c2:	46bd      	mov	sp, r7
 80045c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c8:	4770      	bx	lr
 80045ca:	bf00      	nop

080045cc <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b08c      	sub	sp, #48	; 0x30
 80045d0:	af02      	add	r7, sp, #8
 80045d2:	60f8      	str	r0, [r7, #12]
 80045d4:	60b9      	str	r1, [r7, #8]
 80045d6:	4613      	mov	r3, r2
 80045d8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80045de:	68bb      	ldr	r3, [r7, #8]
 80045e0:	785b      	ldrb	r3, [r3, #1]
 80045e2:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 80045e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80045e8:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d028      	beq.n	8004648 <USB_HC_StartXfer+0x7c>
 80045f6:	68bb      	ldr	r3, [r7, #8]
 80045f8:	791b      	ldrb	r3, [r3, #4]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d124      	bne.n	8004648 <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 80045fe:	79fb      	ldrb	r3, [r7, #7]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d10b      	bne.n	800461c <USB_HC_StartXfer+0x50>
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	795b      	ldrb	r3, [r3, #5]
 8004608:	2b01      	cmp	r3, #1
 800460a:	d107      	bne.n	800461c <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800460c:	68bb      	ldr	r3, [r7, #8]
 800460e:	785b      	ldrb	r3, [r3, #1]
 8004610:	4619      	mov	r1, r3
 8004612:	68f8      	ldr	r0, [r7, #12]
 8004614:	f000 fa2c 	bl	8004a70 <USB_DoPing>
      return HAL_OK;
 8004618:	2300      	movs	r3, #0
 800461a:	e111      	b.n	8004840 <USB_HC_StartXfer+0x274>
    }
    else if (dma == 1U)
 800461c:	79fb      	ldrb	r3, [r7, #7]
 800461e:	2b01      	cmp	r3, #1
 8004620:	d112      	bne.n	8004648 <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8004622:	69fb      	ldr	r3, [r7, #28]
 8004624:	015a      	lsls	r2, r3, #5
 8004626:	6a3b      	ldr	r3, [r7, #32]
 8004628:	4413      	add	r3, r2
 800462a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800462e:	68db      	ldr	r3, [r3, #12]
 8004630:	69fa      	ldr	r2, [r7, #28]
 8004632:	0151      	lsls	r1, r2, #5
 8004634:	6a3a      	ldr	r2, [r7, #32]
 8004636:	440a      	add	r2, r1
 8004638:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800463c:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8004640:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 8004642:	68bb      	ldr	r3, [r7, #8]
 8004644:	2200      	movs	r2, #0
 8004646:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	691b      	ldr	r3, [r3, #16]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d018      	beq.n	8004682 <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8004650:	68bb      	ldr	r3, [r7, #8]
 8004652:	691b      	ldr	r3, [r3, #16]
 8004654:	68ba      	ldr	r2, [r7, #8]
 8004656:	8912      	ldrh	r2, [r2, #8]
 8004658:	4413      	add	r3, r2
 800465a:	3b01      	subs	r3, #1
 800465c:	68ba      	ldr	r2, [r7, #8]
 800465e:	8912      	ldrh	r2, [r2, #8]
 8004660:	fbb3 f3f2 	udiv	r3, r3, r2
 8004664:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8004666:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8004668:	8b7b      	ldrh	r3, [r7, #26]
 800466a:	429a      	cmp	r2, r3
 800466c:	d90b      	bls.n	8004686 <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 800466e:	8b7b      	ldrh	r3, [r7, #26]
 8004670:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8004672:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004674:	68ba      	ldr	r2, [r7, #8]
 8004676:	8912      	ldrh	r2, [r2, #8]
 8004678:	fb02 f203 	mul.w	r2, r2, r3
 800467c:	68bb      	ldr	r3, [r7, #8]
 800467e:	611a      	str	r2, [r3, #16]
 8004680:	e001      	b.n	8004686 <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 8004682:	2301      	movs	r3, #1
 8004684:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 8004686:	68bb      	ldr	r3, [r7, #8]
 8004688:	78db      	ldrb	r3, [r3, #3]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d006      	beq.n	800469c <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800468e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004690:	68ba      	ldr	r2, [r7, #8]
 8004692:	8912      	ldrh	r2, [r2, #8]
 8004694:	fb02 f203 	mul.w	r2, r2, r3
 8004698:	68bb      	ldr	r3, [r7, #8]
 800469a:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800469c:	68bb      	ldr	r3, [r7, #8]
 800469e:	691b      	ldr	r3, [r3, #16]
 80046a0:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80046a4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80046a6:	04d9      	lsls	r1, r3, #19
 80046a8:	4b67      	ldr	r3, [pc, #412]	; (8004848 <USB_HC_StartXfer+0x27c>)
 80046aa:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80046ac:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80046ae:	68bb      	ldr	r3, [r7, #8]
 80046b0:	7a9b      	ldrb	r3, [r3, #10]
 80046b2:	075b      	lsls	r3, r3, #29
 80046b4:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80046b8:	69f9      	ldr	r1, [r7, #28]
 80046ba:	0148      	lsls	r0, r1, #5
 80046bc:	6a39      	ldr	r1, [r7, #32]
 80046be:	4401      	add	r1, r0
 80046c0:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80046c4:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80046c6:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80046c8:	79fb      	ldrb	r3, [r7, #7]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d009      	beq.n	80046e2 <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80046ce:	68bb      	ldr	r3, [r7, #8]
 80046d0:	68d9      	ldr	r1, [r3, #12]
 80046d2:	69fb      	ldr	r3, [r7, #28]
 80046d4:	015a      	lsls	r2, r3, #5
 80046d6:	6a3b      	ldr	r3, [r7, #32]
 80046d8:	4413      	add	r3, r2
 80046da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046de:	460a      	mov	r2, r1
 80046e0:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80046e2:	6a3b      	ldr	r3, [r7, #32]
 80046e4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80046e8:	689b      	ldr	r3, [r3, #8]
 80046ea:	f003 0301 	and.w	r3, r3, #1
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	bf0c      	ite	eq
 80046f2:	2301      	moveq	r3, #1
 80046f4:	2300      	movne	r3, #0
 80046f6:	b2db      	uxtb	r3, r3
 80046f8:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80046fa:	69fb      	ldr	r3, [r7, #28]
 80046fc:	015a      	lsls	r2, r3, #5
 80046fe:	6a3b      	ldr	r3, [r7, #32]
 8004700:	4413      	add	r3, r2
 8004702:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	69fa      	ldr	r2, [r7, #28]
 800470a:	0151      	lsls	r1, r2, #5
 800470c:	6a3a      	ldr	r2, [r7, #32]
 800470e:	440a      	add	r2, r1
 8004710:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004714:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004718:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800471a:	69fb      	ldr	r3, [r7, #28]
 800471c:	015a      	lsls	r2, r3, #5
 800471e:	6a3b      	ldr	r3, [r7, #32]
 8004720:	4413      	add	r3, r2
 8004722:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004726:	681a      	ldr	r2, [r3, #0]
 8004728:	7e7b      	ldrb	r3, [r7, #25]
 800472a:	075b      	lsls	r3, r3, #29
 800472c:	69f9      	ldr	r1, [r7, #28]
 800472e:	0148      	lsls	r0, r1, #5
 8004730:	6a39      	ldr	r1, [r7, #32]
 8004732:	4401      	add	r1, r0
 8004734:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8004738:	4313      	orrs	r3, r2
 800473a:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800473c:	69fb      	ldr	r3, [r7, #28]
 800473e:	015a      	lsls	r2, r3, #5
 8004740:	6a3b      	ldr	r3, [r7, #32]
 8004742:	4413      	add	r3, r2
 8004744:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	4a40      	ldr	r2, [pc, #256]	; (800484c <USB_HC_StartXfer+0x280>)
 800474c:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800474e:	4b3f      	ldr	r3, [pc, #252]	; (800484c <USB_HC_StartXfer+0x280>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004756:	4a3d      	ldr	r2, [pc, #244]	; (800484c <USB_HC_StartXfer+0x280>)
 8004758:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	78db      	ldrb	r3, [r3, #3]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d006      	beq.n	8004770 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8004762:	4b3a      	ldr	r3, [pc, #232]	; (800484c <USB_HC_StartXfer+0x280>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800476a:	4a38      	ldr	r2, [pc, #224]	; (800484c <USB_HC_StartXfer+0x280>)
 800476c:	6013      	str	r3, [r2, #0]
 800476e:	e005      	b.n	800477c <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8004770:	4b36      	ldr	r3, [pc, #216]	; (800484c <USB_HC_StartXfer+0x280>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004778:	4a34      	ldr	r2, [pc, #208]	; (800484c <USB_HC_StartXfer+0x280>)
 800477a:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800477c:	4b33      	ldr	r3, [pc, #204]	; (800484c <USB_HC_StartXfer+0x280>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004784:	4a31      	ldr	r2, [pc, #196]	; (800484c <USB_HC_StartXfer+0x280>)
 8004786:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004788:	69fb      	ldr	r3, [r7, #28]
 800478a:	015a      	lsls	r2, r3, #5
 800478c:	6a3b      	ldr	r3, [r7, #32]
 800478e:	4413      	add	r3, r2
 8004790:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004794:	461a      	mov	r2, r3
 8004796:	4b2d      	ldr	r3, [pc, #180]	; (800484c <USB_HC_StartXfer+0x280>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	6013      	str	r3, [r2, #0]

  if (dma == 0U) /* Slave mode */
 800479c:	79fb      	ldrb	r3, [r7, #7]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d14d      	bne.n	800483e <USB_HC_StartXfer+0x272>
  {
    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80047a2:	68bb      	ldr	r3, [r7, #8]
 80047a4:	78db      	ldrb	r3, [r3, #3]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d149      	bne.n	800483e <USB_HC_StartXfer+0x272>
 80047aa:	68bb      	ldr	r3, [r7, #8]
 80047ac:	691b      	ldr	r3, [r3, #16]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d045      	beq.n	800483e <USB_HC_StartXfer+0x272>
    {
      switch (hc->ep_type)
 80047b2:	68bb      	ldr	r3, [r7, #8]
 80047b4:	79db      	ldrb	r3, [r3, #7]
 80047b6:	2b03      	cmp	r3, #3
 80047b8:	d830      	bhi.n	800481c <USB_HC_StartXfer+0x250>
 80047ba:	a201      	add	r2, pc, #4	; (adr r2, 80047c0 <USB_HC_StartXfer+0x1f4>)
 80047bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047c0:	080047d1 	.word	0x080047d1
 80047c4:	080047f5 	.word	0x080047f5
 80047c8:	080047d1 	.word	0x080047d1
 80047cc:	080047f5 	.word	0x080047f5
      {
        /* Non periodic transfer */
        case EP_TYPE_CTRL:
        case EP_TYPE_BULK:

          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80047d0:	68bb      	ldr	r3, [r7, #8]
 80047d2:	691b      	ldr	r3, [r3, #16]
 80047d4:	3303      	adds	r3, #3
 80047d6:	089b      	lsrs	r3, r3, #2
 80047d8:	82fb      	strh	r3, [r7, #22]

          /* check if there is enough space in FIFO space */
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80047da:	8afa      	ldrh	r2, [r7, #22]
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047e0:	b29b      	uxth	r3, r3
 80047e2:	429a      	cmp	r2, r3
 80047e4:	d91c      	bls.n	8004820 <USB_HC_StartXfer+0x254>
          {
            /* need to process data in nptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	699b      	ldr	r3, [r3, #24]
 80047ea:	f043 0220 	orr.w	r2, r3, #32
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	619a      	str	r2, [r3, #24]
          }
          break;
 80047f2:	e015      	b.n	8004820 <USB_HC_StartXfer+0x254>

        /* Periodic transfer */
        case EP_TYPE_INTR:
        case EP_TYPE_ISOC:
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80047f4:	68bb      	ldr	r3, [r7, #8]
 80047f6:	691b      	ldr	r3, [r3, #16]
 80047f8:	3303      	adds	r3, #3
 80047fa:	089b      	lsrs	r3, r3, #2
 80047fc:	82fb      	strh	r3, [r7, #22]
          /* check if there is enough space in FIFO space */
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80047fe:	8afa      	ldrh	r2, [r7, #22]
 8004800:	6a3b      	ldr	r3, [r7, #32]
 8004802:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004806:	691b      	ldr	r3, [r3, #16]
 8004808:	b29b      	uxth	r3, r3
 800480a:	429a      	cmp	r2, r3
 800480c:	d90a      	bls.n	8004824 <USB_HC_StartXfer+0x258>
          {
            /* need to process data in ptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	699b      	ldr	r3, [r3, #24]
 8004812:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	619a      	str	r2, [r3, #24]
          }
          break;
 800481a:	e003      	b.n	8004824 <USB_HC_StartXfer+0x258>

        default:
          break;
 800481c:	bf00      	nop
 800481e:	e002      	b.n	8004826 <USB_HC_StartXfer+0x25a>
          break;
 8004820:	bf00      	nop
 8004822:	e000      	b.n	8004826 <USB_HC_StartXfer+0x25a>
          break;
 8004824:	bf00      	nop
      }

      /* Write packet into the Tx FIFO. */
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8004826:	68bb      	ldr	r3, [r7, #8]
 8004828:	68d9      	ldr	r1, [r3, #12]
 800482a:	68bb      	ldr	r3, [r7, #8]
 800482c:	785a      	ldrb	r2, [r3, #1]
 800482e:	68bb      	ldr	r3, [r7, #8]
 8004830:	691b      	ldr	r3, [r3, #16]
 8004832:	b29b      	uxth	r3, r3
 8004834:	2000      	movs	r0, #0
 8004836:	9000      	str	r0, [sp, #0]
 8004838:	68f8      	ldr	r0, [r7, #12]
 800483a:	f7ff fb87 	bl	8003f4c <USB_WritePacket>
    }
  }

  return HAL_OK;
 800483e:	2300      	movs	r3, #0
}
 8004840:	4618      	mov	r0, r3
 8004842:	3728      	adds	r7, #40	; 0x28
 8004844:	46bd      	mov	sp, r7
 8004846:	bd80      	pop	{r7, pc}
 8004848:	1ff80000 	.word	0x1ff80000
 800484c:	200000b0 	.word	0x200000b0

08004850 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004850:	b480      	push	{r7}
 8004852:	b085      	sub	sp, #20
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004862:	695b      	ldr	r3, [r3, #20]
 8004864:	b29b      	uxth	r3, r3
}
 8004866:	4618      	mov	r0, r3
 8004868:	3714      	adds	r7, #20
 800486a:	46bd      	mov	sp, r7
 800486c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004870:	4770      	bx	lr

08004872 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8004872:	b480      	push	{r7}
 8004874:	b087      	sub	sp, #28
 8004876:	af00      	add	r7, sp, #0
 8004878:	6078      	str	r0, [r7, #4]
 800487a:	460b      	mov	r3, r1
 800487c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 8004882:	78fb      	ldrb	r3, [r7, #3]
 8004884:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8004886:	2300      	movs	r3, #0
 8004888:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	015a      	lsls	r2, r3, #5
 800488e:	693b      	ldr	r3, [r7, #16]
 8004890:	4413      	add	r3, r2
 8004892:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	0c9b      	lsrs	r3, r3, #18
 800489a:	f003 0303 	and.w	r3, r3, #3
 800489e:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80048a0:	68bb      	ldr	r3, [r7, #8]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d002      	beq.n	80048ac <USB_HC_Halt+0x3a>
 80048a6:	68bb      	ldr	r3, [r7, #8]
 80048a8:	2b02      	cmp	r3, #2
 80048aa:	d16c      	bne.n	8004986 <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	015a      	lsls	r2, r3, #5
 80048b0:	693b      	ldr	r3, [r7, #16]
 80048b2:	4413      	add	r3, r2
 80048b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	68fa      	ldr	r2, [r7, #12]
 80048bc:	0151      	lsls	r1, r2, #5
 80048be:	693a      	ldr	r2, [r7, #16]
 80048c0:	440a      	add	r2, r1
 80048c2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80048c6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80048ca:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048d0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d143      	bne.n	8004960 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	015a      	lsls	r2, r3, #5
 80048dc:	693b      	ldr	r3, [r7, #16]
 80048de:	4413      	add	r3, r2
 80048e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	68fa      	ldr	r2, [r7, #12]
 80048e8:	0151      	lsls	r1, r2, #5
 80048ea:	693a      	ldr	r2, [r7, #16]
 80048ec:	440a      	add	r2, r1
 80048ee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80048f2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80048f6:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	015a      	lsls	r2, r3, #5
 80048fc:	693b      	ldr	r3, [r7, #16]
 80048fe:	4413      	add	r3, r2
 8004900:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	68fa      	ldr	r2, [r7, #12]
 8004908:	0151      	lsls	r1, r2, #5
 800490a:	693a      	ldr	r2, [r7, #16]
 800490c:	440a      	add	r2, r1
 800490e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004912:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004916:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	015a      	lsls	r2, r3, #5
 800491c:	693b      	ldr	r3, [r7, #16]
 800491e:	4413      	add	r3, r2
 8004920:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	68fa      	ldr	r2, [r7, #12]
 8004928:	0151      	lsls	r1, r2, #5
 800492a:	693a      	ldr	r2, [r7, #16]
 800492c:	440a      	add	r2, r1
 800492e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004932:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004936:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8004938:	697b      	ldr	r3, [r7, #20]
 800493a:	3301      	adds	r3, #1
 800493c:	617b      	str	r3, [r7, #20]
 800493e:	697b      	ldr	r3, [r7, #20]
 8004940:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004944:	d81d      	bhi.n	8004982 <USB_HC_Halt+0x110>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	015a      	lsls	r2, r3, #5
 800494a:	693b      	ldr	r3, [r7, #16]
 800494c:	4413      	add	r3, r2
 800494e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004958:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800495c:	d0ec      	beq.n	8004938 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800495e:	e080      	b.n	8004a62 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	015a      	lsls	r2, r3, #5
 8004964:	693b      	ldr	r3, [r7, #16]
 8004966:	4413      	add	r3, r2
 8004968:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	68fa      	ldr	r2, [r7, #12]
 8004970:	0151      	lsls	r1, r2, #5
 8004972:	693a      	ldr	r2, [r7, #16]
 8004974:	440a      	add	r2, r1
 8004976:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800497a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800497e:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8004980:	e06f      	b.n	8004a62 <USB_HC_Halt+0x1f0>
          break;
 8004982:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8004984:	e06d      	b.n	8004a62 <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	015a      	lsls	r2, r3, #5
 800498a:	693b      	ldr	r3, [r7, #16]
 800498c:	4413      	add	r3, r2
 800498e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	68fa      	ldr	r2, [r7, #12]
 8004996:	0151      	lsls	r1, r2, #5
 8004998:	693a      	ldr	r2, [r7, #16]
 800499a:	440a      	add	r2, r1
 800499c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80049a0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80049a4:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80049a6:	693b      	ldr	r3, [r7, #16]
 80049a8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80049ac:	691b      	ldr	r3, [r3, #16]
 80049ae:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d143      	bne.n	8004a3e <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	015a      	lsls	r2, r3, #5
 80049ba:	693b      	ldr	r3, [r7, #16]
 80049bc:	4413      	add	r3, r2
 80049be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	68fa      	ldr	r2, [r7, #12]
 80049c6:	0151      	lsls	r1, r2, #5
 80049c8:	693a      	ldr	r2, [r7, #16]
 80049ca:	440a      	add	r2, r1
 80049cc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80049d0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80049d4:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	015a      	lsls	r2, r3, #5
 80049da:	693b      	ldr	r3, [r7, #16]
 80049dc:	4413      	add	r3, r2
 80049de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	68fa      	ldr	r2, [r7, #12]
 80049e6:	0151      	lsls	r1, r2, #5
 80049e8:	693a      	ldr	r2, [r7, #16]
 80049ea:	440a      	add	r2, r1
 80049ec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80049f0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80049f4:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	015a      	lsls	r2, r3, #5
 80049fa:	693b      	ldr	r3, [r7, #16]
 80049fc:	4413      	add	r3, r2
 80049fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	68fa      	ldr	r2, [r7, #12]
 8004a06:	0151      	lsls	r1, r2, #5
 8004a08:	693a      	ldr	r2, [r7, #16]
 8004a0a:	440a      	add	r2, r1
 8004a0c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004a10:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004a14:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8004a16:	697b      	ldr	r3, [r7, #20]
 8004a18:	3301      	adds	r3, #1
 8004a1a:	617b      	str	r3, [r7, #20]
 8004a1c:	697b      	ldr	r3, [r7, #20]
 8004a1e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004a22:	d81d      	bhi.n	8004a60 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	015a      	lsls	r2, r3, #5
 8004a28:	693b      	ldr	r3, [r7, #16]
 8004a2a:	4413      	add	r3, r2
 8004a2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004a36:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004a3a:	d0ec      	beq.n	8004a16 <USB_HC_Halt+0x1a4>
 8004a3c:	e011      	b.n	8004a62 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	015a      	lsls	r2, r3, #5
 8004a42:	693b      	ldr	r3, [r7, #16]
 8004a44:	4413      	add	r3, r2
 8004a46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	68fa      	ldr	r2, [r7, #12]
 8004a4e:	0151      	lsls	r1, r2, #5
 8004a50:	693a      	ldr	r2, [r7, #16]
 8004a52:	440a      	add	r2, r1
 8004a54:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004a58:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004a5c:	6013      	str	r3, [r2, #0]
 8004a5e:	e000      	b.n	8004a62 <USB_HC_Halt+0x1f0>
          break;
 8004a60:	bf00      	nop
    }
  }

  return HAL_OK;
 8004a62:	2300      	movs	r3, #0
}
 8004a64:	4618      	mov	r0, r3
 8004a66:	371c      	adds	r7, #28
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6e:	4770      	bx	lr

08004a70 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8004a70:	b480      	push	{r7}
 8004a72:	b087      	sub	sp, #28
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
 8004a78:	460b      	mov	r3, r1
 8004a7a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8004a80:	78fb      	ldrb	r3, [r7, #3]
 8004a82:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8004a84:	2301      	movs	r3, #1
 8004a86:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	04da      	lsls	r2, r3, #19
 8004a8c:	4b15      	ldr	r3, [pc, #84]	; (8004ae4 <USB_DoPing+0x74>)
 8004a8e:	4013      	ands	r3, r2
 8004a90:	693a      	ldr	r2, [r7, #16]
 8004a92:	0151      	lsls	r1, r2, #5
 8004a94:	697a      	ldr	r2, [r7, #20]
 8004a96:	440a      	add	r2, r1
 8004a98:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004a9c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004aa0:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8004aa2:	693b      	ldr	r3, [r7, #16]
 8004aa4:	015a      	lsls	r2, r3, #5
 8004aa6:	697b      	ldr	r3, [r7, #20]
 8004aa8:	4413      	add	r3, r2
 8004aaa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004ab2:	68bb      	ldr	r3, [r7, #8]
 8004ab4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004ab8:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004aba:	68bb      	ldr	r3, [r7, #8]
 8004abc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004ac0:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8004ac2:	693b      	ldr	r3, [r7, #16]
 8004ac4:	015a      	lsls	r2, r3, #5
 8004ac6:	697b      	ldr	r3, [r7, #20]
 8004ac8:	4413      	add	r3, r2
 8004aca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ace:	461a      	mov	r2, r3
 8004ad0:	68bb      	ldr	r3, [r7, #8]
 8004ad2:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8004ad4:	2300      	movs	r3, #0
}
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	371c      	adds	r7, #28
 8004ada:	46bd      	mov	sp, r7
 8004adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae0:	4770      	bx	lr
 8004ae2:	bf00      	nop
 8004ae4:	1ff80000 	.word	0x1ff80000

08004ae8 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b086      	sub	sp, #24
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8004af4:	2300      	movs	r3, #0
 8004af6:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8004af8:	6878      	ldr	r0, [r7, #4]
 8004afa:	f7ff f9a3 	bl	8003e44 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8004afe:	2110      	movs	r1, #16
 8004b00:	6878      	ldr	r0, [r7, #4]
 8004b02:	f7ff f9db 	bl	8003ebc <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8004b06:	6878      	ldr	r0, [r7, #4]
 8004b08:	f7ff f9fe 	bl	8003f08 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	613b      	str	r3, [r7, #16]
 8004b10:	e01f      	b.n	8004b52 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8004b12:	693b      	ldr	r3, [r7, #16]
 8004b14:	015a      	lsls	r2, r3, #5
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	4413      	add	r3, r2
 8004b1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8004b22:	68bb      	ldr	r3, [r7, #8]
 8004b24:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004b28:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8004b2a:	68bb      	ldr	r3, [r7, #8]
 8004b2c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004b30:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8004b32:	68bb      	ldr	r3, [r7, #8]
 8004b34:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004b38:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8004b3a:	693b      	ldr	r3, [r7, #16]
 8004b3c:	015a      	lsls	r2, r3, #5
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	4413      	add	r3, r2
 8004b42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b46:	461a      	mov	r2, r3
 8004b48:	68bb      	ldr	r3, [r7, #8]
 8004b4a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8004b4c:	693b      	ldr	r3, [r7, #16]
 8004b4e:	3301      	adds	r3, #1
 8004b50:	613b      	str	r3, [r7, #16]
 8004b52:	693b      	ldr	r3, [r7, #16]
 8004b54:	2b0f      	cmp	r3, #15
 8004b56:	d9dc      	bls.n	8004b12 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8004b58:	2300      	movs	r3, #0
 8004b5a:	613b      	str	r3, [r7, #16]
 8004b5c:	e034      	b.n	8004bc8 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8004b5e:	693b      	ldr	r3, [r7, #16]
 8004b60:	015a      	lsls	r2, r3, #5
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	4413      	add	r3, r2
 8004b66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8004b6e:	68bb      	ldr	r3, [r7, #8]
 8004b70:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004b74:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8004b76:	68bb      	ldr	r3, [r7, #8]
 8004b78:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004b7c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8004b7e:	68bb      	ldr	r3, [r7, #8]
 8004b80:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004b84:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8004b86:	693b      	ldr	r3, [r7, #16]
 8004b88:	015a      	lsls	r2, r3, #5
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	4413      	add	r3, r2
 8004b8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b92:	461a      	mov	r2, r3
 8004b94:	68bb      	ldr	r3, [r7, #8]
 8004b96:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8004b98:	697b      	ldr	r3, [r7, #20]
 8004b9a:	3301      	adds	r3, #1
 8004b9c:	617b      	str	r3, [r7, #20]
 8004b9e:	697b      	ldr	r3, [r7, #20]
 8004ba0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004ba4:	d80c      	bhi.n	8004bc0 <USB_StopHost+0xd8>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8004ba6:	693b      	ldr	r3, [r7, #16]
 8004ba8:	015a      	lsls	r2, r3, #5
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	4413      	add	r3, r2
 8004bae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004bb8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004bbc:	d0ec      	beq.n	8004b98 <USB_StopHost+0xb0>
 8004bbe:	e000      	b.n	8004bc2 <USB_StopHost+0xda>
        break;
 8004bc0:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8004bc2:	693b      	ldr	r3, [r7, #16]
 8004bc4:	3301      	adds	r3, #1
 8004bc6:	613b      	str	r3, [r7, #16]
 8004bc8:	693b      	ldr	r3, [r7, #16]
 8004bca:	2b0f      	cmp	r3, #15
 8004bcc:	d9c7      	bls.n	8004b5e <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004bd4:	461a      	mov	r2, r3
 8004bd6:	f04f 33ff 	mov.w	r3, #4294967295
 8004bda:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	f04f 32ff 	mov.w	r2, #4294967295
 8004be2:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8004be4:	6878      	ldr	r0, [r7, #4]
 8004be6:	f7ff f91c 	bl	8003e22 <USB_EnableGlobalInt>

  return HAL_OK;
 8004bea:	2300      	movs	r3, #0
}
 8004bec:	4618      	mov	r0, r3
 8004bee:	3718      	adds	r7, #24
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	bd80      	pop	{r7, pc}

08004bf4 <USBH_HID_InterfaceInit>:
  *         The function init the HID class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8004bf4:	b590      	push	{r4, r7, lr}
 8004bf6:	b08b      	sub	sp, #44	; 0x2c
 8004bf8:	af04      	add	r7, sp, #16
 8004bfa:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  HID_HandleTypeDef *HID_Handle;
  uint8_t max_ep;
  uint8_t num = 0U;
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	75fb      	strb	r3, [r7, #23]
  uint8_t interface;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, HID_BOOT_CODE, 0xFFU);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004c06:	7919      	ldrb	r1, [r3, #4]
 8004c08:	23ff      	movs	r3, #255	; 0xff
 8004c0a:	2201      	movs	r2, #1
 8004c0c:	6878      	ldr	r0, [r7, #4]
 8004c0e:	f000 ffe7 	bl	8005be0 <USBH_FindInterface>
 8004c12:	4603      	mov	r3, r0
 8004c14:	75bb      	strb	r3, [r7, #22]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8004c16:	7dbb      	ldrb	r3, [r7, #22]
 8004c18:	2bff      	cmp	r3, #255	; 0xff
 8004c1a:	d002      	beq.n	8004c22 <USBH_HID_InterfaceInit+0x2e>
 8004c1c:	7dbb      	ldrb	r3, [r7, #22]
 8004c1e:	2b01      	cmp	r3, #1
 8004c20:	d901      	bls.n	8004c26 <USBH_HID_InterfaceInit+0x32>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8004c22:	2302      	movs	r3, #2
 8004c24:	e108      	b.n	8004e38 <USBH_HID_InterfaceInit+0x244>
  }

  status = USBH_SelectInterface(phost, interface);
 8004c26:	7dbb      	ldrb	r3, [r7, #22]
 8004c28:	4619      	mov	r1, r3
 8004c2a:	6878      	ldr	r0, [r7, #4]
 8004c2c:	f000 ffbc 	bl	8005ba8 <USBH_SelectInterface>
 8004c30:	4603      	mov	r3, r0
 8004c32:	757b      	strb	r3, [r7, #21]

  if (status != USBH_OK)
 8004c34:	7d7b      	ldrb	r3, [r7, #21]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d001      	beq.n	8004c3e <USBH_HID_InterfaceInit+0x4a>
  {
    return USBH_FAIL;
 8004c3a:	2302      	movs	r3, #2
 8004c3c:	e0fc      	b.n	8004e38 <USBH_HID_InterfaceInit+0x244>
  }

  phost->pActiveClass->pData = (HID_HandleTypeDef *)USBH_malloc(sizeof(HID_HandleTypeDef));
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8004c44:	2034      	movs	r0, #52	; 0x34
 8004c46:	f002 fd5f 	bl	8007708 <malloc>
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	61e3      	str	r3, [r4, #28]
  HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004c54:	69db      	ldr	r3, [r3, #28]
 8004c56:	613b      	str	r3, [r7, #16]

  if (HID_Handle == NULL)
 8004c58:	693b      	ldr	r3, [r7, #16]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d101      	bne.n	8004c62 <USBH_HID_InterfaceInit+0x6e>
  {
    USBH_DbgLog("Cannot allocate memory for HID Handle");
    return USBH_FAIL;
 8004c5e:	2302      	movs	r3, #2
 8004c60:	e0ea      	b.n	8004e38 <USBH_HID_InterfaceInit+0x244>
  }

  /* Initialize hid handler */
  USBH_memset(HID_Handle, 0, sizeof(HID_HandleTypeDef));
 8004c62:	2234      	movs	r2, #52	; 0x34
 8004c64:	2100      	movs	r1, #0
 8004c66:	6938      	ldr	r0, [r7, #16]
 8004c68:	f002 fd5e 	bl	8007728 <memset>

  HID_Handle->state = HID_ERROR;
 8004c6c:	693b      	ldr	r3, [r7, #16]
 8004c6e:	2207      	movs	r2, #7
 8004c70:	709a      	strb	r2, [r3, #2]

  /*Decode Bootclass Protocol: Mouse or Keyboard*/
  if (phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol == HID_KEYBRD_BOOT_CODE)
 8004c72:	7dbb      	ldrb	r3, [r7, #22]
 8004c74:	687a      	ldr	r2, [r7, #4]
 8004c76:	211a      	movs	r1, #26
 8004c78:	fb01 f303 	mul.w	r3, r1, r3
 8004c7c:	4413      	add	r3, r2
 8004c7e:	f203 3349 	addw	r3, r3, #841	; 0x349
 8004c82:	781b      	ldrb	r3, [r3, #0]
 8004c84:	2b01      	cmp	r3, #1
 8004c86:	d103      	bne.n	8004c90 <USBH_HID_InterfaceInit+0x9c>
  {
    USBH_UsrLog("KeyBoard device found!");
    HID_Handle->Init = USBH_HID_KeybdInit;
 8004c88:	693b      	ldr	r3, [r7, #16]
 8004c8a:	4a6d      	ldr	r2, [pc, #436]	; (8004e40 <USBH_HID_InterfaceInit+0x24c>)
 8004c8c:	631a      	str	r2, [r3, #48]	; 0x30
 8004c8e:	e010      	b.n	8004cb2 <USBH_HID_InterfaceInit+0xbe>
  }
  else if (phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol  == HID_MOUSE_BOOT_CODE)
 8004c90:	7dbb      	ldrb	r3, [r7, #22]
 8004c92:	687a      	ldr	r2, [r7, #4]
 8004c94:	211a      	movs	r1, #26
 8004c96:	fb01 f303 	mul.w	r3, r1, r3
 8004c9a:	4413      	add	r3, r2
 8004c9c:	f203 3349 	addw	r3, r3, #841	; 0x349
 8004ca0:	781b      	ldrb	r3, [r3, #0]
 8004ca2:	2b02      	cmp	r3, #2
 8004ca4:	d103      	bne.n	8004cae <USBH_HID_InterfaceInit+0xba>
  {
    USBH_UsrLog("Mouse device found!");
    HID_Handle->Init = USBH_HID_MouseInit;
 8004ca6:	693b      	ldr	r3, [r7, #16]
 8004ca8:	4a66      	ldr	r2, [pc, #408]	; (8004e44 <USBH_HID_InterfaceInit+0x250>)
 8004caa:	631a      	str	r2, [r3, #48]	; 0x30
 8004cac:	e001      	b.n	8004cb2 <USBH_HID_InterfaceInit+0xbe>
  }
  else
  {
    USBH_UsrLog("Protocol not supported.");
    return USBH_FAIL;
 8004cae:	2302      	movs	r3, #2
 8004cb0:	e0c2      	b.n	8004e38 <USBH_HID_InterfaceInit+0x244>
  }

  HID_Handle->state     = HID_INIT;
 8004cb2:	693b      	ldr	r3, [r7, #16]
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	709a      	strb	r2, [r3, #2]
  HID_Handle->ctl_state = HID_REQ_INIT;
 8004cb8:	693b      	ldr	r3, [r7, #16]
 8004cba:	2200      	movs	r2, #0
 8004cbc:	715a      	strb	r2, [r3, #5]
  HID_Handle->ep_addr   = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8004cbe:	7dbb      	ldrb	r3, [r7, #22]
 8004cc0:	687a      	ldr	r2, [r7, #4]
 8004cc2:	211a      	movs	r1, #26
 8004cc4:	fb01 f303 	mul.w	r3, r1, r3
 8004cc8:	4413      	add	r3, r2
 8004cca:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8004cce:	781a      	ldrb	r2, [r3, #0]
 8004cd0:	693b      	ldr	r3, [r7, #16]
 8004cd2:	769a      	strb	r2, [r3, #26]
  HID_Handle->length    = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8004cd4:	7dbb      	ldrb	r3, [r7, #22]
 8004cd6:	687a      	ldr	r2, [r7, #4]
 8004cd8:	211a      	movs	r1, #26
 8004cda:	fb01 f303 	mul.w	r3, r1, r3
 8004cde:	4413      	add	r3, r2
 8004ce0:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8004ce4:	881a      	ldrh	r2, [r3, #0]
 8004ce6:	693b      	ldr	r3, [r7, #16]
 8004ce8:	831a      	strh	r2, [r3, #24]
  HID_Handle->poll      = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bInterval;
 8004cea:	7dbb      	ldrb	r3, [r7, #22]
 8004cec:	687a      	ldr	r2, [r7, #4]
 8004cee:	211a      	movs	r1, #26
 8004cf0:	fb01 f303 	mul.w	r3, r1, r3
 8004cf4:	4413      	add	r3, r2
 8004cf6:	f203 3352 	addw	r3, r3, #850	; 0x352
 8004cfa:	781b      	ldrb	r3, [r3, #0]
 8004cfc:	b29a      	uxth	r2, r3
 8004cfe:	693b      	ldr	r3, [r7, #16]
 8004d00:	839a      	strh	r2, [r3, #28]

  if (HID_Handle->poll  < HID_MIN_POLL)
 8004d02:	693b      	ldr	r3, [r7, #16]
 8004d04:	8b9b      	ldrh	r3, [r3, #28]
 8004d06:	2b09      	cmp	r3, #9
 8004d08:	d802      	bhi.n	8004d10 <USBH_HID_InterfaceInit+0x11c>
  {
    HID_Handle->poll = HID_MIN_POLL;
 8004d0a:	693b      	ldr	r3, [r7, #16]
 8004d0c:	220a      	movs	r2, #10
 8004d0e:	839a      	strh	r2, [r3, #28]
  }

  /* Check fo available number of endpoints */
  /* Find the number of EPs in the Interface Descriptor */
  /* Choose the lower number in order not to overrun the buffer allocated */
  max_ep = ((phost->device.CfgDesc.Itf_Desc[interface].bNumEndpoints <= USBH_MAX_NUM_ENDPOINTS) ?
 8004d10:	7dbb      	ldrb	r3, [r7, #22]
 8004d12:	687a      	ldr	r2, [r7, #4]
 8004d14:	211a      	movs	r1, #26
 8004d16:	fb01 f303 	mul.w	r3, r1, r3
 8004d1a:	4413      	add	r3, r2
 8004d1c:	f203 3346 	addw	r3, r3, #838	; 0x346
 8004d20:	781b      	ldrb	r3, [r3, #0]
 8004d22:	2b02      	cmp	r3, #2
 8004d24:	bf28      	it	cs
 8004d26:	2302      	movcs	r3, #2
 8004d28:	73fb      	strb	r3, [r7, #15]
             phost->device.CfgDesc.Itf_Desc[interface].bNumEndpoints : USBH_MAX_NUM_ENDPOINTS);


  /* Decode endpoint IN and OUT address from interface descriptor */
  for (num = 0U; num < max_ep; num++)
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	75fb      	strb	r3, [r7, #23]
 8004d2e:	e07d      	b.n	8004e2c <USBH_HID_InterfaceInit+0x238>
  {
    if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[num].bEndpointAddress & 0x80U)
 8004d30:	7dbb      	ldrb	r3, [r7, #22]
 8004d32:	7df9      	ldrb	r1, [r7, #23]
 8004d34:	687a      	ldr	r2, [r7, #4]
 8004d36:	3101      	adds	r1, #1
 8004d38:	00c9      	lsls	r1, r1, #3
 8004d3a:	201a      	movs	r0, #26
 8004d3c:	fb00 f303 	mul.w	r3, r0, r3
 8004d40:	440b      	add	r3, r1
 8004d42:	4413      	add	r3, r2
 8004d44:	f203 3346 	addw	r3, r3, #838	; 0x346
 8004d48:	781b      	ldrb	r3, [r3, #0]
 8004d4a:	b25b      	sxtb	r3, r3
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	da35      	bge.n	8004dbc <USBH_HID_InterfaceInit+0x1c8>
    {
      HID_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[num].bEndpointAddress);
 8004d50:	7dbb      	ldrb	r3, [r7, #22]
 8004d52:	7df9      	ldrb	r1, [r7, #23]
 8004d54:	687a      	ldr	r2, [r7, #4]
 8004d56:	3101      	adds	r1, #1
 8004d58:	00c9      	lsls	r1, r1, #3
 8004d5a:	201a      	movs	r0, #26
 8004d5c:	fb00 f303 	mul.w	r3, r0, r3
 8004d60:	440b      	add	r3, r1
 8004d62:	4413      	add	r3, r2
 8004d64:	f203 3346 	addw	r3, r3, #838	; 0x346
 8004d68:	781a      	ldrb	r2, [r3, #0]
 8004d6a:	693b      	ldr	r3, [r7, #16]
 8004d6c:	711a      	strb	r2, [r3, #4]
      HID_Handle->InPipe = USBH_AllocPipe(phost, HID_Handle->InEp);
 8004d6e:	693b      	ldr	r3, [r7, #16]
 8004d70:	791b      	ldrb	r3, [r3, #4]
 8004d72:	4619      	mov	r1, r3
 8004d74:	6878      	ldr	r0, [r7, #4]
 8004d76:	f002 f930 	bl	8006fda <USBH_AllocPipe>
 8004d7a:	4603      	mov	r3, r0
 8004d7c:	461a      	mov	r2, r3
 8004d7e:	693b      	ldr	r3, [r7, #16]
 8004d80:	705a      	strb	r2, [r3, #1]

      /* Open pipe for IN endpoint */
      USBH_OpenPipe(phost, HID_Handle->InPipe, HID_Handle->InEp, phost->device.address,
 8004d82:	693b      	ldr	r3, [r7, #16]
 8004d84:	7859      	ldrb	r1, [r3, #1]
 8004d86:	693b      	ldr	r3, [r7, #16]
 8004d88:	7918      	ldrb	r0, [r3, #4]
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8004d96:	693a      	ldr	r2, [r7, #16]
 8004d98:	8b12      	ldrh	r2, [r2, #24]
 8004d9a:	9202      	str	r2, [sp, #8]
 8004d9c:	2203      	movs	r2, #3
 8004d9e:	9201      	str	r2, [sp, #4]
 8004da0:	9300      	str	r3, [sp, #0]
 8004da2:	4623      	mov	r3, r4
 8004da4:	4602      	mov	r2, r0
 8004da6:	6878      	ldr	r0, [r7, #4]
 8004da8:	f002 f8e8 	bl	8006f7c <USBH_OpenPipe>
                    phost->device.speed, USB_EP_TYPE_INTR, HID_Handle->length);

      USBH_LL_SetToggle(phost, HID_Handle->InPipe, 0U);
 8004dac:	693b      	ldr	r3, [r7, #16]
 8004dae:	785b      	ldrb	r3, [r3, #1]
 8004db0:	2200      	movs	r2, #0
 8004db2:	4619      	mov	r1, r3
 8004db4:	6878      	ldr	r0, [r7, #4]
 8004db6:	f002 fbf7 	bl	80075a8 <USBH_LL_SetToggle>
 8004dba:	e034      	b.n	8004e26 <USBH_HID_InterfaceInit+0x232>
    }
    else
    {
      HID_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[num].bEndpointAddress);
 8004dbc:	7dbb      	ldrb	r3, [r7, #22]
 8004dbe:	7df9      	ldrb	r1, [r7, #23]
 8004dc0:	687a      	ldr	r2, [r7, #4]
 8004dc2:	3101      	adds	r1, #1
 8004dc4:	00c9      	lsls	r1, r1, #3
 8004dc6:	201a      	movs	r0, #26
 8004dc8:	fb00 f303 	mul.w	r3, r0, r3
 8004dcc:	440b      	add	r3, r1
 8004dce:	4413      	add	r3, r2
 8004dd0:	f203 3346 	addw	r3, r3, #838	; 0x346
 8004dd4:	781a      	ldrb	r2, [r3, #0]
 8004dd6:	693b      	ldr	r3, [r7, #16]
 8004dd8:	70da      	strb	r2, [r3, #3]
      HID_Handle->OutPipe  = USBH_AllocPipe(phost, HID_Handle->OutEp);
 8004dda:	693b      	ldr	r3, [r7, #16]
 8004ddc:	78db      	ldrb	r3, [r3, #3]
 8004dde:	4619      	mov	r1, r3
 8004de0:	6878      	ldr	r0, [r7, #4]
 8004de2:	f002 f8fa 	bl	8006fda <USBH_AllocPipe>
 8004de6:	4603      	mov	r3, r0
 8004de8:	461a      	mov	r2, r3
 8004dea:	693b      	ldr	r3, [r7, #16]
 8004dec:	701a      	strb	r2, [r3, #0]

      /* Open pipe for OUT endpoint */
      USBH_OpenPipe(phost, HID_Handle->OutPipe, HID_Handle->OutEp, phost->device.address,
 8004dee:	693b      	ldr	r3, [r7, #16]
 8004df0:	7819      	ldrb	r1, [r3, #0]
 8004df2:	693b      	ldr	r3, [r7, #16]
 8004df4:	78d8      	ldrb	r0, [r3, #3]
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8004e02:	693a      	ldr	r2, [r7, #16]
 8004e04:	8b12      	ldrh	r2, [r2, #24]
 8004e06:	9202      	str	r2, [sp, #8]
 8004e08:	2203      	movs	r2, #3
 8004e0a:	9201      	str	r2, [sp, #4]
 8004e0c:	9300      	str	r3, [sp, #0]
 8004e0e:	4623      	mov	r3, r4
 8004e10:	4602      	mov	r2, r0
 8004e12:	6878      	ldr	r0, [r7, #4]
 8004e14:	f002 f8b2 	bl	8006f7c <USBH_OpenPipe>
                    phost->device.speed, USB_EP_TYPE_INTR, HID_Handle->length);

      USBH_LL_SetToggle(phost, HID_Handle->OutPipe, 0U);
 8004e18:	693b      	ldr	r3, [r7, #16]
 8004e1a:	781b      	ldrb	r3, [r3, #0]
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	4619      	mov	r1, r3
 8004e20:	6878      	ldr	r0, [r7, #4]
 8004e22:	f002 fbc1 	bl	80075a8 <USBH_LL_SetToggle>
  for (num = 0U; num < max_ep; num++)
 8004e26:	7dfb      	ldrb	r3, [r7, #23]
 8004e28:	3301      	adds	r3, #1
 8004e2a:	75fb      	strb	r3, [r7, #23]
 8004e2c:	7dfa      	ldrb	r2, [r7, #23]
 8004e2e:	7bfb      	ldrb	r3, [r7, #15]
 8004e30:	429a      	cmp	r2, r3
 8004e32:	f4ff af7d 	bcc.w	8004d30 <USBH_HID_InterfaceInit+0x13c>
    }
  }

  return USBH_OK;
 8004e36:	2300      	movs	r3, #0
}
 8004e38:	4618      	mov	r0, r3
 8004e3a:	371c      	adds	r7, #28
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	bd90      	pop	{r4, r7, pc}
 8004e40:	08005545 	.word	0x08005545
 8004e44:	08005795 	.word	0x08005795

08004e48 <USBH_HID_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the HID class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b084      	sub	sp, #16
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004e56:	69db      	ldr	r3, [r3, #28]
 8004e58:	60fb      	str	r3, [r7, #12]

  if (HID_Handle->InPipe != 0x00U)
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	785b      	ldrb	r3, [r3, #1]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d00e      	beq.n	8004e80 <USBH_HID_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, HID_Handle->InPipe);
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	785b      	ldrb	r3, [r3, #1]
 8004e66:	4619      	mov	r1, r3
 8004e68:	6878      	ldr	r0, [r7, #4]
 8004e6a:	f002 f8a6 	bl	8006fba <USBH_ClosePipe>
    USBH_FreePipe(phost, HID_Handle->InPipe);
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	785b      	ldrb	r3, [r3, #1]
 8004e72:	4619      	mov	r1, r3
 8004e74:	6878      	ldr	r0, [r7, #4]
 8004e76:	f002 f8d1 	bl	800701c <USBH_FreePipe>
    HID_Handle->InPipe = 0U;     /* Reset the pipe as Free */
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	705a      	strb	r2, [r3, #1]
  }

  if (HID_Handle->OutPipe != 0x00U)
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	781b      	ldrb	r3, [r3, #0]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d00e      	beq.n	8004ea6 <USBH_HID_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, HID_Handle->OutPipe);
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	781b      	ldrb	r3, [r3, #0]
 8004e8c:	4619      	mov	r1, r3
 8004e8e:	6878      	ldr	r0, [r7, #4]
 8004e90:	f002 f893 	bl	8006fba <USBH_ClosePipe>
    USBH_FreePipe(phost, HID_Handle->OutPipe);
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	781b      	ldrb	r3, [r3, #0]
 8004e98:	4619      	mov	r1, r3
 8004e9a:	6878      	ldr	r0, [r7, #4]
 8004e9c:	f002 f8be 	bl	800701c <USBH_FreePipe>
    HID_Handle->OutPipe = 0U;     /* Reset the pipe as Free */
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	701a      	strb	r2, [r3, #0]
  }

  if (phost->pActiveClass->pData)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004eac:	69db      	ldr	r3, [r3, #28]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d00b      	beq.n	8004eca <USBH_HID_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004eb8:	69db      	ldr	r3, [r3, #28]
 8004eba:	4618      	mov	r0, r3
 8004ebc:	f002 fc2c 	bl	8007718 <free>
    phost->pActiveClass->pData = 0U;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8004eca:	2300      	movs	r3, #0
}
 8004ecc:	4618      	mov	r0, r3
 8004ece:	3710      	adds	r7, #16
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	bd80      	pop	{r7, pc}

08004ed4 <USBH_HID_ClassRequest>:
  *         for HID class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_ClassRequest(USBH_HandleTypeDef *phost)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b084      	sub	sp, #16
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status         = USBH_BUSY;
 8004edc:	2301      	movs	r3, #1
 8004ede:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef classReqStatus = USBH_BUSY;
 8004ee0:	2301      	movs	r3, #1
 8004ee2:	73bb      	strb	r3, [r7, #14]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004eea:	69db      	ldr	r3, [r3, #28]
 8004eec:	60bb      	str	r3, [r7, #8]

  /* Switch HID state machine */
  switch (HID_Handle->ctl_state)
 8004eee:	68bb      	ldr	r3, [r7, #8]
 8004ef0:	795b      	ldrb	r3, [r3, #5]
 8004ef2:	2b05      	cmp	r3, #5
 8004ef4:	d860      	bhi.n	8004fb8 <USBH_HID_ClassRequest+0xe4>
 8004ef6:	a201      	add	r2, pc, #4	; (adr r2, 8004efc <USBH_HID_ClassRequest+0x28>)
 8004ef8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004efc:	08004f15 	.word	0x08004f15
 8004f00:	08004fb9 	.word	0x08004fb9
 8004f04:	08004f2f 	.word	0x08004f2f
 8004f08:	08004f15 	.word	0x08004f15
 8004f0c:	08004f59 	.word	0x08004f59
 8004f10:	08004f83 	.word	0x08004f83
  {
  case HID_REQ_INIT:
  case HID_REQ_GET_HID_DESC:

    USBH_HID_ParseHIDDesc(&HID_Handle->HID_Desc, phost->device.CfgDesc_Raw);
 8004f14:	68bb      	ldr	r3, [r7, #8]
 8004f16:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	331c      	adds	r3, #28
 8004f1e:	4619      	mov	r1, r3
 8004f20:	4610      	mov	r0, r2
 8004f22:	f000 f9cd 	bl	80052c0 <USBH_HID_ParseHIDDesc>

    HID_Handle->ctl_state = HID_REQ_GET_REPORT_DESC;
 8004f26:	68bb      	ldr	r3, [r7, #8]
 8004f28:	2202      	movs	r2, #2
 8004f2a:	715a      	strb	r2, [r3, #5]

    break;
 8004f2c:	e04b      	b.n	8004fc6 <USBH_HID_ClassRequest+0xf2>
  case HID_REQ_GET_REPORT_DESC:

    /* Get Report Desc */
    classReqStatus = USBH_HID_GetHIDReportDescriptor(phost, HID_Handle->HID_Desc.wItemLength);
 8004f2e:	68bb      	ldr	r3, [r7, #8]
 8004f30:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004f32:	4619      	mov	r1, r3
 8004f34:	6878      	ldr	r0, [r7, #4]
 8004f36:	f000 f930 	bl	800519a <USBH_HID_GetHIDReportDescriptor>
 8004f3a:	4603      	mov	r3, r0
 8004f3c:	73bb      	strb	r3, [r7, #14]
    if (classReqStatus == USBH_OK)
 8004f3e:	7bbb      	ldrb	r3, [r7, #14]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d103      	bne.n	8004f4c <USBH_HID_ClassRequest+0x78>
    {
      /* The descriptor is available in phost->device.Data */
      HID_Handle->ctl_state = HID_REQ_SET_IDLE;
 8004f44:	68bb      	ldr	r3, [r7, #8]
 8004f46:	2204      	movs	r2, #4
 8004f48:	715a      	strb	r2, [r3, #5]
    else
    {
      /* .. */
    }

    break;
 8004f4a:	e037      	b.n	8004fbc <USBH_HID_ClassRequest+0xe8>
    else if (classReqStatus == USBH_NOT_SUPPORTED)
 8004f4c:	7bbb      	ldrb	r3, [r7, #14]
 8004f4e:	2b03      	cmp	r3, #3
 8004f50:	d134      	bne.n	8004fbc <USBH_HID_ClassRequest+0xe8>
      status = USBH_FAIL;
 8004f52:	2302      	movs	r3, #2
 8004f54:	73fb      	strb	r3, [r7, #15]
    break;
 8004f56:	e031      	b.n	8004fbc <USBH_HID_ClassRequest+0xe8>

  case HID_REQ_SET_IDLE:

    classReqStatus = USBH_HID_SetIdle(phost, 0U, 0U);
 8004f58:	2200      	movs	r2, #0
 8004f5a:	2100      	movs	r1, #0
 8004f5c:	6878      	ldr	r0, [r7, #4]
 8004f5e:	f000 f935 	bl	80051cc <USBH_HID_SetIdle>
 8004f62:	4603      	mov	r3, r0
 8004f64:	73bb      	strb	r3, [r7, #14]

    /* set Idle */
    if (classReqStatus == USBH_OK)
 8004f66:	7bbb      	ldrb	r3, [r7, #14]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d103      	bne.n	8004f74 <USBH_HID_ClassRequest+0xa0>
    {
      HID_Handle->ctl_state = HID_REQ_SET_PROTOCOL;
 8004f6c:	68bb      	ldr	r3, [r7, #8]
 8004f6e:	2205      	movs	r2, #5
 8004f70:	715a      	strb	r2, [r3, #5]
      if (classReqStatus == USBH_NOT_SUPPORTED)
      {
        HID_Handle->ctl_state = HID_REQ_SET_PROTOCOL;
      }
    }
    break;
 8004f72:	e025      	b.n	8004fc0 <USBH_HID_ClassRequest+0xec>
      if (classReqStatus == USBH_NOT_SUPPORTED)
 8004f74:	7bbb      	ldrb	r3, [r7, #14]
 8004f76:	2b03      	cmp	r3, #3
 8004f78:	d122      	bne.n	8004fc0 <USBH_HID_ClassRequest+0xec>
        HID_Handle->ctl_state = HID_REQ_SET_PROTOCOL;
 8004f7a:	68bb      	ldr	r3, [r7, #8]
 8004f7c:	2205      	movs	r2, #5
 8004f7e:	715a      	strb	r2, [r3, #5]
    break;
 8004f80:	e01e      	b.n	8004fc0 <USBH_HID_ClassRequest+0xec>

  case HID_REQ_SET_PROTOCOL:
    /* set protocol */
    classReqStatus = USBH_HID_SetProtocol(phost, 0U);
 8004f82:	2100      	movs	r1, #0
 8004f84:	6878      	ldr	r0, [r7, #4]
 8004f86:	f000 f975 	bl	8005274 <USBH_HID_SetProtocol>
 8004f8a:	4603      	mov	r3, r0
 8004f8c:	73bb      	strb	r3, [r7, #14]
    if (classReqStatus == USBH_OK)
 8004f8e:	7bbb      	ldrb	r3, [r7, #14]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d10b      	bne.n	8004fac <USBH_HID_ClassRequest+0xd8>
    {
      HID_Handle->ctl_state = HID_REQ_IDLE;
 8004f94:	68bb      	ldr	r3, [r7, #8]
 8004f96:	2201      	movs	r2, #1
 8004f98:	715a      	strb	r2, [r3, #5]

      /* all requests performed*/
      phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8004fa0:	2102      	movs	r1, #2
 8004fa2:	6878      	ldr	r0, [r7, #4]
 8004fa4:	4798      	blx	r3
      status = USBH_OK;
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	73fb      	strb	r3, [r7, #15]
    }
    else
    {
      /* .. */
    }
    break;
 8004faa:	e00b      	b.n	8004fc4 <USBH_HID_ClassRequest+0xf0>
    else if (classReqStatus == USBH_NOT_SUPPORTED)
 8004fac:	7bbb      	ldrb	r3, [r7, #14]
 8004fae:	2b03      	cmp	r3, #3
 8004fb0:	d108      	bne.n	8004fc4 <USBH_HID_ClassRequest+0xf0>
      status = USBH_FAIL;
 8004fb2:	2302      	movs	r3, #2
 8004fb4:	73fb      	strb	r3, [r7, #15]
    break;
 8004fb6:	e005      	b.n	8004fc4 <USBH_HID_ClassRequest+0xf0>

  case HID_REQ_IDLE:
  default:
    break;
 8004fb8:	bf00      	nop
 8004fba:	e004      	b.n	8004fc6 <USBH_HID_ClassRequest+0xf2>
    break;
 8004fbc:	bf00      	nop
 8004fbe:	e002      	b.n	8004fc6 <USBH_HID_ClassRequest+0xf2>
    break;
 8004fc0:	bf00      	nop
 8004fc2:	e000      	b.n	8004fc6 <USBH_HID_ClassRequest+0xf2>
    break;
 8004fc4:	bf00      	nop
  }

  return status;
 8004fc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fc8:	4618      	mov	r0, r3
 8004fca:	3710      	adds	r7, #16
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	bd80      	pop	{r7, pc}

08004fd0 <USBH_HID_Process>:
  *         The function is for managing state machine for HID data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_Process(USBH_HandleTypeDef *phost)
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b088      	sub	sp, #32
 8004fd4:	af02      	add	r7, sp, #8
 8004fd6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8004fd8:	2300      	movs	r3, #0
 8004fda:	75fb      	strb	r3, [r7, #23]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004fe2:	69db      	ldr	r3, [r3, #28]
 8004fe4:	613b      	str	r3, [r7, #16]
  uint32_t XferSize;

  switch (HID_Handle->state)
 8004fe6:	693b      	ldr	r3, [r7, #16]
 8004fe8:	789b      	ldrb	r3, [r3, #2]
 8004fea:	2b06      	cmp	r3, #6
 8004fec:	f200 80a9 	bhi.w	8005142 <USBH_HID_Process+0x172>
 8004ff0:	a201      	add	r2, pc, #4	; (adr r2, 8004ff8 <USBH_HID_Process+0x28>)
 8004ff2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ff6:	bf00      	nop
 8004ff8:	08005015 	.word	0x08005015
 8004ffc:	08005025 	.word	0x08005025
 8005000:	08005143 	.word	0x08005143
 8005004:	08005143 	.word	0x08005143
 8005008:	08005095 	.word	0x08005095
 800500c:	0800507f 	.word	0x0800507f
 8005010:	080050c3 	.word	0x080050c3
  {
    case HID_INIT:
      HID_Handle->Init(phost);
 8005014:	693b      	ldr	r3, [r7, #16]
 8005016:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005018:	6878      	ldr	r0, [r7, #4]
 800501a:	4798      	blx	r3
      HID_Handle->state = HID_IDLE;
 800501c:	693b      	ldr	r3, [r7, #16]
 800501e:	2201      	movs	r2, #1
 8005020:	709a      	strb	r2, [r3, #2]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8005022:	e093      	b.n	800514c <USBH_HID_Process+0x17c>

    case HID_IDLE:
      status = USBH_HID_GetReport(phost, 0x01U, 0U, HID_Handle->pData, (uint8_t)HID_Handle->length);
 8005024:	693b      	ldr	r3, [r7, #16]
 8005026:	695a      	ldr	r2, [r3, #20]
 8005028:	693b      	ldr	r3, [r7, #16]
 800502a:	8b1b      	ldrh	r3, [r3, #24]
 800502c:	b2db      	uxtb	r3, r3
 800502e:	9300      	str	r3, [sp, #0]
 8005030:	4613      	mov	r3, r2
 8005032:	2200      	movs	r2, #0
 8005034:	2101      	movs	r1, #1
 8005036:	6878      	ldr	r0, [r7, #4]
 8005038:	f000 f8f0 	bl	800521c <USBH_HID_GetReport>
 800503c:	4603      	mov	r3, r0
 800503e:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 8005040:	7dfb      	ldrb	r3, [r7, #23]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d103      	bne.n	800504e <USBH_HID_Process+0x7e>
      {
        HID_Handle->state = HID_SYNC;
 8005046:	693b      	ldr	r3, [r7, #16]
 8005048:	2205      	movs	r2, #5
 800504a:	709a      	strb	r2, [r3, #2]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800504c:	e07e      	b.n	800514c <USBH_HID_Process+0x17c>
      else if (status == USBH_BUSY)
 800504e:	7dfb      	ldrb	r3, [r7, #23]
 8005050:	2b01      	cmp	r3, #1
 8005052:	d105      	bne.n	8005060 <USBH_HID_Process+0x90>
        HID_Handle->state = HID_IDLE;
 8005054:	693b      	ldr	r3, [r7, #16]
 8005056:	2201      	movs	r2, #1
 8005058:	709a      	strb	r2, [r3, #2]
        status = USBH_OK;
 800505a:	2300      	movs	r3, #0
 800505c:	75fb      	strb	r3, [r7, #23]
      break;
 800505e:	e075      	b.n	800514c <USBH_HID_Process+0x17c>
      else if (status == USBH_NOT_SUPPORTED)
 8005060:	7dfb      	ldrb	r3, [r7, #23]
 8005062:	2b03      	cmp	r3, #3
 8005064:	d105      	bne.n	8005072 <USBH_HID_Process+0xa2>
        HID_Handle->state = HID_SYNC;
 8005066:	693b      	ldr	r3, [r7, #16]
 8005068:	2205      	movs	r2, #5
 800506a:	709a      	strb	r2, [r3, #2]
        status = USBH_OK;
 800506c:	2300      	movs	r3, #0
 800506e:	75fb      	strb	r3, [r7, #23]
      break;
 8005070:	e06c      	b.n	800514c <USBH_HID_Process+0x17c>
        HID_Handle->state = HID_ERROR;
 8005072:	693b      	ldr	r3, [r7, #16]
 8005074:	2207      	movs	r2, #7
 8005076:	709a      	strb	r2, [r3, #2]
        status = USBH_FAIL;
 8005078:	2302      	movs	r3, #2
 800507a:	75fb      	strb	r3, [r7, #23]
      break;
 800507c:	e066      	b.n	800514c <USBH_HID_Process+0x17c>

    case HID_SYNC:
      /* Sync with start of Even Frame */
      if (phost->Timer & 1U)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8005084:	f003 0301 	and.w	r3, r3, #1
 8005088:	2b00      	cmp	r3, #0
 800508a:	d05c      	beq.n	8005146 <USBH_HID_Process+0x176>
      {
        HID_Handle->state = HID_GET_DATA;
 800508c:	693b      	ldr	r3, [r7, #16]
 800508e:	2204      	movs	r2, #4
 8005090:	709a      	strb	r2, [r3, #2]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8005092:	e058      	b.n	8005146 <USBH_HID_Process+0x176>

    case HID_GET_DATA:
      USBH_InterruptReceiveData(phost, HID_Handle->pData,
 8005094:	693b      	ldr	r3, [r7, #16]
 8005096:	6959      	ldr	r1, [r3, #20]
                                (uint8_t)HID_Handle->length,
 8005098:	693b      	ldr	r3, [r7, #16]
 800509a:	8b1b      	ldrh	r3, [r3, #24]
      USBH_InterruptReceiveData(phost, HID_Handle->pData,
 800509c:	b2da      	uxtb	r2, r3
 800509e:	693b      	ldr	r3, [r7, #16]
 80050a0:	785b      	ldrb	r3, [r3, #1]
 80050a2:	6878      	ldr	r0, [r7, #4]
 80050a4:	f001 ff4b 	bl	8006f3e <USBH_InterruptReceiveData>
                                HID_Handle->InPipe);

      HID_Handle->state = HID_POLL;
 80050a8:	693b      	ldr	r3, [r7, #16]
 80050aa:	2206      	movs	r2, #6
 80050ac:	709a      	strb	r2, [r3, #2]
      HID_Handle->timer = phost->Timer;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 80050b4:	693b      	ldr	r3, [r7, #16]
 80050b6:	621a      	str	r2, [r3, #32]
      HID_Handle->DataReady = 0U;
 80050b8:	693b      	ldr	r3, [r7, #16]
 80050ba:	2200      	movs	r2, #0
 80050bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      break;
 80050c0:	e044      	b.n	800514c <USBH_HID_Process+0x17c>

    case HID_POLL:
      if (USBH_LL_GetURBState(phost, HID_Handle->InPipe) == USBH_URB_DONE)
 80050c2:	693b      	ldr	r3, [r7, #16]
 80050c4:	785b      	ldrb	r3, [r3, #1]
 80050c6:	4619      	mov	r1, r3
 80050c8:	6878      	ldr	r0, [r7, #4]
 80050ca:	f002 fa43 	bl	8007554 <USBH_LL_GetURBState>
 80050ce:	4603      	mov	r3, r0
 80050d0:	2b01      	cmp	r3, #1
 80050d2:	d120      	bne.n	8005116 <USBH_HID_Process+0x146>
      {
        XferSize = USBH_LL_GetLastXferSize(phost, HID_Handle->InPipe);
 80050d4:	693b      	ldr	r3, [r7, #16]
 80050d6:	785b      	ldrb	r3, [r3, #1]
 80050d8:	4619      	mov	r1, r3
 80050da:	6878      	ldr	r0, [r7, #4]
 80050dc:	f002 f9a8 	bl	8007430 <USBH_LL_GetLastXferSize>
 80050e0:	60f8      	str	r0, [r7, #12]

        if ((HID_Handle->DataReady == 0U) && (XferSize != 0U))
 80050e2:	693b      	ldr	r3, [r7, #16]
 80050e4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d12e      	bne.n	800514a <USBH_HID_Process+0x17a>
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d02b      	beq.n	800514a <USBH_HID_Process+0x17a>
        {
          USBH_HID_FifoWrite(&HID_Handle->fifo, HID_Handle->pData, HID_Handle->length);
 80050f2:	693b      	ldr	r3, [r7, #16]
 80050f4:	f103 0008 	add.w	r0, r3, #8
 80050f8:	693b      	ldr	r3, [r7, #16]
 80050fa:	6959      	ldr	r1, [r3, #20]
 80050fc:	693b      	ldr	r3, [r7, #16]
 80050fe:	8b1b      	ldrh	r3, [r3, #24]
 8005100:	461a      	mov	r2, r3
 8005102:	f000 f9ca 	bl	800549a <USBH_HID_FifoWrite>
          HID_Handle->DataReady = 1U;
 8005106:	693b      	ldr	r3, [r7, #16]
 8005108:	2201      	movs	r2, #1
 800510a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          USBH_HID_EventCallback(phost);
 800510e:	6878      	ldr	r0, [r7, #4]
 8005110:	f7fb fa2a 	bl	8000568 <USBH_HID_EventCallback>
            /* Change state to issue next IN token */
            HID_Handle->state = HID_GET_DATA;
          }
        }
      }
      break;
 8005114:	e019      	b.n	800514a <USBH_HID_Process+0x17a>
        if (USBH_LL_GetURBState(phost, HID_Handle->InPipe) == USBH_URB_STALL)
 8005116:	693b      	ldr	r3, [r7, #16]
 8005118:	785b      	ldrb	r3, [r3, #1]
 800511a:	4619      	mov	r1, r3
 800511c:	6878      	ldr	r0, [r7, #4]
 800511e:	f002 fa19 	bl	8007554 <USBH_LL_GetURBState>
 8005122:	4603      	mov	r3, r0
 8005124:	2b05      	cmp	r3, #5
 8005126:	d110      	bne.n	800514a <USBH_HID_Process+0x17a>
          if (USBH_ClrFeature(phost, HID_Handle->ep_addr) == USBH_OK)
 8005128:	693b      	ldr	r3, [r7, #16]
 800512a:	7e9b      	ldrb	r3, [r3, #26]
 800512c:	4619      	mov	r1, r3
 800512e:	6878      	ldr	r0, [r7, #4]
 8005130:	f001 fb17 	bl	8006762 <USBH_ClrFeature>
 8005134:	4603      	mov	r3, r0
 8005136:	2b00      	cmp	r3, #0
 8005138:	d107      	bne.n	800514a <USBH_HID_Process+0x17a>
            HID_Handle->state = HID_GET_DATA;
 800513a:	693b      	ldr	r3, [r7, #16]
 800513c:	2204      	movs	r2, #4
 800513e:	709a      	strb	r2, [r3, #2]
      break;
 8005140:	e003      	b.n	800514a <USBH_HID_Process+0x17a>

    default:
      break;
 8005142:	bf00      	nop
 8005144:	e002      	b.n	800514c <USBH_HID_Process+0x17c>
      break;
 8005146:	bf00      	nop
 8005148:	e000      	b.n	800514c <USBH_HID_Process+0x17c>
      break;
 800514a:	bf00      	nop
  }

  return status;
 800514c:	7dfb      	ldrb	r3, [r7, #23]
}
 800514e:	4618      	mov	r0, r3
 8005150:	3718      	adds	r7, #24
 8005152:	46bd      	mov	sp, r7
 8005154:	bd80      	pop	{r7, pc}
 8005156:	bf00      	nop

08005158 <USBH_HID_SOFProcess>:
  *         The function is for managing the SOF Process
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_SOFProcess(USBH_HandleTypeDef *phost)
{
 8005158:	b480      	push	{r7}
 800515a:	b085      	sub	sp, #20
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005166:	69db      	ldr	r3, [r3, #28]
 8005168:	60fb      	str	r3, [r7, #12]

  if (HID_Handle->state == HID_POLL)
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	789b      	ldrb	r3, [r3, #2]
 800516e:	2b06      	cmp	r3, #6
 8005170:	d10c      	bne.n	800518c <USBH_HID_SOFProcess+0x34>
  {
    if ((phost->Timer - HID_Handle->timer) >= HID_Handle->poll)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	6a1b      	ldr	r3, [r3, #32]
 800517c:	1ad3      	subs	r3, r2, r3
 800517e:	68fa      	ldr	r2, [r7, #12]
 8005180:	8b92      	ldrh	r2, [r2, #28]
 8005182:	4293      	cmp	r3, r2
 8005184:	d302      	bcc.n	800518c <USBH_HID_SOFProcess+0x34>
    {
      HID_Handle->state = HID_GET_DATA;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	2204      	movs	r2, #4
 800518a:	709a      	strb	r2, [r3, #2]
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
  }
  return USBH_OK;
 800518c:	2300      	movs	r3, #0
}
 800518e:	4618      	mov	r0, r3
 8005190:	3714      	adds	r7, #20
 8005192:	46bd      	mov	sp, r7
 8005194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005198:	4770      	bx	lr

0800519a <USBH_HID_GetHIDReportDescriptor>:
  * @param  Length : HID Report Descriptor Length
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_GetHIDReportDescriptor(USBH_HandleTypeDef *phost,
                                                   uint16_t length)
{
 800519a:	b580      	push	{r7, lr}
 800519c:	b086      	sub	sp, #24
 800519e:	af02      	add	r7, sp, #8
 80051a0:	6078      	str	r0, [r7, #4]
 80051a2:	460b      	mov	r3, r1
 80051a4:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_INTERFACE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_HID_REPORT,
                              phost->device.Data,
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 80051ac:	887b      	ldrh	r3, [r7, #2]
 80051ae:	9300      	str	r3, [sp, #0]
 80051b0:	4613      	mov	r3, r2
 80051b2:	f44f 5208 	mov.w	r2, #8704	; 0x2200
 80051b6:	2101      	movs	r1, #1
 80051b8:	6878      	ldr	r0, [r7, #4]
 80051ba:	f001 fa32 	bl	8006622 <USBH_GetDescriptor>
 80051be:	4603      	mov	r3, r0
 80051c0:	73fb      	strb	r3, [r7, #15]
  HID report descriptor parsing is not required.
  In case, for supporting Non-Boot Protocol devices and output reports,
  user may parse the report descriptor*/


  return status;
 80051c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80051c4:	4618      	mov	r0, r3
 80051c6:	3710      	adds	r7, #16
 80051c8:	46bd      	mov	sp, r7
 80051ca:	bd80      	pop	{r7, pc}

080051cc <USBH_HID_SetIdle>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_SetIdle(USBH_HandleTypeDef *phost,
                                    uint8_t duration,
                                    uint8_t reportId)
{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b082      	sub	sp, #8
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
 80051d4:	460b      	mov	r3, r1
 80051d6:	70fb      	strb	r3, [r7, #3]
 80051d8:	4613      	mov	r3, r2
 80051da:	70bb      	strb	r3, [r7, #2]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE | \
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2221      	movs	r2, #33	; 0x21
 80051e0:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_TYPE_CLASS;


  phost->Control.setup.b.bRequest = USB_HID_SET_IDLE;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	220a      	movs	r2, #10
 80051e6:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = (uint16_t)(((uint32_t)duration << 8U) | (uint32_t)reportId);
 80051e8:	78fb      	ldrb	r3, [r7, #3]
 80051ea:	b29b      	uxth	r3, r3
 80051ec:	021b      	lsls	r3, r3, #8
 80051ee:	b29a      	uxth	r2, r3
 80051f0:	78bb      	ldrb	r3, [r7, #2]
 80051f2:	b29b      	uxth	r3, r3
 80051f4:	4313      	orrs	r3, r2
 80051f6:	b29a      	uxth	r2, r3
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2200      	movs	r2, #0
 8005200:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2200      	movs	r2, #0
 8005206:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, 0U, 0U);
 8005208:	2200      	movs	r2, #0
 800520a:	2100      	movs	r1, #0
 800520c:	6878      	ldr	r0, [r7, #4]
 800520e:	f001 fc88 	bl	8006b22 <USBH_CtlReq>
 8005212:	4603      	mov	r3, r0
}
 8005214:	4618      	mov	r0, r3
 8005216:	3708      	adds	r7, #8
 8005218:	46bd      	mov	sp, r7
 800521a:	bd80      	pop	{r7, pc}

0800521c <USBH_HID_GetReport>:
USBH_StatusTypeDef USBH_HID_GetReport(USBH_HandleTypeDef *phost,
                                      uint8_t reportType,
                                      uint8_t reportId,
                                      uint8_t *reportBuff,
                                      uint8_t reportLen)
{
 800521c:	b580      	push	{r7, lr}
 800521e:	b084      	sub	sp, #16
 8005220:	af00      	add	r7, sp, #0
 8005222:	60f8      	str	r0, [r7, #12]
 8005224:	607b      	str	r3, [r7, #4]
 8005226:	460b      	mov	r3, r1
 8005228:	72fb      	strb	r3, [r7, #11]
 800522a:	4613      	mov	r3, r2
 800522c:	72bb      	strb	r3, [r7, #10]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_RECIPIENT_INTERFACE | \
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	22a1      	movs	r2, #161	; 0xa1
 8005232:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_TYPE_CLASS;


  phost->Control.setup.b.bRequest = USB_HID_GET_REPORT;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	2201      	movs	r2, #1
 8005238:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = (uint16_t)(((uint32_t)reportType << 8U) | (uint32_t)reportId);
 800523a:	7afb      	ldrb	r3, [r7, #11]
 800523c:	b29b      	uxth	r3, r3
 800523e:	021b      	lsls	r3, r3, #8
 8005240:	b29a      	uxth	r2, r3
 8005242:	7abb      	ldrb	r3, [r7, #10]
 8005244:	b29b      	uxth	r3, r3
 8005246:	4313      	orrs	r3, r2
 8005248:	b29a      	uxth	r2, r3
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	2200      	movs	r2, #0
 8005252:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = reportLen;
 8005254:	7e3b      	ldrb	r3, [r7, #24]
 8005256:	b29a      	uxth	r2, r3
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, reportBuff, (uint16_t)reportLen);
 800525c:	7e3b      	ldrb	r3, [r7, #24]
 800525e:	b29b      	uxth	r3, r3
 8005260:	461a      	mov	r2, r3
 8005262:	6879      	ldr	r1, [r7, #4]
 8005264:	68f8      	ldr	r0, [r7, #12]
 8005266:	f001 fc5c 	bl	8006b22 <USBH_CtlReq>
 800526a:	4603      	mov	r3, r0
}
 800526c:	4618      	mov	r0, r3
 800526e:	3710      	adds	r7, #16
 8005270:	46bd      	mov	sp, r7
 8005272:	bd80      	pop	{r7, pc}

08005274 <USBH_HID_SetProtocol>:
  * @param  protocol : Set Protocol for HID : boot/report protocol
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_SetProtocol(USBH_HandleTypeDef *phost,
                                        uint8_t protocol)
{
 8005274:	b580      	push	{r7, lr}
 8005276:	b082      	sub	sp, #8
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
 800527c:	460b      	mov	r3, r1
 800527e:	70fb      	strb	r3, [r7, #3]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2221      	movs	r2, #33	; 0x21
 8005284:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_TYPE_CLASS;

  phost->Control.setup.b.bRequest = USB_HID_SET_PROTOCOL;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	220b      	movs	r2, #11
 800528a:	745a      	strb	r2, [r3, #17]
  if (protocol)
 800528c:	78fb      	ldrb	r3, [r7, #3]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d003      	beq.n	800529a <USBH_HID_SetProtocol+0x26>
  {
    phost->Control.setup.b.wValue.w = 0U;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2200      	movs	r2, #0
 8005296:	825a      	strh	r2, [r3, #18]
 8005298:	e002      	b.n	80052a0 <USBH_HID_SetProtocol+0x2c>
  }
  else
  {
    phost->Control.setup.b.wValue.w = 1U;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2201      	movs	r2, #1
 800529e:	825a      	strh	r2, [r3, #18]
  }

  phost->Control.setup.b.wIndex.w = 0U;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2200      	movs	r2, #0
 80052a4:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2200      	movs	r2, #0
 80052aa:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, 0U, 0U);
 80052ac:	2200      	movs	r2, #0
 80052ae:	2100      	movs	r1, #0
 80052b0:	6878      	ldr	r0, [r7, #4]
 80052b2:	f001 fc36 	bl	8006b22 <USBH_CtlReq>
 80052b6:	4603      	mov	r3, r0

}
 80052b8:	4618      	mov	r0, r3
 80052ba:	3708      	adds	r7, #8
 80052bc:	46bd      	mov	sp, r7
 80052be:	bd80      	pop	{r7, pc}

080052c0 <USBH_HID_ParseHIDDesc>:
  * @param  desc: HID Descriptor
  * @param  buf: Buffer where the source descriptor is available
  * @retval None
  */
static void  USBH_HID_ParseHIDDesc(HID_DescTypeDef *desc, uint8_t *buf)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b084      	sub	sp, #16
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
 80052c8:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pdesc = (USBH_DescHeader_t *)buf;
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	60fb      	str	r3, [r7, #12]
  uint16_t CfgDescLen;
  uint16_t ptr;

  CfgDescLen = LE16(buf + 2U);
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	3302      	adds	r3, #2
 80052d2:	781b      	ldrb	r3, [r3, #0]
 80052d4:	b29a      	uxth	r2, r3
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	3303      	adds	r3, #3
 80052da:	781b      	ldrb	r3, [r3, #0]
 80052dc:	b29b      	uxth	r3, r3
 80052de:	021b      	lsls	r3, r3, #8
 80052e0:	b29b      	uxth	r3, r3
 80052e2:	4313      	orrs	r3, r2
 80052e4:	817b      	strh	r3, [r7, #10]

  if (CfgDescLen > USB_CONFIGURATION_DESC_SIZE)
 80052e6:	897b      	ldrh	r3, [r7, #10]
 80052e8:	2b09      	cmp	r3, #9
 80052ea:	d943      	bls.n	8005374 <USBH_HID_ParseHIDDesc+0xb4>
  {
    ptr = USB_LEN_CFG_DESC;
 80052ec:	2309      	movs	r3, #9
 80052ee:	813b      	strh	r3, [r7, #8]

    while (ptr < CfgDescLen)
 80052f0:	e03c      	b.n	800536c <USBH_HID_ParseHIDDesc+0xac>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)pdesc, &ptr);
 80052f2:	f107 0308 	add.w	r3, r7, #8
 80052f6:	4619      	mov	r1, r3
 80052f8:	68f8      	ldr	r0, [r7, #12]
 80052fa:	f001 fbf7 	bl	8006aec <USBH_GetNextDesc>
 80052fe:	60f8      	str	r0, [r7, #12]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_HID)
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	785b      	ldrb	r3, [r3, #1]
 8005304:	2b21      	cmp	r3, #33	; 0x21
 8005306:	d131      	bne.n	800536c <USBH_HID_ParseHIDDesc+0xac>
      {
        desc->bLength = *(uint8_t *)((uint8_t *)pdesc + 0U);
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	781a      	ldrb	r2, [r3, #0]
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	701a      	strb	r2, [r3, #0]
        desc->bDescriptorType = *(uint8_t *)((uint8_t *)pdesc + 1U);
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	785a      	ldrb	r2, [r3, #1]
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	705a      	strb	r2, [r3, #1]
        desc->bcdHID = LE16((uint8_t *)pdesc + 2U);
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	3302      	adds	r3, #2
 800531c:	781b      	ldrb	r3, [r3, #0]
 800531e:	b29a      	uxth	r2, r3
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	3303      	adds	r3, #3
 8005324:	781b      	ldrb	r3, [r3, #0]
 8005326:	b29b      	uxth	r3, r3
 8005328:	021b      	lsls	r3, r3, #8
 800532a:	b29b      	uxth	r3, r3
 800532c:	4313      	orrs	r3, r2
 800532e:	b29a      	uxth	r2, r3
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	805a      	strh	r2, [r3, #2]
        desc->bCountryCode = *(uint8_t *)((uint8_t *)pdesc + 4U);
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	791a      	ldrb	r2, [r3, #4]
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	711a      	strb	r2, [r3, #4]
        desc->bNumDescriptors = *(uint8_t *)((uint8_t *)pdesc + 5U);
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	795a      	ldrb	r2, [r3, #5]
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	715a      	strb	r2, [r3, #5]
        desc->bReportDescriptorType = *(uint8_t *)((uint8_t *)pdesc + 6U);
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	799a      	ldrb	r2, [r3, #6]
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	719a      	strb	r2, [r3, #6]
        desc->wItemLength = LE16((uint8_t *)pdesc + 7U);
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	3307      	adds	r3, #7
 8005350:	781b      	ldrb	r3, [r3, #0]
 8005352:	b29a      	uxth	r2, r3
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	3308      	adds	r3, #8
 8005358:	781b      	ldrb	r3, [r3, #0]
 800535a:	b29b      	uxth	r3, r3
 800535c:	021b      	lsls	r3, r3, #8
 800535e:	b29b      	uxth	r3, r3
 8005360:	4313      	orrs	r3, r2
 8005362:	b29a      	uxth	r2, r3
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	811a      	strh	r2, [r3, #8]
        break;
 8005368:	bf00      	nop
      }
    }
  }
}
 800536a:	e003      	b.n	8005374 <USBH_HID_ParseHIDDesc+0xb4>
    while (ptr < CfgDescLen)
 800536c:	893b      	ldrh	r3, [r7, #8]
 800536e:	897a      	ldrh	r2, [r7, #10]
 8005370:	429a      	cmp	r2, r3
 8005372:	d8be      	bhi.n	80052f2 <USBH_HID_ParseHIDDesc+0x32>
}
 8005374:	bf00      	nop
 8005376:	3710      	adds	r7, #16
 8005378:	46bd      	mov	sp, r7
 800537a:	bd80      	pop	{r7, pc}

0800537c <USBH_HID_GetDeviceType>:
  *         Return Device function.
  * @param  phost: Host handle
  * @retval HID function: HID_MOUSE / HID_KEYBOARD
  */
HID_TypeTypeDef USBH_HID_GetDeviceType(USBH_HandleTypeDef *phost)
{
 800537c:	b480      	push	{r7}
 800537e:	b085      	sub	sp, #20
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
  HID_TypeTypeDef   type = HID_UNKNOWN;
 8005384:	23ff      	movs	r3, #255	; 0xff
 8005386:	73fb      	strb	r3, [r7, #15]
  uint8_t InterfaceProtocol;

  if (phost->gState == HOST_CLASS)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	781b      	ldrb	r3, [r3, #0]
 800538c:	b2db      	uxtb	r3, r3
 800538e:	2b0b      	cmp	r3, #11
 8005390:	d117      	bne.n	80053c2 <USBH_HID_GetDeviceType+0x46>
  {
    InterfaceProtocol = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].bInterfaceProtocol;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
 8005398:	4619      	mov	r1, r3
 800539a:	687a      	ldr	r2, [r7, #4]
 800539c:	231a      	movs	r3, #26
 800539e:	fb03 f301 	mul.w	r3, r3, r1
 80053a2:	4413      	add	r3, r2
 80053a4:	f203 3349 	addw	r3, r3, #841	; 0x349
 80053a8:	781b      	ldrb	r3, [r3, #0]
 80053aa:	73bb      	strb	r3, [r7, #14]
    if (InterfaceProtocol == HID_KEYBRD_BOOT_CODE)
 80053ac:	7bbb      	ldrb	r3, [r7, #14]
 80053ae:	2b01      	cmp	r3, #1
 80053b0:	d102      	bne.n	80053b8 <USBH_HID_GetDeviceType+0x3c>
    {
      type = HID_KEYBOARD;
 80053b2:	2302      	movs	r3, #2
 80053b4:	73fb      	strb	r3, [r7, #15]
 80053b6:	e004      	b.n	80053c2 <USBH_HID_GetDeviceType+0x46>
    }
    else
    {
      if (InterfaceProtocol == HID_MOUSE_BOOT_CODE)
 80053b8:	7bbb      	ldrb	r3, [r7, #14]
 80053ba:	2b02      	cmp	r3, #2
 80053bc:	d101      	bne.n	80053c2 <USBH_HID_GetDeviceType+0x46>
      {
        type = HID_MOUSE;
 80053be:	2301      	movs	r3, #1
 80053c0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
  return type;
 80053c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80053c4:	4618      	mov	r0, r3
 80053c6:	3714      	adds	r7, #20
 80053c8:	46bd      	mov	sp, r7
 80053ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ce:	4770      	bx	lr

080053d0 <USBH_HID_FifoInit>:
  * @param  buf: Fifo buffer
  * @param  size: Fifo Size
  * @retval none
  */
void USBH_HID_FifoInit(FIFO_TypeDef *f, uint8_t *buf, uint16_t size)
{
 80053d0:	b480      	push	{r7}
 80053d2:	b085      	sub	sp, #20
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	60f8      	str	r0, [r7, #12]
 80053d8:	60b9      	str	r1, [r7, #8]
 80053da:	4613      	mov	r3, r2
 80053dc:	80fb      	strh	r3, [r7, #6]
  f->head = 0U;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	2200      	movs	r2, #0
 80053e2:	809a      	strh	r2, [r3, #4]
  f->tail = 0U;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	2200      	movs	r2, #0
 80053e8:	80da      	strh	r2, [r3, #6]
  f->lock = 0U;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	2200      	movs	r2, #0
 80053ee:	729a      	strb	r2, [r3, #10]
  f->size = size;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	88fa      	ldrh	r2, [r7, #6]
 80053f4:	811a      	strh	r2, [r3, #8]
  f->buf = buf;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	68ba      	ldr	r2, [r7, #8]
 80053fa:	601a      	str	r2, [r3, #0]
}
 80053fc:	bf00      	nop
 80053fe:	3714      	adds	r7, #20
 8005400:	46bd      	mov	sp, r7
 8005402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005406:	4770      	bx	lr

08005408 <USBH_HID_FifoRead>:
  * @param  buf: read buffer
  * @param  nbytes: number of item to read
  * @retval number of read items
  */
uint16_t USBH_HID_FifoRead(FIFO_TypeDef *f, void *buf, uint16_t nbytes)
{
 8005408:	b480      	push	{r7}
 800540a:	b087      	sub	sp, #28
 800540c:	af00      	add	r7, sp, #0
 800540e:	60f8      	str	r0, [r7, #12]
 8005410:	60b9      	str	r1, [r7, #8]
 8005412:	4613      	mov	r3, r2
 8005414:	80fb      	strh	r3, [r7, #6]
  uint16_t i;
  uint8_t *p;

  p = (uint8_t *) buf;
 8005416:	68bb      	ldr	r3, [r7, #8]
 8005418:	613b      	str	r3, [r7, #16]

  if (f->lock == 0U)
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	7a9b      	ldrb	r3, [r3, #10]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d131      	bne.n	8005486 <USBH_HID_FifoRead+0x7e>
  {
    f->lock = 1U;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	2201      	movs	r2, #1
 8005426:	729a      	strb	r2, [r3, #10]

    for (i = 0U; i < nbytes; i++)
 8005428:	2300      	movs	r3, #0
 800542a:	82fb      	strh	r3, [r7, #22]
 800542c:	e027      	b.n	800547e <USBH_HID_FifoRead+0x76>
    {
      if (f->tail != f->head)
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	88da      	ldrh	r2, [r3, #6]
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	889b      	ldrh	r3, [r3, #4]
 8005436:	429a      	cmp	r2, r3
 8005438:	d019      	beq.n	800546e <USBH_HID_FifoRead+0x66>
      {
        *p++ = f->buf[f->tail];
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	68fa      	ldr	r2, [r7, #12]
 8005440:	88d2      	ldrh	r2, [r2, #6]
 8005442:	441a      	add	r2, r3
 8005444:	693b      	ldr	r3, [r7, #16]
 8005446:	1c59      	adds	r1, r3, #1
 8005448:	6139      	str	r1, [r7, #16]
 800544a:	7812      	ldrb	r2, [r2, #0]
 800544c:	701a      	strb	r2, [r3, #0]
        f->tail++;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	88db      	ldrh	r3, [r3, #6]
 8005452:	3301      	adds	r3, #1
 8005454:	b29a      	uxth	r2, r3
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	80da      	strh	r2, [r3, #6]

        if (f->tail == f->size)
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	88da      	ldrh	r2, [r3, #6]
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	891b      	ldrh	r3, [r3, #8]
 8005462:	429a      	cmp	r2, r3
 8005464:	d108      	bne.n	8005478 <USBH_HID_FifoRead+0x70>
        {
          f->tail = 0U;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	2200      	movs	r2, #0
 800546a:	80da      	strh	r2, [r3, #6]
 800546c:	e004      	b.n	8005478 <USBH_HID_FifoRead+0x70>
        }
      }
      else
      {
        f->lock = 0U;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	2200      	movs	r2, #0
 8005472:	729a      	strb	r2, [r3, #10]
        return i;
 8005474:	8afb      	ldrh	r3, [r7, #22]
 8005476:	e00a      	b.n	800548e <USBH_HID_FifoRead+0x86>
    for (i = 0U; i < nbytes; i++)
 8005478:	8afb      	ldrh	r3, [r7, #22]
 800547a:	3301      	adds	r3, #1
 800547c:	82fb      	strh	r3, [r7, #22]
 800547e:	8afa      	ldrh	r2, [r7, #22]
 8005480:	88fb      	ldrh	r3, [r7, #6]
 8005482:	429a      	cmp	r2, r3
 8005484:	d3d3      	bcc.n	800542e <USBH_HID_FifoRead+0x26>
      }
    }
  }

  f->lock = 0U;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	2200      	movs	r2, #0
 800548a:	729a      	strb	r2, [r3, #10]

  return nbytes;
 800548c:	88fb      	ldrh	r3, [r7, #6]
}
 800548e:	4618      	mov	r0, r3
 8005490:	371c      	adds	r7, #28
 8005492:	46bd      	mov	sp, r7
 8005494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005498:	4770      	bx	lr

0800549a <USBH_HID_FifoWrite>:
  * @param  buf: read buffer
  * @param  nbytes: number of item to write
  * @retval number of written items
  */
uint16_t USBH_HID_FifoWrite(FIFO_TypeDef *f, void *buf, uint16_t  nbytes)
{
 800549a:	b480      	push	{r7}
 800549c:	b087      	sub	sp, #28
 800549e:	af00      	add	r7, sp, #0
 80054a0:	60f8      	str	r0, [r7, #12]
 80054a2:	60b9      	str	r1, [r7, #8]
 80054a4:	4613      	mov	r3, r2
 80054a6:	80fb      	strh	r3, [r7, #6]
  uint16_t i;
  uint8_t *p;

  p = (uint8_t *) buf;
 80054a8:	68bb      	ldr	r3, [r7, #8]
 80054aa:	613b      	str	r3, [r7, #16]

  if (f->lock == 0U)
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	7a9b      	ldrb	r3, [r3, #10]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d13c      	bne.n	800552e <USBH_HID_FifoWrite+0x94>
  {
    f->lock = 1U;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	2201      	movs	r2, #1
 80054b8:	729a      	strb	r2, [r3, #10]

    for (i = 0U; i < nbytes; i++)
 80054ba:	2300      	movs	r3, #0
 80054bc:	82fb      	strh	r3, [r7, #22]
 80054be:	e032      	b.n	8005526 <USBH_HID_FifoWrite+0x8c>
    {
      if ((f->head + 1U == f->tail) ||
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	889b      	ldrh	r3, [r3, #4]
 80054c4:	3301      	adds	r3, #1
 80054c6:	68fa      	ldr	r2, [r7, #12]
 80054c8:	88d2      	ldrh	r2, [r2, #6]
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d00a      	beq.n	80054e4 <USBH_HID_FifoWrite+0x4a>
          ((f->head + 1U == f->size) && (f->tail == 0U)))
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	889b      	ldrh	r3, [r3, #4]
 80054d2:	3301      	adds	r3, #1
 80054d4:	68fa      	ldr	r2, [r7, #12]
 80054d6:	8912      	ldrh	r2, [r2, #8]
      if ((f->head + 1U == f->tail) ||
 80054d8:	4293      	cmp	r3, r2
 80054da:	d108      	bne.n	80054ee <USBH_HID_FifoWrite+0x54>
          ((f->head + 1U == f->size) && (f->tail == 0U)))
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	88db      	ldrh	r3, [r3, #6]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d104      	bne.n	80054ee <USBH_HID_FifoWrite+0x54>
      {
        f->lock = 0U;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	2200      	movs	r2, #0
 80054e8:	729a      	strb	r2, [r3, #10]
        return i;
 80054ea:	8afb      	ldrh	r3, [r7, #22]
 80054ec:	e023      	b.n	8005536 <USBH_HID_FifoWrite+0x9c>
      }
      else
      {
        f->buf[f->head] = *p++;
 80054ee:	693b      	ldr	r3, [r7, #16]
 80054f0:	1c5a      	adds	r2, r3, #1
 80054f2:	613a      	str	r2, [r7, #16]
 80054f4:	68fa      	ldr	r2, [r7, #12]
 80054f6:	6812      	ldr	r2, [r2, #0]
 80054f8:	68f9      	ldr	r1, [r7, #12]
 80054fa:	8889      	ldrh	r1, [r1, #4]
 80054fc:	440a      	add	r2, r1
 80054fe:	781b      	ldrb	r3, [r3, #0]
 8005500:	7013      	strb	r3, [r2, #0]
        f->head++;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	889b      	ldrh	r3, [r3, #4]
 8005506:	3301      	adds	r3, #1
 8005508:	b29a      	uxth	r2, r3
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	809a      	strh	r2, [r3, #4]

        if (f->head == f->size)
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	889a      	ldrh	r2, [r3, #4]
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	891b      	ldrh	r3, [r3, #8]
 8005516:	429a      	cmp	r2, r3
 8005518:	d102      	bne.n	8005520 <USBH_HID_FifoWrite+0x86>
        {
          f->head = 0U;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	2200      	movs	r2, #0
 800551e:	809a      	strh	r2, [r3, #4]
    for (i = 0U; i < nbytes; i++)
 8005520:	8afb      	ldrh	r3, [r7, #22]
 8005522:	3301      	adds	r3, #1
 8005524:	82fb      	strh	r3, [r7, #22]
 8005526:	8afa      	ldrh	r2, [r7, #22]
 8005528:	88fb      	ldrh	r3, [r7, #6]
 800552a:	429a      	cmp	r2, r3
 800552c:	d3c8      	bcc.n	80054c0 <USBH_HID_FifoWrite+0x26>
        }
      }
    }
  }

  f->lock = 0U;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	2200      	movs	r2, #0
 8005532:	729a      	strb	r2, [r3, #10]

  return nbytes;
 8005534:	88fb      	ldrh	r3, [r7, #6]
}
 8005536:	4618      	mov	r0, r3
 8005538:	371c      	adds	r7, #28
 800553a:	46bd      	mov	sp, r7
 800553c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005540:	4770      	bx	lr
	...

08005544 <USBH_HID_KeybdInit>:
  *         The function init the HID keyboard.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_KeybdInit(USBH_HandleTypeDef *phost)
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b084      	sub	sp, #16
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
  uint32_t x;
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005552:	69db      	ldr	r3, [r3, #28]
 8005554:	60bb      	str	r3, [r7, #8]

  keybd_info.lctrl = keybd_info.lshift = 0U;
 8005556:	4b24      	ldr	r3, [pc, #144]	; (80055e8 <USBH_HID_KeybdInit+0xa4>)
 8005558:	2200      	movs	r2, #0
 800555a:	709a      	strb	r2, [r3, #2]
 800555c:	4b22      	ldr	r3, [pc, #136]	; (80055e8 <USBH_HID_KeybdInit+0xa4>)
 800555e:	789a      	ldrb	r2, [r3, #2]
 8005560:	4b21      	ldr	r3, [pc, #132]	; (80055e8 <USBH_HID_KeybdInit+0xa4>)
 8005562:	705a      	strb	r2, [r3, #1]
  keybd_info.lalt = keybd_info.lgui = 0U;
 8005564:	4b20      	ldr	r3, [pc, #128]	; (80055e8 <USBH_HID_KeybdInit+0xa4>)
 8005566:	2200      	movs	r2, #0
 8005568:	711a      	strb	r2, [r3, #4]
 800556a:	4b1f      	ldr	r3, [pc, #124]	; (80055e8 <USBH_HID_KeybdInit+0xa4>)
 800556c:	791a      	ldrb	r2, [r3, #4]
 800556e:	4b1e      	ldr	r3, [pc, #120]	; (80055e8 <USBH_HID_KeybdInit+0xa4>)
 8005570:	70da      	strb	r2, [r3, #3]
  keybd_info.rctrl = keybd_info.rshift = 0U;
 8005572:	4b1d      	ldr	r3, [pc, #116]	; (80055e8 <USBH_HID_KeybdInit+0xa4>)
 8005574:	2200      	movs	r2, #0
 8005576:	719a      	strb	r2, [r3, #6]
 8005578:	4b1b      	ldr	r3, [pc, #108]	; (80055e8 <USBH_HID_KeybdInit+0xa4>)
 800557a:	799a      	ldrb	r2, [r3, #6]
 800557c:	4b1a      	ldr	r3, [pc, #104]	; (80055e8 <USBH_HID_KeybdInit+0xa4>)
 800557e:	715a      	strb	r2, [r3, #5]
  keybd_info.ralt = keybd_info.rgui = 0U;
 8005580:	4b19      	ldr	r3, [pc, #100]	; (80055e8 <USBH_HID_KeybdInit+0xa4>)
 8005582:	2200      	movs	r2, #0
 8005584:	721a      	strb	r2, [r3, #8]
 8005586:	4b18      	ldr	r3, [pc, #96]	; (80055e8 <USBH_HID_KeybdInit+0xa4>)
 8005588:	7a1a      	ldrb	r2, [r3, #8]
 800558a:	4b17      	ldr	r3, [pc, #92]	; (80055e8 <USBH_HID_KeybdInit+0xa4>)
 800558c:	71da      	strb	r2, [r3, #7]


  for (x = 0U; x < (sizeof(keybd_report_data) / sizeof(uint32_t)); x++)
 800558e:	2300      	movs	r3, #0
 8005590:	60fb      	str	r3, [r7, #12]
 8005592:	e00c      	b.n	80055ae <USBH_HID_KeybdInit+0x6a>
  {
    keybd_report_data[x] = 0U;
 8005594:	4a15      	ldr	r2, [pc, #84]	; (80055ec <USBH_HID_KeybdInit+0xa8>)
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	2100      	movs	r1, #0
 800559a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    keybd_rx_report_buf[x] = 0U;
 800559e:	4a14      	ldr	r2, [pc, #80]	; (80055f0 <USBH_HID_KeybdInit+0xac>)
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	2100      	movs	r1, #0
 80055a4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for (x = 0U; x < (sizeof(keybd_report_data) / sizeof(uint32_t)); x++)
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	3301      	adds	r3, #1
 80055ac:	60fb      	str	r3, [r7, #12]
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	2b01      	cmp	r3, #1
 80055b2:	d9ef      	bls.n	8005594 <USBH_HID_KeybdInit+0x50>
  }

  if (HID_Handle->length > (sizeof(keybd_report_data)))
 80055b4:	68bb      	ldr	r3, [r7, #8]
 80055b6:	8b1b      	ldrh	r3, [r3, #24]
 80055b8:	2b08      	cmp	r3, #8
 80055ba:	d902      	bls.n	80055c2 <USBH_HID_KeybdInit+0x7e>
  {
    HID_Handle->length = (sizeof(keybd_report_data));
 80055bc:	68bb      	ldr	r3, [r7, #8]
 80055be:	2208      	movs	r2, #8
 80055c0:	831a      	strh	r2, [r3, #24]
  }
  HID_Handle->pData = (uint8_t *)(void *)keybd_rx_report_buf;
 80055c2:	68bb      	ldr	r3, [r7, #8]
 80055c4:	4a0a      	ldr	r2, [pc, #40]	; (80055f0 <USBH_HID_KeybdInit+0xac>)
 80055c6:	615a      	str	r2, [r3, #20]
  USBH_HID_FifoInit(&HID_Handle->fifo, phost->device.Data, HID_QUEUE_SIZE * sizeof(keybd_report_data));
 80055c8:	68bb      	ldr	r3, [r7, #8]
 80055ca:	f103 0008 	add.w	r0, r3, #8
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80055d4:	2250      	movs	r2, #80	; 0x50
 80055d6:	4619      	mov	r1, r3
 80055d8:	f7ff fefa 	bl	80053d0 <USBH_HID_FifoInit>

  return USBH_OK;
 80055dc:	2300      	movs	r3, #0
}
 80055de:	4618      	mov	r0, r3
 80055e0:	3710      	adds	r7, #16
 80055e2:	46bd      	mov	sp, r7
 80055e4:	bd80      	pop	{r7, pc}
 80055e6:	bf00      	nop
 80055e8:	20000178 	.word	0x20000178
 80055ec:	20000168 	.word	0x20000168
 80055f0:	20000170 	.word	0x20000170

080055f4 <USBH_HID_GetKeybdInfo>:
  *         The function return keyboard information.
  * @param  phost: Host handle
  * @retval keyboard information
  */
HID_KEYBD_Info_TypeDef *USBH_HID_GetKeybdInfo(USBH_HandleTypeDef *phost)
{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b082      	sub	sp, #8
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
  if (USBH_HID_KeybdDecode(phost) == USBH_OK)
 80055fc:	6878      	ldr	r0, [r7, #4]
 80055fe:	f000 f80d 	bl	800561c <USBH_HID_KeybdDecode>
 8005602:	4603      	mov	r3, r0
 8005604:	2b00      	cmp	r3, #0
 8005606:	d101      	bne.n	800560c <USBH_HID_GetKeybdInfo+0x18>
  {
    return &keybd_info;
 8005608:	4b03      	ldr	r3, [pc, #12]	; (8005618 <USBH_HID_GetKeybdInfo+0x24>)
 800560a:	e000      	b.n	800560e <USBH_HID_GetKeybdInfo+0x1a>
  }
  else
  {
    return NULL;
 800560c:	2300      	movs	r3, #0
  }
}
 800560e:	4618      	mov	r0, r3
 8005610:	3708      	adds	r7, #8
 8005612:	46bd      	mov	sp, r7
 8005614:	bd80      	pop	{r7, pc}
 8005616:	bf00      	nop
 8005618:	20000178 	.word	0x20000178

0800561c <USBH_HID_KeybdDecode>:
  *         The function decode keyboard data.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_KeybdDecode(USBH_HandleTypeDef *phost)
{
 800561c:	b580      	push	{r7, lr}
 800561e:	b084      	sub	sp, #16
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
  uint8_t x;

  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800562a:	69db      	ldr	r3, [r3, #28]
 800562c:	60bb      	str	r3, [r7, #8]
  if (HID_Handle->length == 0U)
 800562e:	68bb      	ldr	r3, [r7, #8]
 8005630:	8b1b      	ldrh	r3, [r3, #24]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d101      	bne.n	800563a <USBH_HID_KeybdDecode+0x1e>
  {
    return USBH_FAIL;
 8005636:	2302      	movs	r3, #2
 8005638:	e066      	b.n	8005708 <USBH_HID_KeybdDecode+0xec>
  }
  /*Fill report */
  if (USBH_HID_FifoRead(&HID_Handle->fifo, &keybd_report_data, HID_Handle->length) ==  HID_Handle->length)
 800563a:	68bb      	ldr	r3, [r7, #8]
 800563c:	f103 0008 	add.w	r0, r3, #8
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	8b1b      	ldrh	r3, [r3, #24]
 8005644:	461a      	mov	r2, r3
 8005646:	4932      	ldr	r1, [pc, #200]	; (8005710 <USBH_HID_KeybdDecode+0xf4>)
 8005648:	f7ff fede 	bl	8005408 <USBH_HID_FifoRead>
 800564c:	4603      	mov	r3, r0
 800564e:	461a      	mov	r2, r3
 8005650:	68bb      	ldr	r3, [r7, #8]
 8005652:	8b1b      	ldrh	r3, [r3, #24]
 8005654:	429a      	cmp	r2, r3
 8005656:	d156      	bne.n	8005706 <USBH_HID_KeybdDecode+0xea>
  {
    keybd_info.lctrl = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_lctrl, 0U);
 8005658:	2100      	movs	r1, #0
 800565a:	482e      	ldr	r0, [pc, #184]	; (8005714 <USBH_HID_KeybdDecode+0xf8>)
 800565c:	f000 f954 	bl	8005908 <HID_ReadItem>
 8005660:	4603      	mov	r3, r0
 8005662:	b2da      	uxtb	r2, r3
 8005664:	4b2c      	ldr	r3, [pc, #176]	; (8005718 <USBH_HID_KeybdDecode+0xfc>)
 8005666:	705a      	strb	r2, [r3, #1]
    keybd_info.lshift = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_lshift, 0U);
 8005668:	2100      	movs	r1, #0
 800566a:	482c      	ldr	r0, [pc, #176]	; (800571c <USBH_HID_KeybdDecode+0x100>)
 800566c:	f000 f94c 	bl	8005908 <HID_ReadItem>
 8005670:	4603      	mov	r3, r0
 8005672:	b2da      	uxtb	r2, r3
 8005674:	4b28      	ldr	r3, [pc, #160]	; (8005718 <USBH_HID_KeybdDecode+0xfc>)
 8005676:	709a      	strb	r2, [r3, #2]
    keybd_info.lalt = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_lalt, 0U);
 8005678:	2100      	movs	r1, #0
 800567a:	4829      	ldr	r0, [pc, #164]	; (8005720 <USBH_HID_KeybdDecode+0x104>)
 800567c:	f000 f944 	bl	8005908 <HID_ReadItem>
 8005680:	4603      	mov	r3, r0
 8005682:	b2da      	uxtb	r2, r3
 8005684:	4b24      	ldr	r3, [pc, #144]	; (8005718 <USBH_HID_KeybdDecode+0xfc>)
 8005686:	70da      	strb	r2, [r3, #3]
    keybd_info.lgui = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_lgui, 0U);
 8005688:	2100      	movs	r1, #0
 800568a:	4826      	ldr	r0, [pc, #152]	; (8005724 <USBH_HID_KeybdDecode+0x108>)
 800568c:	f000 f93c 	bl	8005908 <HID_ReadItem>
 8005690:	4603      	mov	r3, r0
 8005692:	b2da      	uxtb	r2, r3
 8005694:	4b20      	ldr	r3, [pc, #128]	; (8005718 <USBH_HID_KeybdDecode+0xfc>)
 8005696:	711a      	strb	r2, [r3, #4]
    keybd_info.rctrl = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_rctrl, 0U);
 8005698:	2100      	movs	r1, #0
 800569a:	4823      	ldr	r0, [pc, #140]	; (8005728 <USBH_HID_KeybdDecode+0x10c>)
 800569c:	f000 f934 	bl	8005908 <HID_ReadItem>
 80056a0:	4603      	mov	r3, r0
 80056a2:	b2da      	uxtb	r2, r3
 80056a4:	4b1c      	ldr	r3, [pc, #112]	; (8005718 <USBH_HID_KeybdDecode+0xfc>)
 80056a6:	715a      	strb	r2, [r3, #5]
    keybd_info.rshift = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_rshift, 0U);
 80056a8:	2100      	movs	r1, #0
 80056aa:	4820      	ldr	r0, [pc, #128]	; (800572c <USBH_HID_KeybdDecode+0x110>)
 80056ac:	f000 f92c 	bl	8005908 <HID_ReadItem>
 80056b0:	4603      	mov	r3, r0
 80056b2:	b2da      	uxtb	r2, r3
 80056b4:	4b18      	ldr	r3, [pc, #96]	; (8005718 <USBH_HID_KeybdDecode+0xfc>)
 80056b6:	719a      	strb	r2, [r3, #6]
    keybd_info.ralt = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_ralt, 0U);
 80056b8:	2100      	movs	r1, #0
 80056ba:	481d      	ldr	r0, [pc, #116]	; (8005730 <USBH_HID_KeybdDecode+0x114>)
 80056bc:	f000 f924 	bl	8005908 <HID_ReadItem>
 80056c0:	4603      	mov	r3, r0
 80056c2:	b2da      	uxtb	r2, r3
 80056c4:	4b14      	ldr	r3, [pc, #80]	; (8005718 <USBH_HID_KeybdDecode+0xfc>)
 80056c6:	71da      	strb	r2, [r3, #7]
    keybd_info.rgui = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_rgui, 0U);
 80056c8:	2100      	movs	r1, #0
 80056ca:	481a      	ldr	r0, [pc, #104]	; (8005734 <USBH_HID_KeybdDecode+0x118>)
 80056cc:	f000 f91c 	bl	8005908 <HID_ReadItem>
 80056d0:	4603      	mov	r3, r0
 80056d2:	b2da      	uxtb	r2, r3
 80056d4:	4b10      	ldr	r3, [pc, #64]	; (8005718 <USBH_HID_KeybdDecode+0xfc>)
 80056d6:	721a      	strb	r2, [r3, #8]

    for (x = 0U; x < sizeof(keybd_info.keys); x++)
 80056d8:	2300      	movs	r3, #0
 80056da:	73fb      	strb	r3, [r7, #15]
 80056dc:	e00e      	b.n	80056fc <USBH_HID_KeybdDecode+0xe0>
    {
      keybd_info.keys[x] = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_key_array, x);
 80056de:	7bfb      	ldrb	r3, [r7, #15]
 80056e0:	4619      	mov	r1, r3
 80056e2:	4815      	ldr	r0, [pc, #84]	; (8005738 <USBH_HID_KeybdDecode+0x11c>)
 80056e4:	f000 f910 	bl	8005908 <HID_ReadItem>
 80056e8:	4602      	mov	r2, r0
 80056ea:	7bfb      	ldrb	r3, [r7, #15]
 80056ec:	b2d1      	uxtb	r1, r2
 80056ee:	4a0a      	ldr	r2, [pc, #40]	; (8005718 <USBH_HID_KeybdDecode+0xfc>)
 80056f0:	4413      	add	r3, r2
 80056f2:	460a      	mov	r2, r1
 80056f4:	725a      	strb	r2, [r3, #9]
    for (x = 0U; x < sizeof(keybd_info.keys); x++)
 80056f6:	7bfb      	ldrb	r3, [r7, #15]
 80056f8:	3301      	adds	r3, #1
 80056fa:	73fb      	strb	r3, [r7, #15]
 80056fc:	7bfb      	ldrb	r3, [r7, #15]
 80056fe:	2b05      	cmp	r3, #5
 8005700:	d9ed      	bls.n	80056de <USBH_HID_KeybdDecode+0xc2>
    }

    return USBH_OK;
 8005702:	2300      	movs	r3, #0
 8005704:	e000      	b.n	8005708 <USBH_HID_KeybdDecode+0xec>
  }
  return   USBH_FAIL;
 8005706:	2302      	movs	r3, #2
}
 8005708:	4618      	mov	r0, r3
 800570a:	3710      	adds	r7, #16
 800570c:	46bd      	mov	sp, r7
 800570e:	bd80      	pop	{r7, pc}
 8005710:	20000168 	.word	0x20000168
 8005714:	0800800c 	.word	0x0800800c
 8005718:	20000178 	.word	0x20000178
 800571c:	0800802c 	.word	0x0800802c
 8005720:	0800804c 	.word	0x0800804c
 8005724:	0800806c 	.word	0x0800806c
 8005728:	0800808c 	.word	0x0800808c
 800572c:	080080ac 	.word	0x080080ac
 8005730:	080080cc 	.word	0x080080cc
 8005734:	080080ec 	.word	0x080080ec
 8005738:	0800810c 	.word	0x0800810c

0800573c <USBH_HID_GetASCIICode>:
  * @param  phost: Host handle
  * @param  info: Keyboard information
  * @retval ASCII code
  */
uint8_t USBH_HID_GetASCIICode(HID_KEYBD_Info_TypeDef *info)
{
 800573c:	b480      	push	{r7}
 800573e:	b085      	sub	sp, #20
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
  uint8_t   output;
  if ((info->lshift == 1U) || (info->rshift))
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	789b      	ldrb	r3, [r3, #2]
 8005748:	2b01      	cmp	r3, #1
 800574a:	d003      	beq.n	8005754 <USBH_HID_GetASCIICode+0x18>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	799b      	ldrb	r3, [r3, #6]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d009      	beq.n	8005768 <USBH_HID_GetASCIICode+0x2c>
  {
    output =  HID_KEYBRD_ShiftKey[HID_KEYBRD_Codes[info->keys[0]]];
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	7a5b      	ldrb	r3, [r3, #9]
 8005758:	461a      	mov	r2, r3
 800575a:	4b0b      	ldr	r3, [pc, #44]	; (8005788 <USBH_HID_GetASCIICode+0x4c>)
 800575c:	5c9b      	ldrb	r3, [r3, r2]
 800575e:	461a      	mov	r2, r3
 8005760:	4b0a      	ldr	r3, [pc, #40]	; (800578c <USBH_HID_GetASCIICode+0x50>)
 8005762:	5c9b      	ldrb	r3, [r3, r2]
 8005764:	73fb      	strb	r3, [r7, #15]
 8005766:	e008      	b.n	800577a <USBH_HID_GetASCIICode+0x3e>
  }
  else
  {
    output =  HID_KEYBRD_Key[HID_KEYBRD_Codes[info->keys[0]]];
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	7a5b      	ldrb	r3, [r3, #9]
 800576c:	461a      	mov	r2, r3
 800576e:	4b06      	ldr	r3, [pc, #24]	; (8005788 <USBH_HID_GetASCIICode+0x4c>)
 8005770:	5c9b      	ldrb	r3, [r3, r2]
 8005772:	461a      	mov	r2, r3
 8005774:	4b06      	ldr	r3, [pc, #24]	; (8005790 <USBH_HID_GetASCIICode+0x54>)
 8005776:	5c9b      	ldrb	r3, [r3, r2]
 8005778:	73fb      	strb	r3, [r7, #15]
  }
  return output;
 800577a:	7bfb      	ldrb	r3, [r7, #15]
}
 800577c:	4618      	mov	r0, r3
 800577e:	3714      	adds	r7, #20
 8005780:	46bd      	mov	sp, r7
 8005782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005786:	4770      	bx	lr
 8005788:	08008234 	.word	0x08008234
 800578c:	080081b0 	.word	0x080081b0
 8005790:	0800812c 	.word	0x0800812c

08005794 <USBH_HID_MouseInit>:
  *         The function init the HID mouse.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_MouseInit(USBH_HandleTypeDef *phost)
{
 8005794:	b580      	push	{r7, lr}
 8005796:	b084      	sub	sp, #16
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
  uint32_t i;
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80057a2:	69db      	ldr	r3, [r3, #28]
 80057a4:	60bb      	str	r3, [r7, #8]

  mouse_info.x = 0U;
 80057a6:	4b1d      	ldr	r3, [pc, #116]	; (800581c <USBH_HID_MouseInit+0x88>)
 80057a8:	2200      	movs	r2, #0
 80057aa:	701a      	strb	r2, [r3, #0]
  mouse_info.y = 0U;
 80057ac:	4b1b      	ldr	r3, [pc, #108]	; (800581c <USBH_HID_MouseInit+0x88>)
 80057ae:	2200      	movs	r2, #0
 80057b0:	705a      	strb	r2, [r3, #1]
  mouse_info.buttons[0] = 0U;
 80057b2:	4b1a      	ldr	r3, [pc, #104]	; (800581c <USBH_HID_MouseInit+0x88>)
 80057b4:	2200      	movs	r2, #0
 80057b6:	709a      	strb	r2, [r3, #2]
  mouse_info.buttons[1] = 0U;
 80057b8:	4b18      	ldr	r3, [pc, #96]	; (800581c <USBH_HID_MouseInit+0x88>)
 80057ba:	2200      	movs	r2, #0
 80057bc:	70da      	strb	r2, [r3, #3]
  mouse_info.buttons[2] = 0U;
 80057be:	4b17      	ldr	r3, [pc, #92]	; (800581c <USBH_HID_MouseInit+0x88>)
 80057c0:	2200      	movs	r2, #0
 80057c2:	711a      	strb	r2, [r3, #4]

  for (i = 0U; i < (sizeof(mouse_report_data) / sizeof(uint32_t)); i++)
 80057c4:	2300      	movs	r3, #0
 80057c6:	60fb      	str	r3, [r7, #12]
 80057c8:	e00c      	b.n	80057e4 <USBH_HID_MouseInit+0x50>
  {
    mouse_report_data[i] = 0U;
 80057ca:	4a15      	ldr	r2, [pc, #84]	; (8005820 <USBH_HID_MouseInit+0x8c>)
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	2100      	movs	r1, #0
 80057d0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    mouse_rx_report_buf[i] = 0U;
 80057d4:	4a13      	ldr	r2, [pc, #76]	; (8005824 <USBH_HID_MouseInit+0x90>)
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	2100      	movs	r1, #0
 80057da:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for (i = 0U; i < (sizeof(mouse_report_data) / sizeof(uint32_t)); i++)
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	3301      	adds	r3, #1
 80057e2:	60fb      	str	r3, [r7, #12]
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	2b01      	cmp	r3, #1
 80057e8:	d9ef      	bls.n	80057ca <USBH_HID_MouseInit+0x36>
  }

  if (HID_Handle->length > sizeof(mouse_report_data))
 80057ea:	68bb      	ldr	r3, [r7, #8]
 80057ec:	8b1b      	ldrh	r3, [r3, #24]
 80057ee:	2b08      	cmp	r3, #8
 80057f0:	d902      	bls.n	80057f8 <USBH_HID_MouseInit+0x64>
  {
    HID_Handle->length = sizeof(mouse_report_data);
 80057f2:	68bb      	ldr	r3, [r7, #8]
 80057f4:	2208      	movs	r2, #8
 80057f6:	831a      	strh	r2, [r3, #24]
  }
  HID_Handle->pData = (uint8_t *)(void *)mouse_rx_report_buf;
 80057f8:	68bb      	ldr	r3, [r7, #8]
 80057fa:	4a0a      	ldr	r2, [pc, #40]	; (8005824 <USBH_HID_MouseInit+0x90>)
 80057fc:	615a      	str	r2, [r3, #20]
  USBH_HID_FifoInit(&HID_Handle->fifo, phost->device.Data, HID_QUEUE_SIZE * sizeof(mouse_report_data));
 80057fe:	68bb      	ldr	r3, [r7, #8]
 8005800:	f103 0008 	add.w	r0, r3, #8
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800580a:	2250      	movs	r2, #80	; 0x50
 800580c:	4619      	mov	r1, r3
 800580e:	f7ff fddf 	bl	80053d0 <USBH_HID_FifoInit>

  return USBH_OK;
 8005812:	2300      	movs	r3, #0
}
 8005814:	4618      	mov	r0, r3
 8005816:	3710      	adds	r7, #16
 8005818:	46bd      	mov	sp, r7
 800581a:	bd80      	pop	{r7, pc}
 800581c:	20000188 	.word	0x20000188
 8005820:	20000190 	.word	0x20000190
 8005824:	20000198 	.word	0x20000198

08005828 <USBH_HID_GetMouseInfo>:
  *         The function return mouse information.
  * @param  phost: Host handle
  * @retval mouse information
  */
HID_MOUSE_Info_TypeDef *USBH_HID_GetMouseInfo(USBH_HandleTypeDef *phost)
{
 8005828:	b580      	push	{r7, lr}
 800582a:	b082      	sub	sp, #8
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
  if (USBH_HID_MouseDecode(phost) == USBH_OK)
 8005830:	6878      	ldr	r0, [r7, #4]
 8005832:	f000 f80d 	bl	8005850 <USBH_HID_MouseDecode>
 8005836:	4603      	mov	r3, r0
 8005838:	2b00      	cmp	r3, #0
 800583a:	d101      	bne.n	8005840 <USBH_HID_GetMouseInfo+0x18>
  {
    return &mouse_info;
 800583c:	4b03      	ldr	r3, [pc, #12]	; (800584c <USBH_HID_GetMouseInfo+0x24>)
 800583e:	e000      	b.n	8005842 <USBH_HID_GetMouseInfo+0x1a>
  }
  else
  {
    return NULL;
 8005840:	2300      	movs	r3, #0
  }
}
 8005842:	4618      	mov	r0, r3
 8005844:	3708      	adds	r7, #8
 8005846:	46bd      	mov	sp, r7
 8005848:	bd80      	pop	{r7, pc}
 800584a:	bf00      	nop
 800584c:	20000188 	.word	0x20000188

08005850 <USBH_HID_MouseDecode>:
  *         The function decode mouse data.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_MouseDecode(USBH_HandleTypeDef *phost)
{
 8005850:	b580      	push	{r7, lr}
 8005852:	b084      	sub	sp, #16
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800585e:	69db      	ldr	r3, [r3, #28]
 8005860:	60fb      	str	r3, [r7, #12]

  if (HID_Handle->length == 0U)
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	8b1b      	ldrh	r3, [r3, #24]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d101      	bne.n	800586e <USBH_HID_MouseDecode+0x1e>
  {
    return USBH_FAIL;
 800586a:	2302      	movs	r3, #2
 800586c:	e039      	b.n	80058e2 <USBH_HID_MouseDecode+0x92>
  }
  /*Fill report */
  if (USBH_HID_FifoRead(&HID_Handle->fifo, &mouse_report_data, HID_Handle->length) ==  HID_Handle->length)
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	f103 0008 	add.w	r0, r3, #8
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	8b1b      	ldrh	r3, [r3, #24]
 8005878:	461a      	mov	r2, r3
 800587a:	491c      	ldr	r1, [pc, #112]	; (80058ec <USBH_HID_MouseDecode+0x9c>)
 800587c:	f7ff fdc4 	bl	8005408 <USBH_HID_FifoRead>
 8005880:	4603      	mov	r3, r0
 8005882:	461a      	mov	r2, r3
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	8b1b      	ldrh	r3, [r3, #24]
 8005888:	429a      	cmp	r2, r3
 800588a:	d129      	bne.n	80058e0 <USBH_HID_MouseDecode+0x90>
  {
    /*Decode report */
    mouse_info.x = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &prop_x, 0U);
 800588c:	2100      	movs	r1, #0
 800588e:	4818      	ldr	r0, [pc, #96]	; (80058f0 <USBH_HID_MouseDecode+0xa0>)
 8005890:	f000 f83a 	bl	8005908 <HID_ReadItem>
 8005894:	4603      	mov	r3, r0
 8005896:	b2da      	uxtb	r2, r3
 8005898:	4b16      	ldr	r3, [pc, #88]	; (80058f4 <USBH_HID_MouseDecode+0xa4>)
 800589a:	701a      	strb	r2, [r3, #0]
    mouse_info.y = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &prop_y, 0U);
 800589c:	2100      	movs	r1, #0
 800589e:	4816      	ldr	r0, [pc, #88]	; (80058f8 <USBH_HID_MouseDecode+0xa8>)
 80058a0:	f000 f832 	bl	8005908 <HID_ReadItem>
 80058a4:	4603      	mov	r3, r0
 80058a6:	b2da      	uxtb	r2, r3
 80058a8:	4b12      	ldr	r3, [pc, #72]	; (80058f4 <USBH_HID_MouseDecode+0xa4>)
 80058aa:	705a      	strb	r2, [r3, #1]

    mouse_info.buttons[0] = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &prop_b1, 0U);
 80058ac:	2100      	movs	r1, #0
 80058ae:	4813      	ldr	r0, [pc, #76]	; (80058fc <USBH_HID_MouseDecode+0xac>)
 80058b0:	f000 f82a 	bl	8005908 <HID_ReadItem>
 80058b4:	4603      	mov	r3, r0
 80058b6:	b2da      	uxtb	r2, r3
 80058b8:	4b0e      	ldr	r3, [pc, #56]	; (80058f4 <USBH_HID_MouseDecode+0xa4>)
 80058ba:	709a      	strb	r2, [r3, #2]
    mouse_info.buttons[1] = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &prop_b2, 0U);
 80058bc:	2100      	movs	r1, #0
 80058be:	4810      	ldr	r0, [pc, #64]	; (8005900 <USBH_HID_MouseDecode+0xb0>)
 80058c0:	f000 f822 	bl	8005908 <HID_ReadItem>
 80058c4:	4603      	mov	r3, r0
 80058c6:	b2da      	uxtb	r2, r3
 80058c8:	4b0a      	ldr	r3, [pc, #40]	; (80058f4 <USBH_HID_MouseDecode+0xa4>)
 80058ca:	70da      	strb	r2, [r3, #3]
    mouse_info.buttons[2] = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &prop_b3, 0U);
 80058cc:	2100      	movs	r1, #0
 80058ce:	480d      	ldr	r0, [pc, #52]	; (8005904 <USBH_HID_MouseDecode+0xb4>)
 80058d0:	f000 f81a 	bl	8005908 <HID_ReadItem>
 80058d4:	4603      	mov	r3, r0
 80058d6:	b2da      	uxtb	r2, r3
 80058d8:	4b06      	ldr	r3, [pc, #24]	; (80058f4 <USBH_HID_MouseDecode+0xa4>)
 80058da:	711a      	strb	r2, [r3, #4]

    return USBH_OK;
 80058dc:	2300      	movs	r3, #0
 80058de:	e000      	b.n	80058e2 <USBH_HID_MouseDecode+0x92>
  }
  return   USBH_FAIL;
 80058e0:	2302      	movs	r3, #2
}
 80058e2:	4618      	mov	r0, r3
 80058e4:	3710      	adds	r7, #16
 80058e6:	46bd      	mov	sp, r7
 80058e8:	bd80      	pop	{r7, pc}
 80058ea:	bf00      	nop
 80058ec:	20000190 	.word	0x20000190
 80058f0:	0800837c 	.word	0x0800837c
 80058f4:	20000188 	.word	0x20000188
 80058f8:	0800839c 	.word	0x0800839c
 80058fc:	0800831c 	.word	0x0800831c
 8005900:	0800833c 	.word	0x0800833c
 8005904:	0800835c 	.word	0x0800835c

08005908 <HID_ReadItem>:
  * @param  ri: report item
  * @param  ndx: report index
* @retval status (0 : fail / otherwise: item value)
  */
uint32_t HID_ReadItem(HID_Report_ItemTypedef *ri, uint8_t ndx)
{
 8005908:	b480      	push	{r7}
 800590a:	b089      	sub	sp, #36	; 0x24
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
 8005910:	460b      	mov	r3, r1
 8005912:	70fb      	strb	r3, [r7, #3]
  uint32_t val = 0U;
 8005914:	2300      	movs	r3, #0
 8005916:	61fb      	str	r3, [r7, #28]
  uint32_t x = 0U;
 8005918:	2300      	movs	r3, #0
 800591a:	61bb      	str	r3, [r7, #24]
  uint32_t bofs;
  uint8_t *data = ri->data;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	617b      	str	r3, [r7, #20]
  uint8_t shift = ri->shift;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	7a1b      	ldrb	r3, [r3, #8]
 8005926:	74fb      	strb	r3, [r7, #19]

  /* get the logical value of the item */

  /* if this is an array, wee may need to offset ri->data.*/
  if (ri->count > 0U)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	7a5b      	ldrb	r3, [r3, #9]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d01a      	beq.n	8005966 <HID_ReadItem+0x5e>
  {
    /* If app tries to read outside of the array. */
    if (ri->count <= ndx)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	7a5b      	ldrb	r3, [r3, #9]
 8005934:	78fa      	ldrb	r2, [r7, #3]
 8005936:	429a      	cmp	r2, r3
 8005938:	d301      	bcc.n	800593e <HID_ReadItem+0x36>
    {
      return (0U);
 800593a:	2300      	movs	r3, #0
 800593c:	e076      	b.n	8005a2c <HID_ReadItem+0x124>
    }

    /* calculate bit offset */
    bofs = ndx * ri->size;
 800593e:	78fb      	ldrb	r3, [r7, #3]
 8005940:	687a      	ldr	r2, [r7, #4]
 8005942:	6852      	ldr	r2, [r2, #4]
 8005944:	fb02 f303 	mul.w	r3, r2, r3
 8005948:	60fb      	str	r3, [r7, #12]
    bofs += shift;
 800594a:	7cfb      	ldrb	r3, [r7, #19]
 800594c:	68fa      	ldr	r2, [r7, #12]
 800594e:	4413      	add	r3, r2
 8005950:	60fb      	str	r3, [r7, #12]
    /* calculate byte offset + shift pair from bit offset. */
    data += bofs / 8U;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	08db      	lsrs	r3, r3, #3
 8005956:	697a      	ldr	r2, [r7, #20]
 8005958:	4413      	add	r3, r2
 800595a:	617b      	str	r3, [r7, #20]
    shift = (uint8_t)(bofs % 8U);
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	b2db      	uxtb	r3, r3
 8005960:	f003 0307 	and.w	r3, r3, #7
 8005964:	74fb      	strb	r3, [r7, #19]
  }
  /* read data bytes in little endian order */
  for (x = 0U; x < ((ri->size & 0x7U) ? (ri->size / 8U) + 1U : (ri->size / 8U)); x++)
 8005966:	2300      	movs	r3, #0
 8005968:	61bb      	str	r3, [r7, #24]
 800596a:	e00a      	b.n	8005982 <HID_ReadItem+0x7a>
  {
    val = (uint32_t)((uint32_t)(*data) << (x * 8U));
 800596c:	697b      	ldr	r3, [r7, #20]
 800596e:	781b      	ldrb	r3, [r3, #0]
 8005970:	461a      	mov	r2, r3
 8005972:	69bb      	ldr	r3, [r7, #24]
 8005974:	00db      	lsls	r3, r3, #3
 8005976:	fa02 f303 	lsl.w	r3, r2, r3
 800597a:	61fb      	str	r3, [r7, #28]
  for (x = 0U; x < ((ri->size & 0x7U) ? (ri->size / 8U) + 1U : (ri->size / 8U)); x++)
 800597c:	69bb      	ldr	r3, [r7, #24]
 800597e:	3301      	adds	r3, #1
 8005980:	61bb      	str	r3, [r7, #24]
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	685b      	ldr	r3, [r3, #4]
 8005986:	f003 0307 	and.w	r3, r3, #7
 800598a:	2b00      	cmp	r3, #0
 800598c:	d004      	beq.n	8005998 <HID_ReadItem+0x90>
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	685b      	ldr	r3, [r3, #4]
 8005992:	08db      	lsrs	r3, r3, #3
 8005994:	3301      	adds	r3, #1
 8005996:	e002      	b.n	800599e <HID_ReadItem+0x96>
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	685b      	ldr	r3, [r3, #4]
 800599c:	08db      	lsrs	r3, r3, #3
 800599e:	69ba      	ldr	r2, [r7, #24]
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d8e3      	bhi.n	800596c <HID_ReadItem+0x64>
  }
  val = (val >> shift) & ((1U << ri->size) - 1U);
 80059a4:	7cfb      	ldrb	r3, [r7, #19]
 80059a6:	69fa      	ldr	r2, [r7, #28]
 80059a8:	40da      	lsrs	r2, r3
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	685b      	ldr	r3, [r3, #4]
 80059ae:	2101      	movs	r1, #1
 80059b0:	fa01 f303 	lsl.w	r3, r1, r3
 80059b4:	3b01      	subs	r3, #1
 80059b6:	4013      	ands	r3, r2
 80059b8:	61fb      	str	r3, [r7, #28]

  if (val < ri->logical_min || val > ri->logical_max)
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	68db      	ldr	r3, [r3, #12]
 80059be:	69fa      	ldr	r2, [r7, #28]
 80059c0:	429a      	cmp	r2, r3
 80059c2:	d304      	bcc.n	80059ce <HID_ReadItem+0xc6>
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	691b      	ldr	r3, [r3, #16]
 80059c8:	69fa      	ldr	r2, [r7, #28]
 80059ca:	429a      	cmp	r2, r3
 80059cc:	d901      	bls.n	80059d2 <HID_ReadItem+0xca>
  {
    return (0U);
 80059ce:	2300      	movs	r3, #0
 80059d0:	e02c      	b.n	8005a2c <HID_ReadItem+0x124>
  }

  /* convert logical value to physical value */
  /* See if the number is negative or not. */
  if ((ri->sign) && (val & (1U << (ri->size - 1U))))
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	7a9b      	ldrb	r3, [r3, #10]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d01d      	beq.n	8005a16 <HID_ReadItem+0x10e>
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	685b      	ldr	r3, [r3, #4]
 80059de:	3b01      	subs	r3, #1
 80059e0:	2201      	movs	r2, #1
 80059e2:	409a      	lsls	r2, r3
 80059e4:	69fb      	ldr	r3, [r7, #28]
 80059e6:	4013      	ands	r3, r2
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d014      	beq.n	8005a16 <HID_ReadItem+0x10e>
  {
    /* yes, so sign extend value to 32 bits. */
    uint32_t vs = (uint32_t)((0xffffffffU & ~((1U << (ri->size)) - 1U)) | val);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	685b      	ldr	r3, [r3, #4]
 80059f0:	2201      	movs	r2, #1
 80059f2:	fa02 f303 	lsl.w	r3, r2, r3
 80059f6:	425b      	negs	r3, r3
 80059f8:	69fa      	ldr	r2, [r7, #28]
 80059fa:	4313      	orrs	r3, r2
 80059fc:	60bb      	str	r3, [r7, #8]

    if (ri->resolution == 1U)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	69db      	ldr	r3, [r3, #28]
 8005a02:	2b01      	cmp	r3, #1
 8005a04:	d101      	bne.n	8005a0a <HID_ReadItem+0x102>
    {
      return ((uint32_t)vs);
 8005a06:	68bb      	ldr	r3, [r7, #8]
 8005a08:	e010      	b.n	8005a2c <HID_ReadItem+0x124>
    }
    return ((uint32_t)(vs * ri->resolution));
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	69db      	ldr	r3, [r3, #28]
 8005a0e:	68ba      	ldr	r2, [r7, #8]
 8005a10:	fb02 f303 	mul.w	r3, r2, r3
 8005a14:	e00a      	b.n	8005a2c <HID_ReadItem+0x124>
  }
  else
  {
    if (ri->resolution == 1U)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	69db      	ldr	r3, [r3, #28]
 8005a1a:	2b01      	cmp	r3, #1
 8005a1c:	d101      	bne.n	8005a22 <HID_ReadItem+0x11a>
    {
      return (val);
 8005a1e:	69fb      	ldr	r3, [r7, #28]
 8005a20:	e004      	b.n	8005a2c <HID_ReadItem+0x124>
    }
    return (val * ri->resolution);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	69db      	ldr	r3, [r3, #28]
 8005a26:	69fa      	ldr	r2, [r7, #28]
 8005a28:	fb02 f303 	mul.w	r3, r2, r3
  }
}
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	3724      	adds	r7, #36	; 0x24
 8005a30:	46bd      	mov	sp, r7
 8005a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a36:	4770      	bx	lr

08005a38 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	b084      	sub	sp, #16
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	60f8      	str	r0, [r7, #12]
 8005a40:	60b9      	str	r1, [r7, #8]
 8005a42:	4613      	mov	r3, r2
 8005a44:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d101      	bne.n	8005a50 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8005a4c:	2302      	movs	r3, #2
 8005a4e:	e029      	b.n	8005aa4 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	79fa      	ldrb	r2, [r7, #7]
 8005a54:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	2200      	movs	r2, #0
 8005a64:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8005a68:	68f8      	ldr	r0, [r7, #12]
 8005a6a:	f000 f81f 	bl	8005aac <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	2200      	movs	r2, #0
 8005a72:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	2200      	movs	r2, #0
 8005a7a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	2200      	movs	r2, #0
 8005a82:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	2200      	movs	r2, #0
 8005a8a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8005a8e:	68bb      	ldr	r3, [r7, #8]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d003      	beq.n	8005a9c <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	68ba      	ldr	r2, [r7, #8]
 8005a98:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8005a9c:	68f8      	ldr	r0, [r7, #12]
 8005a9e:	f001 fc13 	bl	80072c8 <USBH_LL_Init>

  return USBH_OK;
 8005aa2:	2300      	movs	r3, #0
}
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	3710      	adds	r7, #16
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	bd80      	pop	{r7, pc}

08005aac <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8005aac:	b480      	push	{r7}
 8005aae:	b085      	sub	sp, #20
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8005ab8:	2300      	movs	r3, #0
 8005aba:	60fb      	str	r3, [r7, #12]
 8005abc:	e009      	b.n	8005ad2 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8005abe:	687a      	ldr	r2, [r7, #4]
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	33e0      	adds	r3, #224	; 0xe0
 8005ac4:	009b      	lsls	r3, r3, #2
 8005ac6:	4413      	add	r3, r2
 8005ac8:	2200      	movs	r2, #0
 8005aca:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	3301      	adds	r3, #1
 8005ad0:	60fb      	str	r3, [r7, #12]
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	2b0e      	cmp	r3, #14
 8005ad6:	d9f2      	bls.n	8005abe <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8005ad8:	2300      	movs	r3, #0
 8005ada:	60fb      	str	r3, [r7, #12]
 8005adc:	e009      	b.n	8005af2 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8005ade:	687a      	ldr	r2, [r7, #4]
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	4413      	add	r3, r2
 8005ae4:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8005ae8:	2200      	movs	r2, #0
 8005aea:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	3301      	adds	r3, #1
 8005af0:	60fb      	str	r3, [r7, #12]
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005af8:	d3f1      	bcc.n	8005ade <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2200      	movs	r2, #0
 8005afe:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2200      	movs	r2, #0
 8005b04:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	2201      	movs	r2, #1
 8005b0a:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2200      	movs	r2, #0
 8005b10:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2201      	movs	r2, #1
 8005b18:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	2240      	movs	r2, #64	; 0x40
 8005b1e:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2200      	movs	r2, #0
 8005b24:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2200      	movs	r2, #0
 8005b2a:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2201      	movs	r2, #1
 8005b32:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2200      	movs	r2, #0
 8005b3a:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	2200      	movs	r2, #0
 8005b42:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8005b46:	2300      	movs	r3, #0
}
 8005b48:	4618      	mov	r0, r3
 8005b4a:	3714      	adds	r7, #20
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b52:	4770      	bx	lr

08005b54 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8005b54:	b480      	push	{r7}
 8005b56:	b085      	sub	sp, #20
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
 8005b5c:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8005b5e:	2300      	movs	r3, #0
 8005b60:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d016      	beq.n	8005b96 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d10e      	bne.n	8005b90 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8005b78:	1c59      	adds	r1, r3, #1
 8005b7a:	687a      	ldr	r2, [r7, #4]
 8005b7c:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8005b80:	687a      	ldr	r2, [r7, #4]
 8005b82:	33de      	adds	r3, #222	; 0xde
 8005b84:	6839      	ldr	r1, [r7, #0]
 8005b86:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	73fb      	strb	r3, [r7, #15]
 8005b8e:	e004      	b.n	8005b9a <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8005b90:	2302      	movs	r3, #2
 8005b92:	73fb      	strb	r3, [r7, #15]
 8005b94:	e001      	b.n	8005b9a <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8005b96:	2302      	movs	r3, #2
 8005b98:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005b9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	3714      	adds	r7, #20
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba6:	4770      	bx	lr

08005ba8 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8005ba8:	b480      	push	{r7}
 8005baa:	b085      	sub	sp, #20
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
 8005bb0:	460b      	mov	r3, r1
 8005bb2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8005bbe:	78fa      	ldrb	r2, [r7, #3]
 8005bc0:	429a      	cmp	r2, r3
 8005bc2:	d204      	bcs.n	8005bce <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	78fa      	ldrb	r2, [r7, #3]
 8005bc8:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8005bcc:	e001      	b.n	8005bd2 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8005bce:	2302      	movs	r3, #2
 8005bd0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005bd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	3714      	adds	r7, #20
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bde:	4770      	bx	lr

08005be0 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8005be0:	b480      	push	{r7}
 8005be2:	b087      	sub	sp, #28
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
 8005be8:	4608      	mov	r0, r1
 8005bea:	4611      	mov	r1, r2
 8005bec:	461a      	mov	r2, r3
 8005bee:	4603      	mov	r3, r0
 8005bf0:	70fb      	strb	r3, [r7, #3]
 8005bf2:	460b      	mov	r3, r1
 8005bf4:	70bb      	strb	r3, [r7, #2]
 8005bf6:	4613      	mov	r3, r2
 8005bf8:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8005bfe:	2300      	movs	r3, #0
 8005c00:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8005c08:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8005c0a:	e025      	b.n	8005c58 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8005c0c:	7dfb      	ldrb	r3, [r7, #23]
 8005c0e:	221a      	movs	r2, #26
 8005c10:	fb02 f303 	mul.w	r3, r2, r3
 8005c14:	3308      	adds	r3, #8
 8005c16:	68fa      	ldr	r2, [r7, #12]
 8005c18:	4413      	add	r3, r2
 8005c1a:	3302      	adds	r3, #2
 8005c1c:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8005c1e:	693b      	ldr	r3, [r7, #16]
 8005c20:	795b      	ldrb	r3, [r3, #5]
 8005c22:	78fa      	ldrb	r2, [r7, #3]
 8005c24:	429a      	cmp	r2, r3
 8005c26:	d002      	beq.n	8005c2e <USBH_FindInterface+0x4e>
 8005c28:	78fb      	ldrb	r3, [r7, #3]
 8005c2a:	2bff      	cmp	r3, #255	; 0xff
 8005c2c:	d111      	bne.n	8005c52 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8005c2e:	693b      	ldr	r3, [r7, #16]
 8005c30:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8005c32:	78ba      	ldrb	r2, [r7, #2]
 8005c34:	429a      	cmp	r2, r3
 8005c36:	d002      	beq.n	8005c3e <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8005c38:	78bb      	ldrb	r3, [r7, #2]
 8005c3a:	2bff      	cmp	r3, #255	; 0xff
 8005c3c:	d109      	bne.n	8005c52 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8005c3e:	693b      	ldr	r3, [r7, #16]
 8005c40:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8005c42:	787a      	ldrb	r2, [r7, #1]
 8005c44:	429a      	cmp	r2, r3
 8005c46:	d002      	beq.n	8005c4e <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8005c48:	787b      	ldrb	r3, [r7, #1]
 8005c4a:	2bff      	cmp	r3, #255	; 0xff
 8005c4c:	d101      	bne.n	8005c52 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8005c4e:	7dfb      	ldrb	r3, [r7, #23]
 8005c50:	e006      	b.n	8005c60 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8005c52:	7dfb      	ldrb	r3, [r7, #23]
 8005c54:	3301      	adds	r3, #1
 8005c56:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8005c58:	7dfb      	ldrb	r3, [r7, #23]
 8005c5a:	2b01      	cmp	r3, #1
 8005c5c:	d9d6      	bls.n	8005c0c <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8005c5e:	23ff      	movs	r3, #255	; 0xff
}
 8005c60:	4618      	mov	r0, r3
 8005c62:	371c      	adds	r7, #28
 8005c64:	46bd      	mov	sp, r7
 8005c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6a:	4770      	bx	lr

08005c6c <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	b082      	sub	sp, #8
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8005c74:	6878      	ldr	r0, [r7, #4]
 8005c76:	f001 fb63 	bl	8007340 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8005c7a:	2101      	movs	r1, #1
 8005c7c:	6878      	ldr	r0, [r7, #4]
 8005c7e:	f001 fc7c 	bl	800757a <USBH_LL_DriverVBUS>

  return USBH_OK;
 8005c82:	2300      	movs	r3, #0
}
 8005c84:	4618      	mov	r0, r3
 8005c86:	3708      	adds	r7, #8
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	bd80      	pop	{r7, pc}

08005c8c <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b088      	sub	sp, #32
 8005c90:	af04      	add	r7, sp, #16
 8005c92:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8005c94:	2302      	movs	r3, #2
 8005c96:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8005c98:	2300      	movs	r3, #0
 8005c9a:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8005ca2:	b2db      	uxtb	r3, r3
 8005ca4:	2b01      	cmp	r3, #1
 8005ca6:	d102      	bne.n	8005cae <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2203      	movs	r2, #3
 8005cac:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	781b      	ldrb	r3, [r3, #0]
 8005cb2:	b2db      	uxtb	r3, r3
 8005cb4:	2b0b      	cmp	r3, #11
 8005cb6:	f200 81b3 	bhi.w	8006020 <USBH_Process+0x394>
 8005cba:	a201      	add	r2, pc, #4	; (adr r2, 8005cc0 <USBH_Process+0x34>)
 8005cbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cc0:	08005cf1 	.word	0x08005cf1
 8005cc4:	08005d23 	.word	0x08005d23
 8005cc8:	08005d8b 	.word	0x08005d8b
 8005ccc:	08005fbb 	.word	0x08005fbb
 8005cd0:	08006021 	.word	0x08006021
 8005cd4:	08005e2f 	.word	0x08005e2f
 8005cd8:	08005f61 	.word	0x08005f61
 8005cdc:	08005e65 	.word	0x08005e65
 8005ce0:	08005e85 	.word	0x08005e85
 8005ce4:	08005ea5 	.word	0x08005ea5
 8005ce8:	08005ed3 	.word	0x08005ed3
 8005cec:	08005fa3 	.word	0x08005fa3
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8005cf6:	b2db      	uxtb	r3, r3
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	f000 8193 	beq.w	8006024 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	2201      	movs	r2, #1
 8005d02:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8005d04:	20c8      	movs	r0, #200	; 0xc8
 8005d06:	f001 fc82 	bl	800760e <USBH_Delay>
        USBH_LL_ResetPort(phost);
 8005d0a:	6878      	ldr	r0, [r7, #4]
 8005d0c:	f001 fb75 	bl	80073fa <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2200      	movs	r2, #0
 8005d14:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8005d20:	e180      	b.n	8006024 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8005d28:	2b01      	cmp	r3, #1
 8005d2a:	d107      	bne.n	8005d3c <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2200      	movs	r2, #0
 8005d30:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2202      	movs	r2, #2
 8005d38:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8005d3a:	e182      	b.n	8006042 <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8005d42:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005d46:	d914      	bls.n	8005d72 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8005d4e:	3301      	adds	r3, #1
 8005d50:	b2da      	uxtb	r2, r3
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8005d5e:	2b03      	cmp	r3, #3
 8005d60:	d903      	bls.n	8005d6a <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	220d      	movs	r2, #13
 8005d66:	701a      	strb	r2, [r3, #0]
      break;
 8005d68:	e16b      	b.n	8006042 <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	701a      	strb	r2, [r3, #0]
      break;
 8005d70:	e167      	b.n	8006042 <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8005d78:	f103 020a 	add.w	r2, r3, #10
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8005d82:	200a      	movs	r0, #10
 8005d84:	f001 fc43 	bl	800760e <USBH_Delay>
      break;
 8005d88:	e15b      	b.n	8006042 <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d005      	beq.n	8005da0 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005d9a:	2104      	movs	r1, #4
 8005d9c:	6878      	ldr	r0, [r7, #4]
 8005d9e:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8005da0:	2064      	movs	r0, #100	; 0x64
 8005da2:	f001 fc34 	bl	800760e <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 8005da6:	6878      	ldr	r0, [r7, #4]
 8005da8:	f001 fb00 	bl	80073ac <USBH_LL_GetSpeed>
 8005dac:	4603      	mov	r3, r0
 8005dae:	461a      	mov	r2, r3
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2205      	movs	r2, #5
 8005dba:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8005dbc:	2100      	movs	r1, #0
 8005dbe:	6878      	ldr	r0, [r7, #4]
 8005dc0:	f001 f90b 	bl	8006fda <USBH_AllocPipe>
 8005dc4:	4603      	mov	r3, r0
 8005dc6:	461a      	mov	r2, r3
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8005dcc:	2180      	movs	r1, #128	; 0x80
 8005dce:	6878      	ldr	r0, [r7, #4]
 8005dd0:	f001 f903 	bl	8006fda <USBH_AllocPipe>
 8005dd4:	4603      	mov	r3, r0
 8005dd6:	461a      	mov	r2, r3
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	7919      	ldrb	r1, [r3, #4]
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8005dec:	687a      	ldr	r2, [r7, #4]
 8005dee:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8005df0:	b292      	uxth	r2, r2
 8005df2:	9202      	str	r2, [sp, #8]
 8005df4:	2200      	movs	r2, #0
 8005df6:	9201      	str	r2, [sp, #4]
 8005df8:	9300      	str	r3, [sp, #0]
 8005dfa:	4603      	mov	r3, r0
 8005dfc:	2280      	movs	r2, #128	; 0x80
 8005dfe:	6878      	ldr	r0, [r7, #4]
 8005e00:	f001 f8bc 	bl	8006f7c <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	7959      	ldrb	r1, [r3, #5]
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8005e14:	687a      	ldr	r2, [r7, #4]
 8005e16:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8005e18:	b292      	uxth	r2, r2
 8005e1a:	9202      	str	r2, [sp, #8]
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	9201      	str	r2, [sp, #4]
 8005e20:	9300      	str	r3, [sp, #0]
 8005e22:	4603      	mov	r3, r0
 8005e24:	2200      	movs	r2, #0
 8005e26:	6878      	ldr	r0, [r7, #4]
 8005e28:	f001 f8a8 	bl	8006f7c <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8005e2c:	e109      	b.n	8006042 <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8005e2e:	6878      	ldr	r0, [r7, #4]
 8005e30:	f000 f90c 	bl	800604c <USBH_HandleEnum>
 8005e34:	4603      	mov	r3, r0
 8005e36:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8005e38:	7bbb      	ldrb	r3, [r7, #14]
 8005e3a:	b2db      	uxtb	r3, r3
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	f040 80f3 	bne.w	8006028 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	2200      	movs	r2, #0
 8005e46:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8005e50:	2b01      	cmp	r3, #1
 8005e52:	d103      	bne.n	8005e5c <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2208      	movs	r2, #8
 8005e58:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8005e5a:	e0e5      	b.n	8006028 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2207      	movs	r2, #7
 8005e60:	701a      	strb	r2, [r3, #0]
      break;
 8005e62:	e0e1      	b.n	8006028 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	f000 80de 	beq.w	800602c <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005e76:	2101      	movs	r1, #1
 8005e78:	6878      	ldr	r0, [r7, #4]
 8005e7a:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2208      	movs	r2, #8
 8005e80:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8005e82:	e0d3      	b.n	800602c <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8005e8a:	b29b      	uxth	r3, r3
 8005e8c:	4619      	mov	r1, r3
 8005e8e:	6878      	ldr	r0, [r7, #4]
 8005e90:	f000 fc20 	bl	80066d4 <USBH_SetCfg>
 8005e94:	4603      	mov	r3, r0
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	f040 80ca 	bne.w	8006030 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2209      	movs	r2, #9
 8005ea0:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8005ea2:	e0c5      	b.n	8006030 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8005eaa:	f003 0320 	and.w	r3, r3, #32
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d00b      	beq.n	8005eca <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8005eb2:	2101      	movs	r1, #1
 8005eb4:	6878      	ldr	r0, [r7, #4]
 8005eb6:	f000 fc30 	bl	800671a <USBH_SetFeature>
 8005eba:	4603      	mov	r3, r0
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	f040 80b9 	bne.w	8006034 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	220a      	movs	r2, #10
 8005ec6:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8005ec8:	e0b4      	b.n	8006034 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	220a      	movs	r2, #10
 8005ece:	701a      	strb	r2, [r3, #0]
      break;
 8005ed0:	e0b0      	b.n	8006034 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	f000 80ad 	beq.w	8006038 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	73fb      	strb	r3, [r7, #15]
 8005eea:	e016      	b.n	8005f1a <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8005eec:	7bfa      	ldrb	r2, [r7, #15]
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	32de      	adds	r2, #222	; 0xde
 8005ef2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ef6:	791a      	ldrb	r2, [r3, #4]
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8005efe:	429a      	cmp	r2, r3
 8005f00:	d108      	bne.n	8005f14 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 8005f02:	7bfa      	ldrb	r2, [r7, #15]
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	32de      	adds	r2, #222	; 0xde
 8005f08:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8005f12:	e005      	b.n	8005f20 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8005f14:	7bfb      	ldrb	r3, [r7, #15]
 8005f16:	3301      	adds	r3, #1
 8005f18:	73fb      	strb	r3, [r7, #15]
 8005f1a:	7bfb      	ldrb	r3, [r7, #15]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d0e5      	beq.n	8005eec <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d016      	beq.n	8005f58 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005f30:	689b      	ldr	r3, [r3, #8]
 8005f32:	6878      	ldr	r0, [r7, #4]
 8005f34:	4798      	blx	r3
 8005f36:	4603      	mov	r3, r0
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d109      	bne.n	8005f50 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2206      	movs	r2, #6
 8005f40:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005f48:	2103      	movs	r1, #3
 8005f4a:	6878      	ldr	r0, [r7, #4]
 8005f4c:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8005f4e:	e073      	b.n	8006038 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	220d      	movs	r2, #13
 8005f54:	701a      	strb	r2, [r3, #0]
      break;
 8005f56:	e06f      	b.n	8006038 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	220d      	movs	r2, #13
 8005f5c:	701a      	strb	r2, [r3, #0]
      break;
 8005f5e:	e06b      	b.n	8006038 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d017      	beq.n	8005f9a <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005f70:	691b      	ldr	r3, [r3, #16]
 8005f72:	6878      	ldr	r0, [r7, #4]
 8005f74:	4798      	blx	r3
 8005f76:	4603      	mov	r3, r0
 8005f78:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8005f7a:	7bbb      	ldrb	r3, [r7, #14]
 8005f7c:	b2db      	uxtb	r3, r3
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d103      	bne.n	8005f8a <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	220b      	movs	r2, #11
 8005f86:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8005f88:	e058      	b.n	800603c <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 8005f8a:	7bbb      	ldrb	r3, [r7, #14]
 8005f8c:	b2db      	uxtb	r3, r3
 8005f8e:	2b02      	cmp	r3, #2
 8005f90:	d154      	bne.n	800603c <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	220d      	movs	r2, #13
 8005f96:	701a      	strb	r2, [r3, #0]
      break;
 8005f98:	e050      	b.n	800603c <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	220d      	movs	r2, #13
 8005f9e:	701a      	strb	r2, [r3, #0]
      break;
 8005fa0:	e04c      	b.n	800603c <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d049      	beq.n	8006040 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005fb2:	695b      	ldr	r3, [r3, #20]
 8005fb4:	6878      	ldr	r0, [r7, #4]
 8005fb6:	4798      	blx	r3
      }
      break;
 8005fb8:	e042      	b.n	8006040 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 8005fc2:	6878      	ldr	r0, [r7, #4]
 8005fc4:	f7ff fd72 	bl	8005aac <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d009      	beq.n	8005fe6 <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005fd8:	68db      	ldr	r3, [r3, #12]
 8005fda:	6878      	ldr	r0, [r7, #4]
 8005fdc:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d005      	beq.n	8005ffc <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005ff6:	2105      	movs	r1, #5
 8005ff8:	6878      	ldr	r0, [r7, #4]
 8005ffa:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8006002:	b2db      	uxtb	r3, r3
 8006004:	2b01      	cmp	r3, #1
 8006006:	d107      	bne.n	8006018 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2200      	movs	r2, #0
 800600c:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 8006010:	6878      	ldr	r0, [r7, #4]
 8006012:	f7ff fe2b 	bl	8005c6c <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006016:	e014      	b.n	8006042 <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 8006018:	6878      	ldr	r0, [r7, #4]
 800601a:	f001 f991 	bl	8007340 <USBH_LL_Start>
      break;
 800601e:	e010      	b.n	8006042 <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 8006020:	bf00      	nop
 8006022:	e00e      	b.n	8006042 <USBH_Process+0x3b6>
      break;
 8006024:	bf00      	nop
 8006026:	e00c      	b.n	8006042 <USBH_Process+0x3b6>
      break;
 8006028:	bf00      	nop
 800602a:	e00a      	b.n	8006042 <USBH_Process+0x3b6>
    break;
 800602c:	bf00      	nop
 800602e:	e008      	b.n	8006042 <USBH_Process+0x3b6>
      break;
 8006030:	bf00      	nop
 8006032:	e006      	b.n	8006042 <USBH_Process+0x3b6>
      break;
 8006034:	bf00      	nop
 8006036:	e004      	b.n	8006042 <USBH_Process+0x3b6>
      break;
 8006038:	bf00      	nop
 800603a:	e002      	b.n	8006042 <USBH_Process+0x3b6>
      break;
 800603c:	bf00      	nop
 800603e:	e000      	b.n	8006042 <USBH_Process+0x3b6>
      break;
 8006040:	bf00      	nop
  }
  return USBH_OK;
 8006042:	2300      	movs	r3, #0
}
 8006044:	4618      	mov	r0, r3
 8006046:	3710      	adds	r7, #16
 8006048:	46bd      	mov	sp, r7
 800604a:	bd80      	pop	{r7, pc}

0800604c <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800604c:	b580      	push	{r7, lr}
 800604e:	b088      	sub	sp, #32
 8006050:	af04      	add	r7, sp, #16
 8006052:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8006054:	2301      	movs	r3, #1
 8006056:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8006058:	2301      	movs	r3, #1
 800605a:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	785b      	ldrb	r3, [r3, #1]
 8006060:	2b07      	cmp	r3, #7
 8006062:	f200 81c1 	bhi.w	80063e8 <USBH_HandleEnum+0x39c>
 8006066:	a201      	add	r2, pc, #4	; (adr r2, 800606c <USBH_HandleEnum+0x20>)
 8006068:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800606c:	0800608d 	.word	0x0800608d
 8006070:	0800614b 	.word	0x0800614b
 8006074:	080061b5 	.word	0x080061b5
 8006078:	08006243 	.word	0x08006243
 800607c:	080062ad 	.word	0x080062ad
 8006080:	0800631d 	.word	0x0800631d
 8006084:	08006363 	.word	0x08006363
 8006088:	080063a9 	.word	0x080063a9
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800608c:	2108      	movs	r1, #8
 800608e:	6878      	ldr	r0, [r7, #4]
 8006090:	f000 fa50 	bl	8006534 <USBH_Get_DevDesc>
 8006094:	4603      	mov	r3, r0
 8006096:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006098:	7bbb      	ldrb	r3, [r7, #14]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d130      	bne.n	8006100 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2201      	movs	r2, #1
 80060ac:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	7919      	ldrb	r1, [r3, #4]
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80060be:	687a      	ldr	r2, [r7, #4]
 80060c0:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80060c2:	b292      	uxth	r2, r2
 80060c4:	9202      	str	r2, [sp, #8]
 80060c6:	2200      	movs	r2, #0
 80060c8:	9201      	str	r2, [sp, #4]
 80060ca:	9300      	str	r3, [sp, #0]
 80060cc:	4603      	mov	r3, r0
 80060ce:	2280      	movs	r2, #128	; 0x80
 80060d0:	6878      	ldr	r0, [r7, #4]
 80060d2:	f000 ff53 	bl	8006f7c <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	7959      	ldrb	r1, [r3, #5]
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80060e6:	687a      	ldr	r2, [r7, #4]
 80060e8:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80060ea:	b292      	uxth	r2, r2
 80060ec:	9202      	str	r2, [sp, #8]
 80060ee:	2200      	movs	r2, #0
 80060f0:	9201      	str	r2, [sp, #4]
 80060f2:	9300      	str	r3, [sp, #0]
 80060f4:	4603      	mov	r3, r0
 80060f6:	2200      	movs	r2, #0
 80060f8:	6878      	ldr	r0, [r7, #4]
 80060fa:	f000 ff3f 	bl	8006f7c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80060fe:	e175      	b.n	80063ec <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006100:	7bbb      	ldrb	r3, [r7, #14]
 8006102:	2b03      	cmp	r3, #3
 8006104:	f040 8172 	bne.w	80063ec <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800610e:	3301      	adds	r3, #1
 8006110:	b2da      	uxtb	r2, r3
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800611e:	2b03      	cmp	r3, #3
 8006120:	d903      	bls.n	800612a <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	220d      	movs	r2, #13
 8006126:	701a      	strb	r2, [r3, #0]
      break;
 8006128:	e160      	b.n	80063ec <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	795b      	ldrb	r3, [r3, #5]
 800612e:	4619      	mov	r1, r3
 8006130:	6878      	ldr	r0, [r7, #4]
 8006132:	f000 ff73 	bl	800701c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	791b      	ldrb	r3, [r3, #4]
 800613a:	4619      	mov	r1, r3
 800613c:	6878      	ldr	r0, [r7, #4]
 800613e:	f000 ff6d 	bl	800701c <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	2200      	movs	r2, #0
 8006146:	701a      	strb	r2, [r3, #0]
      break;
 8006148:	e150      	b.n	80063ec <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800614a:	2112      	movs	r1, #18
 800614c:	6878      	ldr	r0, [r7, #4]
 800614e:	f000 f9f1 	bl	8006534 <USBH_Get_DevDesc>
 8006152:	4603      	mov	r3, r0
 8006154:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006156:	7bbb      	ldrb	r3, [r7, #14]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d103      	bne.n	8006164 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2202      	movs	r2, #2
 8006160:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006162:	e145      	b.n	80063f0 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006164:	7bbb      	ldrb	r3, [r7, #14]
 8006166:	2b03      	cmp	r3, #3
 8006168:	f040 8142 	bne.w	80063f0 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006172:	3301      	adds	r3, #1
 8006174:	b2da      	uxtb	r2, r3
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006182:	2b03      	cmp	r3, #3
 8006184:	d903      	bls.n	800618e <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	220d      	movs	r2, #13
 800618a:	701a      	strb	r2, [r3, #0]
      break;
 800618c:	e130      	b.n	80063f0 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	795b      	ldrb	r3, [r3, #5]
 8006192:	4619      	mov	r1, r3
 8006194:	6878      	ldr	r0, [r7, #4]
 8006196:	f000 ff41 	bl	800701c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	791b      	ldrb	r3, [r3, #4]
 800619e:	4619      	mov	r1, r3
 80061a0:	6878      	ldr	r0, [r7, #4]
 80061a2:	f000 ff3b 	bl	800701c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	2200      	movs	r2, #0
 80061aa:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2200      	movs	r2, #0
 80061b0:	701a      	strb	r2, [r3, #0]
      break;
 80061b2:	e11d      	b.n	80063f0 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 80061b4:	2101      	movs	r1, #1
 80061b6:	6878      	ldr	r0, [r7, #4]
 80061b8:	f000 fa68 	bl	800668c <USBH_SetAddress>
 80061bc:	4603      	mov	r3, r0
 80061be:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80061c0:	7bbb      	ldrb	r3, [r7, #14]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d132      	bne.n	800622c <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 80061c6:	2002      	movs	r0, #2
 80061c8:	f001 fa21 	bl	800760e <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2201      	movs	r2, #1
 80061d0:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2203      	movs	r2, #3
 80061d8:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	7919      	ldrb	r1, [r3, #4]
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80061ea:	687a      	ldr	r2, [r7, #4]
 80061ec:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80061ee:	b292      	uxth	r2, r2
 80061f0:	9202      	str	r2, [sp, #8]
 80061f2:	2200      	movs	r2, #0
 80061f4:	9201      	str	r2, [sp, #4]
 80061f6:	9300      	str	r3, [sp, #0]
 80061f8:	4603      	mov	r3, r0
 80061fa:	2280      	movs	r2, #128	; 0x80
 80061fc:	6878      	ldr	r0, [r7, #4]
 80061fe:	f000 febd 	bl	8006f7c <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	7959      	ldrb	r1, [r3, #5]
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8006212:	687a      	ldr	r2, [r7, #4]
 8006214:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006216:	b292      	uxth	r2, r2
 8006218:	9202      	str	r2, [sp, #8]
 800621a:	2200      	movs	r2, #0
 800621c:	9201      	str	r2, [sp, #4]
 800621e:	9300      	str	r3, [sp, #0]
 8006220:	4603      	mov	r3, r0
 8006222:	2200      	movs	r2, #0
 8006224:	6878      	ldr	r0, [r7, #4]
 8006226:	f000 fea9 	bl	8006f7c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800622a:	e0e3      	b.n	80063f4 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800622c:	7bbb      	ldrb	r3, [r7, #14]
 800622e:	2b03      	cmp	r3, #3
 8006230:	f040 80e0 	bne.w	80063f4 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	220d      	movs	r2, #13
 8006238:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	2200      	movs	r2, #0
 800623e:	705a      	strb	r2, [r3, #1]
      break;
 8006240:	e0d8      	b.n	80063f4 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8006242:	2109      	movs	r1, #9
 8006244:	6878      	ldr	r0, [r7, #4]
 8006246:	f000 f99d 	bl	8006584 <USBH_Get_CfgDesc>
 800624a:	4603      	mov	r3, r0
 800624c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800624e:	7bbb      	ldrb	r3, [r7, #14]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d103      	bne.n	800625c <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2204      	movs	r2, #4
 8006258:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800625a:	e0cd      	b.n	80063f8 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800625c:	7bbb      	ldrb	r3, [r7, #14]
 800625e:	2b03      	cmp	r3, #3
 8006260:	f040 80ca 	bne.w	80063f8 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800626a:	3301      	adds	r3, #1
 800626c:	b2da      	uxtb	r2, r3
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800627a:	2b03      	cmp	r3, #3
 800627c:	d903      	bls.n	8006286 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	220d      	movs	r2, #13
 8006282:	701a      	strb	r2, [r3, #0]
      break;
 8006284:	e0b8      	b.n	80063f8 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	795b      	ldrb	r3, [r3, #5]
 800628a:	4619      	mov	r1, r3
 800628c:	6878      	ldr	r0, [r7, #4]
 800628e:	f000 fec5 	bl	800701c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	791b      	ldrb	r3, [r3, #4]
 8006296:	4619      	mov	r1, r3
 8006298:	6878      	ldr	r0, [r7, #4]
 800629a:	f000 febf 	bl	800701c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	2200      	movs	r2, #0
 80062a2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2200      	movs	r2, #0
 80062a8:	701a      	strb	r2, [r3, #0]
      break;
 80062aa:	e0a5      	b.n	80063f8 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 80062b2:	4619      	mov	r1, r3
 80062b4:	6878      	ldr	r0, [r7, #4]
 80062b6:	f000 f965 	bl	8006584 <USBH_Get_CfgDesc>
 80062ba:	4603      	mov	r3, r0
 80062bc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80062be:	7bbb      	ldrb	r3, [r7, #14]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d103      	bne.n	80062cc <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2205      	movs	r2, #5
 80062c8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80062ca:	e097      	b.n	80063fc <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80062cc:	7bbb      	ldrb	r3, [r7, #14]
 80062ce:	2b03      	cmp	r3, #3
 80062d0:	f040 8094 	bne.w	80063fc <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80062da:	3301      	adds	r3, #1
 80062dc:	b2da      	uxtb	r2, r3
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80062ea:	2b03      	cmp	r3, #3
 80062ec:	d903      	bls.n	80062f6 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	220d      	movs	r2, #13
 80062f2:	701a      	strb	r2, [r3, #0]
      break;
 80062f4:	e082      	b.n	80063fc <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	795b      	ldrb	r3, [r3, #5]
 80062fa:	4619      	mov	r1, r3
 80062fc:	6878      	ldr	r0, [r7, #4]
 80062fe:	f000 fe8d 	bl	800701c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	791b      	ldrb	r3, [r3, #4]
 8006306:	4619      	mov	r1, r3
 8006308:	6878      	ldr	r0, [r7, #4]
 800630a:	f000 fe87 	bl	800701c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	2200      	movs	r2, #0
 8006312:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2200      	movs	r2, #0
 8006318:	701a      	strb	r2, [r3, #0]
      break;
 800631a:	e06f      	b.n	80063fc <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8006322:	2b00      	cmp	r3, #0
 8006324:	d019      	beq.n	800635a <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8006332:	23ff      	movs	r3, #255	; 0xff
 8006334:	6878      	ldr	r0, [r7, #4]
 8006336:	f000 f949 	bl	80065cc <USBH_Get_StringDesc>
 800633a:	4603      	mov	r3, r0
 800633c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800633e:	7bbb      	ldrb	r3, [r7, #14]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d103      	bne.n	800634c <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2206      	movs	r2, #6
 8006348:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800634a:	e059      	b.n	8006400 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800634c:	7bbb      	ldrb	r3, [r7, #14]
 800634e:	2b03      	cmp	r3, #3
 8006350:	d156      	bne.n	8006400 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	2206      	movs	r2, #6
 8006356:	705a      	strb	r2, [r3, #1]
      break;
 8006358:	e052      	b.n	8006400 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	2206      	movs	r2, #6
 800635e:	705a      	strb	r2, [r3, #1]
      break;
 8006360:	e04e      	b.n	8006400 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8006368:	2b00      	cmp	r3, #0
 800636a:	d019      	beq.n	80063a0 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8006378:	23ff      	movs	r3, #255	; 0xff
 800637a:	6878      	ldr	r0, [r7, #4]
 800637c:	f000 f926 	bl	80065cc <USBH_Get_StringDesc>
 8006380:	4603      	mov	r3, r0
 8006382:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006384:	7bbb      	ldrb	r3, [r7, #14]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d103      	bne.n	8006392 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	2207      	movs	r2, #7
 800638e:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8006390:	e038      	b.n	8006404 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006392:	7bbb      	ldrb	r3, [r7, #14]
 8006394:	2b03      	cmp	r3, #3
 8006396:	d135      	bne.n	8006404 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2207      	movs	r2, #7
 800639c:	705a      	strb	r2, [r3, #1]
      break;
 800639e:	e031      	b.n	8006404 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2207      	movs	r2, #7
 80063a4:	705a      	strb	r2, [r3, #1]
      break;
 80063a6:	e02d      	b.n	8006404 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d017      	beq.n	80063e2 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80063be:	23ff      	movs	r3, #255	; 0xff
 80063c0:	6878      	ldr	r0, [r7, #4]
 80063c2:	f000 f903 	bl	80065cc <USBH_Get_StringDesc>
 80063c6:	4603      	mov	r3, r0
 80063c8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80063ca:	7bbb      	ldrb	r3, [r7, #14]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d102      	bne.n	80063d6 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 80063d0:	2300      	movs	r3, #0
 80063d2:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 80063d4:	e018      	b.n	8006408 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80063d6:	7bbb      	ldrb	r3, [r7, #14]
 80063d8:	2b03      	cmp	r3, #3
 80063da:	d115      	bne.n	8006408 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 80063dc:	2300      	movs	r3, #0
 80063de:	73fb      	strb	r3, [r7, #15]
      break;
 80063e0:	e012      	b.n	8006408 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 80063e2:	2300      	movs	r3, #0
 80063e4:	73fb      	strb	r3, [r7, #15]
      break;
 80063e6:	e00f      	b.n	8006408 <USBH_HandleEnum+0x3bc>

    default:
      break;
 80063e8:	bf00      	nop
 80063ea:	e00e      	b.n	800640a <USBH_HandleEnum+0x3be>
      break;
 80063ec:	bf00      	nop
 80063ee:	e00c      	b.n	800640a <USBH_HandleEnum+0x3be>
      break;
 80063f0:	bf00      	nop
 80063f2:	e00a      	b.n	800640a <USBH_HandleEnum+0x3be>
      break;
 80063f4:	bf00      	nop
 80063f6:	e008      	b.n	800640a <USBH_HandleEnum+0x3be>
      break;
 80063f8:	bf00      	nop
 80063fa:	e006      	b.n	800640a <USBH_HandleEnum+0x3be>
      break;
 80063fc:	bf00      	nop
 80063fe:	e004      	b.n	800640a <USBH_HandleEnum+0x3be>
      break;
 8006400:	bf00      	nop
 8006402:	e002      	b.n	800640a <USBH_HandleEnum+0x3be>
      break;
 8006404:	bf00      	nop
 8006406:	e000      	b.n	800640a <USBH_HandleEnum+0x3be>
      break;
 8006408:	bf00      	nop
  }
  return Status;
 800640a:	7bfb      	ldrb	r3, [r7, #15]
}
 800640c:	4618      	mov	r0, r3
 800640e:	3710      	adds	r7, #16
 8006410:	46bd      	mov	sp, r7
 8006412:	bd80      	pop	{r7, pc}

08006414 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8006414:	b480      	push	{r7}
 8006416:	b083      	sub	sp, #12
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
 800641c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	683a      	ldr	r2, [r7, #0]
 8006422:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8006426:	bf00      	nop
 8006428:	370c      	adds	r7, #12
 800642a:	46bd      	mov	sp, r7
 800642c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006430:	4770      	bx	lr

08006432 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8006432:	b580      	push	{r7, lr}
 8006434:	b082      	sub	sp, #8
 8006436:	af00      	add	r7, sp, #0
 8006438:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006440:	1c5a      	adds	r2, r3, #1
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8006448:	6878      	ldr	r0, [r7, #4]
 800644a:	f000 f804 	bl	8006456 <USBH_HandleSof>
}
 800644e:	bf00      	nop
 8006450:	3708      	adds	r7, #8
 8006452:	46bd      	mov	sp, r7
 8006454:	bd80      	pop	{r7, pc}

08006456 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8006456:	b580      	push	{r7, lr}
 8006458:	b082      	sub	sp, #8
 800645a:	af00      	add	r7, sp, #0
 800645c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	781b      	ldrb	r3, [r3, #0]
 8006462:	b2db      	uxtb	r3, r3
 8006464:	2b0b      	cmp	r3, #11
 8006466:	d10a      	bne.n	800647e <USBH_HandleSof+0x28>
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800646e:	2b00      	cmp	r3, #0
 8006470:	d005      	beq.n	800647e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006478:	699b      	ldr	r3, [r3, #24]
 800647a:	6878      	ldr	r0, [r7, #4]
 800647c:	4798      	blx	r3
  }
}
 800647e:	bf00      	nop
 8006480:	3708      	adds	r7, #8
 8006482:	46bd      	mov	sp, r7
 8006484:	bd80      	pop	{r7, pc}

08006486 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8006486:	b480      	push	{r7}
 8006488:	b083      	sub	sp, #12
 800648a:	af00      	add	r7, sp, #0
 800648c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	2201      	movs	r2, #1
 8006492:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 8006496:	bf00      	nop
}
 8006498:	370c      	adds	r7, #12
 800649a:	46bd      	mov	sp, r7
 800649c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a0:	4770      	bx	lr

080064a2 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80064a2:	b480      	push	{r7}
 80064a4:	b083      	sub	sp, #12
 80064a6:	af00      	add	r7, sp, #0
 80064a8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	2200      	movs	r2, #0
 80064ae:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 80064b2:	bf00      	nop
}
 80064b4:	370c      	adds	r7, #12
 80064b6:	46bd      	mov	sp, r7
 80064b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064bc:	4770      	bx	lr

080064be <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80064be:	b480      	push	{r7}
 80064c0:	b083      	sub	sp, #12
 80064c2:	af00      	add	r7, sp, #0
 80064c4:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	2201      	movs	r2, #1
 80064ca:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	2200      	movs	r2, #0
 80064d2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	2200      	movs	r2, #0
 80064da:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 80064de:	2300      	movs	r3, #0
}
 80064e0:	4618      	mov	r0, r3
 80064e2:	370c      	adds	r7, #12
 80064e4:	46bd      	mov	sp, r7
 80064e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ea:	4770      	bx	lr

080064ec <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80064ec:	b580      	push	{r7, lr}
 80064ee:	b082      	sub	sp, #8
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2201      	movs	r2, #1
 80064f8:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2200      	movs	r2, #0
 8006500:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2200      	movs	r2, #0
 8006508:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800650c:	6878      	ldr	r0, [r7, #4]
 800650e:	f000 ff32 	bl	8007376 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	791b      	ldrb	r3, [r3, #4]
 8006516:	4619      	mov	r1, r3
 8006518:	6878      	ldr	r0, [r7, #4]
 800651a:	f000 fd7f 	bl	800701c <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	795b      	ldrb	r3, [r3, #5]
 8006522:	4619      	mov	r1, r3
 8006524:	6878      	ldr	r0, [r7, #4]
 8006526:	f000 fd79 	bl	800701c <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800652a:	2300      	movs	r3, #0
}
 800652c:	4618      	mov	r0, r3
 800652e:	3708      	adds	r7, #8
 8006530:	46bd      	mov	sp, r7
 8006532:	bd80      	pop	{r7, pc}

08006534 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8006534:	b580      	push	{r7, lr}
 8006536:	b086      	sub	sp, #24
 8006538:	af02      	add	r7, sp, #8
 800653a:	6078      	str	r0, [r7, #4]
 800653c:	460b      	mov	r3, r1
 800653e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8006546:	78fb      	ldrb	r3, [r7, #3]
 8006548:	b29b      	uxth	r3, r3
 800654a:	9300      	str	r3, [sp, #0]
 800654c:	4613      	mov	r3, r2
 800654e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006552:	2100      	movs	r1, #0
 8006554:	6878      	ldr	r0, [r7, #4]
 8006556:	f000 f864 	bl	8006622 <USBH_GetDescriptor>
 800655a:	4603      	mov	r3, r0
 800655c:	73fb      	strb	r3, [r7, #15]
 800655e:	7bfb      	ldrb	r3, [r7, #15]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d10a      	bne.n	800657a <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	f203 3026 	addw	r0, r3, #806	; 0x326
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006570:	78fa      	ldrb	r2, [r7, #3]
 8006572:	b292      	uxth	r2, r2
 8006574:	4619      	mov	r1, r3
 8006576:	f000 f918 	bl	80067aa <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800657a:	7bfb      	ldrb	r3, [r7, #15]
}
 800657c:	4618      	mov	r0, r3
 800657e:	3710      	adds	r7, #16
 8006580:	46bd      	mov	sp, r7
 8006582:	bd80      	pop	{r7, pc}

08006584 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8006584:	b580      	push	{r7, lr}
 8006586:	b086      	sub	sp, #24
 8006588:	af02      	add	r7, sp, #8
 800658a:	6078      	str	r0, [r7, #4]
 800658c:	460b      	mov	r3, r1
 800658e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	331c      	adds	r3, #28
 8006594:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8006596:	887b      	ldrh	r3, [r7, #2]
 8006598:	9300      	str	r3, [sp, #0]
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80065a0:	2100      	movs	r1, #0
 80065a2:	6878      	ldr	r0, [r7, #4]
 80065a4:	f000 f83d 	bl	8006622 <USBH_GetDescriptor>
 80065a8:	4603      	mov	r3, r0
 80065aa:	72fb      	strb	r3, [r7, #11]
 80065ac:	7afb      	ldrb	r3, [r7, #11]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d107      	bne.n	80065c2 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80065b8:	887a      	ldrh	r2, [r7, #2]
 80065ba:	68f9      	ldr	r1, [r7, #12]
 80065bc:	4618      	mov	r0, r3
 80065be:	f000 f964 	bl	800688a <USBH_ParseCfgDesc>
  }

  return status;
 80065c2:	7afb      	ldrb	r3, [r7, #11]
}
 80065c4:	4618      	mov	r0, r3
 80065c6:	3710      	adds	r7, #16
 80065c8:	46bd      	mov	sp, r7
 80065ca:	bd80      	pop	{r7, pc}

080065cc <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b088      	sub	sp, #32
 80065d0:	af02      	add	r7, sp, #8
 80065d2:	60f8      	str	r0, [r7, #12]
 80065d4:	607a      	str	r2, [r7, #4]
 80065d6:	461a      	mov	r2, r3
 80065d8:	460b      	mov	r3, r1
 80065da:	72fb      	strb	r3, [r7, #11]
 80065dc:	4613      	mov	r3, r2
 80065de:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 80065e0:	7afb      	ldrb	r3, [r7, #11]
 80065e2:	b29b      	uxth	r3, r3
 80065e4:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80065e8:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 80065f0:	893b      	ldrh	r3, [r7, #8]
 80065f2:	9300      	str	r3, [sp, #0]
 80065f4:	460b      	mov	r3, r1
 80065f6:	2100      	movs	r1, #0
 80065f8:	68f8      	ldr	r0, [r7, #12]
 80065fa:	f000 f812 	bl	8006622 <USBH_GetDescriptor>
 80065fe:	4603      	mov	r3, r0
 8006600:	75fb      	strb	r3, [r7, #23]
 8006602:	7dfb      	ldrb	r3, [r7, #23]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d107      	bne.n	8006618 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800660e:	893a      	ldrh	r2, [r7, #8]
 8006610:	6879      	ldr	r1, [r7, #4]
 8006612:	4618      	mov	r0, r3
 8006614:	f000 fa37 	bl	8006a86 <USBH_ParseStringDesc>
  }

  return status;
 8006618:	7dfb      	ldrb	r3, [r7, #23]
}
 800661a:	4618      	mov	r0, r3
 800661c:	3718      	adds	r7, #24
 800661e:	46bd      	mov	sp, r7
 8006620:	bd80      	pop	{r7, pc}

08006622 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8006622:	b580      	push	{r7, lr}
 8006624:	b084      	sub	sp, #16
 8006626:	af00      	add	r7, sp, #0
 8006628:	60f8      	str	r0, [r7, #12]
 800662a:	607b      	str	r3, [r7, #4]
 800662c:	460b      	mov	r3, r1
 800662e:	72fb      	strb	r3, [r7, #11]
 8006630:	4613      	mov	r3, r2
 8006632:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	789b      	ldrb	r3, [r3, #2]
 8006638:	2b01      	cmp	r3, #1
 800663a:	d11c      	bne.n	8006676 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800663c:	7afb      	ldrb	r3, [r7, #11]
 800663e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006642:	b2da      	uxtb	r2, r3
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	2206      	movs	r2, #6
 800664c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	893a      	ldrh	r2, [r7, #8]
 8006652:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8006654:	893b      	ldrh	r3, [r7, #8]
 8006656:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800665a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800665e:	d104      	bne.n	800666a <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	f240 4209 	movw	r2, #1033	; 0x409
 8006666:	829a      	strh	r2, [r3, #20]
 8006668:	e002      	b.n	8006670 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	2200      	movs	r2, #0
 800666e:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	8b3a      	ldrh	r2, [r7, #24]
 8006674:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8006676:	8b3b      	ldrh	r3, [r7, #24]
 8006678:	461a      	mov	r2, r3
 800667a:	6879      	ldr	r1, [r7, #4]
 800667c:	68f8      	ldr	r0, [r7, #12]
 800667e:	f000 fa50 	bl	8006b22 <USBH_CtlReq>
 8006682:	4603      	mov	r3, r0
}
 8006684:	4618      	mov	r0, r3
 8006686:	3710      	adds	r7, #16
 8006688:	46bd      	mov	sp, r7
 800668a:	bd80      	pop	{r7, pc}

0800668c <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800668c:	b580      	push	{r7, lr}
 800668e:	b082      	sub	sp, #8
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
 8006694:	460b      	mov	r3, r1
 8006696:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	789b      	ldrb	r3, [r3, #2]
 800669c:	2b01      	cmp	r3, #1
 800669e:	d10f      	bne.n	80066c0 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2200      	movs	r2, #0
 80066a4:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	2205      	movs	r2, #5
 80066aa:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80066ac:	78fb      	ldrb	r3, [r7, #3]
 80066ae:	b29a      	uxth	r2, r3
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2200      	movs	r2, #0
 80066b8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	2200      	movs	r2, #0
 80066be:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80066c0:	2200      	movs	r2, #0
 80066c2:	2100      	movs	r1, #0
 80066c4:	6878      	ldr	r0, [r7, #4]
 80066c6:	f000 fa2c 	bl	8006b22 <USBH_CtlReq>
 80066ca:	4603      	mov	r3, r0
}
 80066cc:	4618      	mov	r0, r3
 80066ce:	3708      	adds	r7, #8
 80066d0:	46bd      	mov	sp, r7
 80066d2:	bd80      	pop	{r7, pc}

080066d4 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b082      	sub	sp, #8
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
 80066dc:	460b      	mov	r3, r1
 80066de:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	789b      	ldrb	r3, [r3, #2]
 80066e4:	2b01      	cmp	r3, #1
 80066e6:	d10e      	bne.n	8006706 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2200      	movs	r2, #0
 80066ec:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	2209      	movs	r2, #9
 80066f2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	887a      	ldrh	r2, [r7, #2]
 80066f8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	2200      	movs	r2, #0
 80066fe:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2200      	movs	r2, #0
 8006704:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8006706:	2200      	movs	r2, #0
 8006708:	2100      	movs	r1, #0
 800670a:	6878      	ldr	r0, [r7, #4]
 800670c:	f000 fa09 	bl	8006b22 <USBH_CtlReq>
 8006710:	4603      	mov	r3, r0
}
 8006712:	4618      	mov	r0, r3
 8006714:	3708      	adds	r7, #8
 8006716:	46bd      	mov	sp, r7
 8006718:	bd80      	pop	{r7, pc}

0800671a <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800671a:	b580      	push	{r7, lr}
 800671c:	b082      	sub	sp, #8
 800671e:	af00      	add	r7, sp, #0
 8006720:	6078      	str	r0, [r7, #4]
 8006722:	460b      	mov	r3, r1
 8006724:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	789b      	ldrb	r3, [r3, #2]
 800672a:	2b01      	cmp	r3, #1
 800672c:	d10f      	bne.n	800674e <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	2200      	movs	r2, #0
 8006732:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2203      	movs	r2, #3
 8006738:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800673a:	78fb      	ldrb	r3, [r7, #3]
 800673c:	b29a      	uxth	r2, r3
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	2200      	movs	r2, #0
 8006746:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2200      	movs	r2, #0
 800674c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800674e:	2200      	movs	r2, #0
 8006750:	2100      	movs	r1, #0
 8006752:	6878      	ldr	r0, [r7, #4]
 8006754:	f000 f9e5 	bl	8006b22 <USBH_CtlReq>
 8006758:	4603      	mov	r3, r0
}
 800675a:	4618      	mov	r0, r3
 800675c:	3708      	adds	r7, #8
 800675e:	46bd      	mov	sp, r7
 8006760:	bd80      	pop	{r7, pc}

08006762 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8006762:	b580      	push	{r7, lr}
 8006764:	b082      	sub	sp, #8
 8006766:	af00      	add	r7, sp, #0
 8006768:	6078      	str	r0, [r7, #4]
 800676a:	460b      	mov	r3, r1
 800676c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	789b      	ldrb	r3, [r3, #2]
 8006772:	2b01      	cmp	r3, #1
 8006774:	d10f      	bne.n	8006796 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	2202      	movs	r2, #2
 800677a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2201      	movs	r2, #1
 8006780:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	2200      	movs	r2, #0
 8006786:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8006788:	78fb      	ldrb	r3, [r7, #3]
 800678a:	b29a      	uxth	r2, r3
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2200      	movs	r2, #0
 8006794:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 8006796:	2200      	movs	r2, #0
 8006798:	2100      	movs	r1, #0
 800679a:	6878      	ldr	r0, [r7, #4]
 800679c:	f000 f9c1 	bl	8006b22 <USBH_CtlReq>
 80067a0:	4603      	mov	r3, r0
}
 80067a2:	4618      	mov	r0, r3
 80067a4:	3708      	adds	r7, #8
 80067a6:	46bd      	mov	sp, r7
 80067a8:	bd80      	pop	{r7, pc}

080067aa <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 80067aa:	b480      	push	{r7}
 80067ac:	b085      	sub	sp, #20
 80067ae:	af00      	add	r7, sp, #0
 80067b0:	60f8      	str	r0, [r7, #12]
 80067b2:	60b9      	str	r1, [r7, #8]
 80067b4:	4613      	mov	r3, r2
 80067b6:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 80067b8:	68bb      	ldr	r3, [r7, #8]
 80067ba:	781a      	ldrb	r2, [r3, #0]
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 80067c0:	68bb      	ldr	r3, [r7, #8]
 80067c2:	785a      	ldrb	r2, [r3, #1]
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 80067c8:	68bb      	ldr	r3, [r7, #8]
 80067ca:	3302      	adds	r3, #2
 80067cc:	781b      	ldrb	r3, [r3, #0]
 80067ce:	b29a      	uxth	r2, r3
 80067d0:	68bb      	ldr	r3, [r7, #8]
 80067d2:	3303      	adds	r3, #3
 80067d4:	781b      	ldrb	r3, [r3, #0]
 80067d6:	b29b      	uxth	r3, r3
 80067d8:	021b      	lsls	r3, r3, #8
 80067da:	b29b      	uxth	r3, r3
 80067dc:	4313      	orrs	r3, r2
 80067de:	b29a      	uxth	r2, r3
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 80067e4:	68bb      	ldr	r3, [r7, #8]
 80067e6:	791a      	ldrb	r2, [r3, #4]
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 80067ec:	68bb      	ldr	r3, [r7, #8]
 80067ee:	795a      	ldrb	r2, [r3, #5]
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 80067f4:	68bb      	ldr	r3, [r7, #8]
 80067f6:	799a      	ldrb	r2, [r3, #6]
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 80067fc:	68bb      	ldr	r3, [r7, #8]
 80067fe:	79da      	ldrb	r2, [r3, #7]
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8006804:	88fb      	ldrh	r3, [r7, #6]
 8006806:	2b08      	cmp	r3, #8
 8006808:	d939      	bls.n	800687e <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800680a:	68bb      	ldr	r3, [r7, #8]
 800680c:	3308      	adds	r3, #8
 800680e:	781b      	ldrb	r3, [r3, #0]
 8006810:	b29a      	uxth	r2, r3
 8006812:	68bb      	ldr	r3, [r7, #8]
 8006814:	3309      	adds	r3, #9
 8006816:	781b      	ldrb	r3, [r3, #0]
 8006818:	b29b      	uxth	r3, r3
 800681a:	021b      	lsls	r3, r3, #8
 800681c:	b29b      	uxth	r3, r3
 800681e:	4313      	orrs	r3, r2
 8006820:	b29a      	uxth	r2, r3
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8006826:	68bb      	ldr	r3, [r7, #8]
 8006828:	330a      	adds	r3, #10
 800682a:	781b      	ldrb	r3, [r3, #0]
 800682c:	b29a      	uxth	r2, r3
 800682e:	68bb      	ldr	r3, [r7, #8]
 8006830:	330b      	adds	r3, #11
 8006832:	781b      	ldrb	r3, [r3, #0]
 8006834:	b29b      	uxth	r3, r3
 8006836:	021b      	lsls	r3, r3, #8
 8006838:	b29b      	uxth	r3, r3
 800683a:	4313      	orrs	r3, r2
 800683c:	b29a      	uxth	r2, r3
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8006842:	68bb      	ldr	r3, [r7, #8]
 8006844:	330c      	adds	r3, #12
 8006846:	781b      	ldrb	r3, [r3, #0]
 8006848:	b29a      	uxth	r2, r3
 800684a:	68bb      	ldr	r3, [r7, #8]
 800684c:	330d      	adds	r3, #13
 800684e:	781b      	ldrb	r3, [r3, #0]
 8006850:	b29b      	uxth	r3, r3
 8006852:	021b      	lsls	r3, r3, #8
 8006854:	b29b      	uxth	r3, r3
 8006856:	4313      	orrs	r3, r2
 8006858:	b29a      	uxth	r2, r3
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800685e:	68bb      	ldr	r3, [r7, #8]
 8006860:	7b9a      	ldrb	r2, [r3, #14]
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8006866:	68bb      	ldr	r3, [r7, #8]
 8006868:	7bda      	ldrb	r2, [r3, #15]
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800686e:	68bb      	ldr	r3, [r7, #8]
 8006870:	7c1a      	ldrb	r2, [r3, #16]
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8006876:	68bb      	ldr	r3, [r7, #8]
 8006878:	7c5a      	ldrb	r2, [r3, #17]
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	745a      	strb	r2, [r3, #17]
  }
}
 800687e:	bf00      	nop
 8006880:	3714      	adds	r7, #20
 8006882:	46bd      	mov	sp, r7
 8006884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006888:	4770      	bx	lr

0800688a <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800688a:	b580      	push	{r7, lr}
 800688c:	b08a      	sub	sp, #40	; 0x28
 800688e:	af00      	add	r7, sp, #0
 8006890:	60f8      	str	r0, [r7, #12]
 8006892:	60b9      	str	r1, [r7, #8]
 8006894:	4613      	mov	r3, r2
 8006896:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8006898:	68bb      	ldr	r3, [r7, #8]
 800689a:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800689c:	2300      	movs	r3, #0
 800689e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 80068a2:	2300      	movs	r3, #0
 80068a4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 80068a8:	68bb      	ldr	r3, [r7, #8]
 80068aa:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 80068ac:	68bb      	ldr	r3, [r7, #8]
 80068ae:	781a      	ldrb	r2, [r3, #0]
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 80068b4:	68bb      	ldr	r3, [r7, #8]
 80068b6:	785a      	ldrb	r2, [r3, #1]
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 80068bc:	68bb      	ldr	r3, [r7, #8]
 80068be:	3302      	adds	r3, #2
 80068c0:	781b      	ldrb	r3, [r3, #0]
 80068c2:	b29a      	uxth	r2, r3
 80068c4:	68bb      	ldr	r3, [r7, #8]
 80068c6:	3303      	adds	r3, #3
 80068c8:	781b      	ldrb	r3, [r3, #0]
 80068ca:	b29b      	uxth	r3, r3
 80068cc:	021b      	lsls	r3, r3, #8
 80068ce:	b29b      	uxth	r3, r3
 80068d0:	4313      	orrs	r3, r2
 80068d2:	b29a      	uxth	r2, r3
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 80068d8:	68bb      	ldr	r3, [r7, #8]
 80068da:	791a      	ldrb	r2, [r3, #4]
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 80068e0:	68bb      	ldr	r3, [r7, #8]
 80068e2:	795a      	ldrb	r2, [r3, #5]
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 80068e8:	68bb      	ldr	r3, [r7, #8]
 80068ea:	799a      	ldrb	r2, [r3, #6]
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 80068f0:	68bb      	ldr	r3, [r7, #8]
 80068f2:	79da      	ldrb	r2, [r3, #7]
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 80068f8:	68bb      	ldr	r3, [r7, #8]
 80068fa:	7a1a      	ldrb	r2, [r3, #8]
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8006900:	88fb      	ldrh	r3, [r7, #6]
 8006902:	2b09      	cmp	r3, #9
 8006904:	d95f      	bls.n	80069c6 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8006906:	2309      	movs	r3, #9
 8006908:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800690a:	2300      	movs	r3, #0
 800690c:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800690e:	e051      	b.n	80069b4 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8006910:	f107 0316 	add.w	r3, r7, #22
 8006914:	4619      	mov	r1, r3
 8006916:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006918:	f000 f8e8 	bl	8006aec <USBH_GetNextDesc>
 800691c:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800691e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006920:	785b      	ldrb	r3, [r3, #1]
 8006922:	2b04      	cmp	r3, #4
 8006924:	d146      	bne.n	80069b4 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8006926:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800692a:	221a      	movs	r2, #26
 800692c:	fb02 f303 	mul.w	r3, r2, r3
 8006930:	3308      	adds	r3, #8
 8006932:	68fa      	ldr	r2, [r7, #12]
 8006934:	4413      	add	r3, r2
 8006936:	3302      	adds	r3, #2
 8006938:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800693a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800693c:	69f8      	ldr	r0, [r7, #28]
 800693e:	f000 f846 	bl	80069ce <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8006942:	2300      	movs	r3, #0
 8006944:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8006948:	2300      	movs	r3, #0
 800694a:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800694c:	e022      	b.n	8006994 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800694e:	f107 0316 	add.w	r3, r7, #22
 8006952:	4619      	mov	r1, r3
 8006954:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006956:	f000 f8c9 	bl	8006aec <USBH_GetNextDesc>
 800695a:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800695c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800695e:	785b      	ldrb	r3, [r3, #1]
 8006960:	2b05      	cmp	r3, #5
 8006962:	d117      	bne.n	8006994 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8006964:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006968:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800696c:	3201      	adds	r2, #1
 800696e:	00d2      	lsls	r2, r2, #3
 8006970:	211a      	movs	r1, #26
 8006972:	fb01 f303 	mul.w	r3, r1, r3
 8006976:	4413      	add	r3, r2
 8006978:	3308      	adds	r3, #8
 800697a:	68fa      	ldr	r2, [r7, #12]
 800697c:	4413      	add	r3, r2
 800697e:	3304      	adds	r3, #4
 8006980:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 8006982:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006984:	69b8      	ldr	r0, [r7, #24]
 8006986:	f000 f851 	bl	8006a2c <USBH_ParseEPDesc>
            ep_ix++;
 800698a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800698e:	3301      	adds	r3, #1
 8006990:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8006994:	69fb      	ldr	r3, [r7, #28]
 8006996:	791b      	ldrb	r3, [r3, #4]
 8006998:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800699c:	429a      	cmp	r2, r3
 800699e:	d204      	bcs.n	80069aa <USBH_ParseCfgDesc+0x120>
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	885a      	ldrh	r2, [r3, #2]
 80069a4:	8afb      	ldrh	r3, [r7, #22]
 80069a6:	429a      	cmp	r2, r3
 80069a8:	d8d1      	bhi.n	800694e <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 80069aa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80069ae:	3301      	adds	r3, #1
 80069b0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80069b4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80069b8:	2b01      	cmp	r3, #1
 80069ba:	d804      	bhi.n	80069c6 <USBH_ParseCfgDesc+0x13c>
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	885a      	ldrh	r2, [r3, #2]
 80069c0:	8afb      	ldrh	r3, [r7, #22]
 80069c2:	429a      	cmp	r2, r3
 80069c4:	d8a4      	bhi.n	8006910 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 80069c6:	bf00      	nop
 80069c8:	3728      	adds	r7, #40	; 0x28
 80069ca:	46bd      	mov	sp, r7
 80069cc:	bd80      	pop	{r7, pc}

080069ce <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 80069ce:	b480      	push	{r7}
 80069d0:	b083      	sub	sp, #12
 80069d2:	af00      	add	r7, sp, #0
 80069d4:	6078      	str	r0, [r7, #4]
 80069d6:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 80069d8:	683b      	ldr	r3, [r7, #0]
 80069da:	781a      	ldrb	r2, [r3, #0]
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 80069e0:	683b      	ldr	r3, [r7, #0]
 80069e2:	785a      	ldrb	r2, [r3, #1]
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	789a      	ldrb	r2, [r3, #2]
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 80069f0:	683b      	ldr	r3, [r7, #0]
 80069f2:	78da      	ldrb	r2, [r3, #3]
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	791a      	ldrb	r2, [r3, #4]
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	795a      	ldrb	r2, [r3, #5]
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	799a      	ldrb	r2, [r3, #6]
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	79da      	ldrb	r2, [r3, #7]
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8006a18:	683b      	ldr	r3, [r7, #0]
 8006a1a:	7a1a      	ldrb	r2, [r3, #8]
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	721a      	strb	r2, [r3, #8]
}
 8006a20:	bf00      	nop
 8006a22:	370c      	adds	r7, #12
 8006a24:	46bd      	mov	sp, r7
 8006a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2a:	4770      	bx	lr

08006a2c <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 8006a2c:	b480      	push	{r7}
 8006a2e:	b083      	sub	sp, #12
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
 8006a34:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8006a36:	683b      	ldr	r3, [r7, #0]
 8006a38:	781a      	ldrb	r2, [r3, #0]
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8006a3e:	683b      	ldr	r3, [r7, #0]
 8006a40:	785a      	ldrb	r2, [r3, #1]
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8006a46:	683b      	ldr	r3, [r7, #0]
 8006a48:	789a      	ldrb	r2, [r3, #2]
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8006a4e:	683b      	ldr	r3, [r7, #0]
 8006a50:	78da      	ldrb	r2, [r3, #3]
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8006a56:	683b      	ldr	r3, [r7, #0]
 8006a58:	3304      	adds	r3, #4
 8006a5a:	781b      	ldrb	r3, [r3, #0]
 8006a5c:	b29a      	uxth	r2, r3
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	3305      	adds	r3, #5
 8006a62:	781b      	ldrb	r3, [r3, #0]
 8006a64:	b29b      	uxth	r3, r3
 8006a66:	021b      	lsls	r3, r3, #8
 8006a68:	b29b      	uxth	r3, r3
 8006a6a:	4313      	orrs	r3, r2
 8006a6c:	b29a      	uxth	r2, r3
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8006a72:	683b      	ldr	r3, [r7, #0]
 8006a74:	799a      	ldrb	r2, [r3, #6]
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	719a      	strb	r2, [r3, #6]
}
 8006a7a:	bf00      	nop
 8006a7c:	370c      	adds	r7, #12
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a84:	4770      	bx	lr

08006a86 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8006a86:	b480      	push	{r7}
 8006a88:	b087      	sub	sp, #28
 8006a8a:	af00      	add	r7, sp, #0
 8006a8c:	60f8      	str	r0, [r7, #12]
 8006a8e:	60b9      	str	r1, [r7, #8]
 8006a90:	4613      	mov	r3, r2
 8006a92:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	3301      	adds	r3, #1
 8006a98:	781b      	ldrb	r3, [r3, #0]
 8006a9a:	2b03      	cmp	r3, #3
 8006a9c:	d120      	bne.n	8006ae0 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	781b      	ldrb	r3, [r3, #0]
 8006aa2:	1e9a      	subs	r2, r3, #2
 8006aa4:	88fb      	ldrh	r3, [r7, #6]
 8006aa6:	4293      	cmp	r3, r2
 8006aa8:	bf28      	it	cs
 8006aaa:	4613      	movcs	r3, r2
 8006aac:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	3302      	adds	r3, #2
 8006ab2:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8006ab4:	2300      	movs	r3, #0
 8006ab6:	82fb      	strh	r3, [r7, #22]
 8006ab8:	e00b      	b.n	8006ad2 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8006aba:	8afb      	ldrh	r3, [r7, #22]
 8006abc:	68fa      	ldr	r2, [r7, #12]
 8006abe:	4413      	add	r3, r2
 8006ac0:	781a      	ldrb	r2, [r3, #0]
 8006ac2:	68bb      	ldr	r3, [r7, #8]
 8006ac4:	701a      	strb	r2, [r3, #0]
      pdest++;
 8006ac6:	68bb      	ldr	r3, [r7, #8]
 8006ac8:	3301      	adds	r3, #1
 8006aca:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8006acc:	8afb      	ldrh	r3, [r7, #22]
 8006ace:	3302      	adds	r3, #2
 8006ad0:	82fb      	strh	r3, [r7, #22]
 8006ad2:	8afa      	ldrh	r2, [r7, #22]
 8006ad4:	8abb      	ldrh	r3, [r7, #20]
 8006ad6:	429a      	cmp	r2, r3
 8006ad8:	d3ef      	bcc.n	8006aba <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8006ada:	68bb      	ldr	r3, [r7, #8]
 8006adc:	2200      	movs	r2, #0
 8006ade:	701a      	strb	r2, [r3, #0]
  }
}
 8006ae0:	bf00      	nop
 8006ae2:	371c      	adds	r7, #28
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aea:	4770      	bx	lr

08006aec <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8006aec:	b480      	push	{r7}
 8006aee:	b085      	sub	sp, #20
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
 8006af4:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8006af6:	683b      	ldr	r3, [r7, #0]
 8006af8:	881a      	ldrh	r2, [r3, #0]
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	781b      	ldrb	r3, [r3, #0]
 8006afe:	b29b      	uxth	r3, r3
 8006b00:	4413      	add	r3, r2
 8006b02:	b29a      	uxth	r2, r3
 8006b04:	683b      	ldr	r3, [r7, #0]
 8006b06:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	781b      	ldrb	r3, [r3, #0]
 8006b0c:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	4413      	add	r3, r2
 8006b12:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006b14:	68fb      	ldr	r3, [r7, #12]
}
 8006b16:	4618      	mov	r0, r3
 8006b18:	3714      	adds	r7, #20
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b20:	4770      	bx	lr

08006b22 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8006b22:	b580      	push	{r7, lr}
 8006b24:	b086      	sub	sp, #24
 8006b26:	af00      	add	r7, sp, #0
 8006b28:	60f8      	str	r0, [r7, #12]
 8006b2a:	60b9      	str	r1, [r7, #8]
 8006b2c:	4613      	mov	r3, r2
 8006b2e:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8006b30:	2301      	movs	r3, #1
 8006b32:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	789b      	ldrb	r3, [r3, #2]
 8006b38:	2b01      	cmp	r3, #1
 8006b3a:	d002      	beq.n	8006b42 <USBH_CtlReq+0x20>
 8006b3c:	2b02      	cmp	r3, #2
 8006b3e:	d00f      	beq.n	8006b60 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8006b40:	e027      	b.n	8006b92 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	68ba      	ldr	r2, [r7, #8]
 8006b46:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	88fa      	ldrh	r2, [r7, #6]
 8006b4c:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	2201      	movs	r2, #1
 8006b52:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	2202      	movs	r2, #2
 8006b58:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8006b5a:	2301      	movs	r3, #1
 8006b5c:	75fb      	strb	r3, [r7, #23]
      break;
 8006b5e:	e018      	b.n	8006b92 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8006b60:	68f8      	ldr	r0, [r7, #12]
 8006b62:	f000 f81b 	bl	8006b9c <USBH_HandleControl>
 8006b66:	4603      	mov	r3, r0
 8006b68:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8006b6a:	7dfb      	ldrb	r3, [r7, #23]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d002      	beq.n	8006b76 <USBH_CtlReq+0x54>
 8006b70:	7dfb      	ldrb	r3, [r7, #23]
 8006b72:	2b03      	cmp	r3, #3
 8006b74:	d106      	bne.n	8006b84 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	2201      	movs	r2, #1
 8006b7a:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	2200      	movs	r2, #0
 8006b80:	761a      	strb	r2, [r3, #24]
      break;
 8006b82:	e005      	b.n	8006b90 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8006b84:	7dfb      	ldrb	r3, [r7, #23]
 8006b86:	2b02      	cmp	r3, #2
 8006b88:	d102      	bne.n	8006b90 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	2201      	movs	r2, #1
 8006b8e:	709a      	strb	r2, [r3, #2]
      break;
 8006b90:	bf00      	nop
  }
  return status;
 8006b92:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b94:	4618      	mov	r0, r3
 8006b96:	3718      	adds	r7, #24
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	bd80      	pop	{r7, pc}

08006b9c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	b086      	sub	sp, #24
 8006ba0:	af02      	add	r7, sp, #8
 8006ba2:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8006ba4:	2301      	movs	r3, #1
 8006ba6:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006ba8:	2300      	movs	r3, #0
 8006baa:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	7e1b      	ldrb	r3, [r3, #24]
 8006bb0:	3b01      	subs	r3, #1
 8006bb2:	2b0a      	cmp	r3, #10
 8006bb4:	f200 8156 	bhi.w	8006e64 <USBH_HandleControl+0x2c8>
 8006bb8:	a201      	add	r2, pc, #4	; (adr r2, 8006bc0 <USBH_HandleControl+0x24>)
 8006bba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bbe:	bf00      	nop
 8006bc0:	08006bed 	.word	0x08006bed
 8006bc4:	08006c07 	.word	0x08006c07
 8006bc8:	08006c71 	.word	0x08006c71
 8006bcc:	08006c97 	.word	0x08006c97
 8006bd0:	08006ccf 	.word	0x08006ccf
 8006bd4:	08006cf9 	.word	0x08006cf9
 8006bd8:	08006d4b 	.word	0x08006d4b
 8006bdc:	08006d6d 	.word	0x08006d6d
 8006be0:	08006da9 	.word	0x08006da9
 8006be4:	08006dcf 	.word	0x08006dcf
 8006be8:	08006e0d 	.word	0x08006e0d
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	f103 0110 	add.w	r1, r3, #16
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	795b      	ldrb	r3, [r3, #5]
 8006bf6:	461a      	mov	r2, r3
 8006bf8:	6878      	ldr	r0, [r7, #4]
 8006bfa:	f000 f943 	bl	8006e84 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	2202      	movs	r2, #2
 8006c02:	761a      	strb	r2, [r3, #24]
      break;
 8006c04:	e139      	b.n	8006e7a <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	795b      	ldrb	r3, [r3, #5]
 8006c0a:	4619      	mov	r1, r3
 8006c0c:	6878      	ldr	r0, [r7, #4]
 8006c0e:	f000 fca1 	bl	8007554 <USBH_LL_GetURBState>
 8006c12:	4603      	mov	r3, r0
 8006c14:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8006c16:	7bbb      	ldrb	r3, [r7, #14]
 8006c18:	2b01      	cmp	r3, #1
 8006c1a:	d11e      	bne.n	8006c5a <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	7c1b      	ldrb	r3, [r3, #16]
 8006c20:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006c24:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	8adb      	ldrh	r3, [r3, #22]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d00a      	beq.n	8006c44 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8006c2e:	7b7b      	ldrb	r3, [r7, #13]
 8006c30:	2b80      	cmp	r3, #128	; 0x80
 8006c32:	d103      	bne.n	8006c3c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2203      	movs	r2, #3
 8006c38:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8006c3a:	e115      	b.n	8006e68 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2205      	movs	r2, #5
 8006c40:	761a      	strb	r2, [r3, #24]
      break;
 8006c42:	e111      	b.n	8006e68 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8006c44:	7b7b      	ldrb	r3, [r7, #13]
 8006c46:	2b80      	cmp	r3, #128	; 0x80
 8006c48:	d103      	bne.n	8006c52 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	2209      	movs	r2, #9
 8006c4e:	761a      	strb	r2, [r3, #24]
      break;
 8006c50:	e10a      	b.n	8006e68 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	2207      	movs	r2, #7
 8006c56:	761a      	strb	r2, [r3, #24]
      break;
 8006c58:	e106      	b.n	8006e68 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8006c5a:	7bbb      	ldrb	r3, [r7, #14]
 8006c5c:	2b04      	cmp	r3, #4
 8006c5e:	d003      	beq.n	8006c68 <USBH_HandleControl+0xcc>
 8006c60:	7bbb      	ldrb	r3, [r7, #14]
 8006c62:	2b02      	cmp	r3, #2
 8006c64:	f040 8100 	bne.w	8006e68 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	220b      	movs	r2, #11
 8006c6c:	761a      	strb	r2, [r3, #24]
      break;
 8006c6e:	e0fb      	b.n	8006e68 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006c76:	b29a      	uxth	r2, r3
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	6899      	ldr	r1, [r3, #8]
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	899a      	ldrh	r2, [r3, #12]
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	791b      	ldrb	r3, [r3, #4]
 8006c88:	6878      	ldr	r0, [r7, #4]
 8006c8a:	f000 f93a 	bl	8006f02 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	2204      	movs	r2, #4
 8006c92:	761a      	strb	r2, [r3, #24]
      break;
 8006c94:	e0f1      	b.n	8006e7a <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	791b      	ldrb	r3, [r3, #4]
 8006c9a:	4619      	mov	r1, r3
 8006c9c:	6878      	ldr	r0, [r7, #4]
 8006c9e:	f000 fc59 	bl	8007554 <USBH_LL_GetURBState>
 8006ca2:	4603      	mov	r3, r0
 8006ca4:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8006ca6:	7bbb      	ldrb	r3, [r7, #14]
 8006ca8:	2b01      	cmp	r3, #1
 8006caa:	d102      	bne.n	8006cb2 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2209      	movs	r2, #9
 8006cb0:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8006cb2:	7bbb      	ldrb	r3, [r7, #14]
 8006cb4:	2b05      	cmp	r3, #5
 8006cb6:	d102      	bne.n	8006cbe <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8006cb8:	2303      	movs	r3, #3
 8006cba:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8006cbc:	e0d6      	b.n	8006e6c <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8006cbe:	7bbb      	ldrb	r3, [r7, #14]
 8006cc0:	2b04      	cmp	r3, #4
 8006cc2:	f040 80d3 	bne.w	8006e6c <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	220b      	movs	r2, #11
 8006cca:	761a      	strb	r2, [r3, #24]
      break;
 8006ccc:	e0ce      	b.n	8006e6c <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	6899      	ldr	r1, [r3, #8]
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	899a      	ldrh	r2, [r3, #12]
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	795b      	ldrb	r3, [r3, #5]
 8006cda:	2001      	movs	r0, #1
 8006cdc:	9000      	str	r0, [sp, #0]
 8006cde:	6878      	ldr	r0, [r7, #4]
 8006ce0:	f000 f8ea 	bl	8006eb8 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006cea:	b29a      	uxth	r2, r3
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2206      	movs	r2, #6
 8006cf4:	761a      	strb	r2, [r3, #24]
      break;
 8006cf6:	e0c0      	b.n	8006e7a <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	795b      	ldrb	r3, [r3, #5]
 8006cfc:	4619      	mov	r1, r3
 8006cfe:	6878      	ldr	r0, [r7, #4]
 8006d00:	f000 fc28 	bl	8007554 <USBH_LL_GetURBState>
 8006d04:	4603      	mov	r3, r0
 8006d06:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8006d08:	7bbb      	ldrb	r3, [r7, #14]
 8006d0a:	2b01      	cmp	r3, #1
 8006d0c:	d103      	bne.n	8006d16 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	2207      	movs	r2, #7
 8006d12:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8006d14:	e0ac      	b.n	8006e70 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8006d16:	7bbb      	ldrb	r3, [r7, #14]
 8006d18:	2b05      	cmp	r3, #5
 8006d1a:	d105      	bne.n	8006d28 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	220c      	movs	r2, #12
 8006d20:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8006d22:	2303      	movs	r3, #3
 8006d24:	73fb      	strb	r3, [r7, #15]
      break;
 8006d26:	e0a3      	b.n	8006e70 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8006d28:	7bbb      	ldrb	r3, [r7, #14]
 8006d2a:	2b02      	cmp	r3, #2
 8006d2c:	d103      	bne.n	8006d36 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	2205      	movs	r2, #5
 8006d32:	761a      	strb	r2, [r3, #24]
      break;
 8006d34:	e09c      	b.n	8006e70 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8006d36:	7bbb      	ldrb	r3, [r7, #14]
 8006d38:	2b04      	cmp	r3, #4
 8006d3a:	f040 8099 	bne.w	8006e70 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	220b      	movs	r2, #11
 8006d42:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8006d44:	2302      	movs	r3, #2
 8006d46:	73fb      	strb	r3, [r7, #15]
      break;
 8006d48:	e092      	b.n	8006e70 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	791b      	ldrb	r3, [r3, #4]
 8006d4e:	2200      	movs	r2, #0
 8006d50:	2100      	movs	r1, #0
 8006d52:	6878      	ldr	r0, [r7, #4]
 8006d54:	f000 f8d5 	bl	8006f02 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006d5e:	b29a      	uxth	r2, r3
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2208      	movs	r2, #8
 8006d68:	761a      	strb	r2, [r3, #24]

      break;
 8006d6a:	e086      	b.n	8006e7a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	791b      	ldrb	r3, [r3, #4]
 8006d70:	4619      	mov	r1, r3
 8006d72:	6878      	ldr	r0, [r7, #4]
 8006d74:	f000 fbee 	bl	8007554 <USBH_LL_GetURBState>
 8006d78:	4603      	mov	r3, r0
 8006d7a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8006d7c:	7bbb      	ldrb	r3, [r7, #14]
 8006d7e:	2b01      	cmp	r3, #1
 8006d80:	d105      	bne.n	8006d8e <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	220d      	movs	r2, #13
 8006d86:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8006d88:	2300      	movs	r3, #0
 8006d8a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8006d8c:	e072      	b.n	8006e74 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8006d8e:	7bbb      	ldrb	r3, [r7, #14]
 8006d90:	2b04      	cmp	r3, #4
 8006d92:	d103      	bne.n	8006d9c <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	220b      	movs	r2, #11
 8006d98:	761a      	strb	r2, [r3, #24]
      break;
 8006d9a:	e06b      	b.n	8006e74 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8006d9c:	7bbb      	ldrb	r3, [r7, #14]
 8006d9e:	2b05      	cmp	r3, #5
 8006da0:	d168      	bne.n	8006e74 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8006da2:	2303      	movs	r3, #3
 8006da4:	73fb      	strb	r3, [r7, #15]
      break;
 8006da6:	e065      	b.n	8006e74 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	795b      	ldrb	r3, [r3, #5]
 8006dac:	2201      	movs	r2, #1
 8006dae:	9200      	str	r2, [sp, #0]
 8006db0:	2200      	movs	r2, #0
 8006db2:	2100      	movs	r1, #0
 8006db4:	6878      	ldr	r0, [r7, #4]
 8006db6:	f000 f87f 	bl	8006eb8 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006dc0:	b29a      	uxth	r2, r3
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	220a      	movs	r2, #10
 8006dca:	761a      	strb	r2, [r3, #24]
      break;
 8006dcc:	e055      	b.n	8006e7a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	795b      	ldrb	r3, [r3, #5]
 8006dd2:	4619      	mov	r1, r3
 8006dd4:	6878      	ldr	r0, [r7, #4]
 8006dd6:	f000 fbbd 	bl	8007554 <USBH_LL_GetURBState>
 8006dda:	4603      	mov	r3, r0
 8006ddc:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8006dde:	7bbb      	ldrb	r3, [r7, #14]
 8006de0:	2b01      	cmp	r3, #1
 8006de2:	d105      	bne.n	8006df0 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8006de4:	2300      	movs	r3, #0
 8006de6:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	220d      	movs	r2, #13
 8006dec:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8006dee:	e043      	b.n	8006e78 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8006df0:	7bbb      	ldrb	r3, [r7, #14]
 8006df2:	2b02      	cmp	r3, #2
 8006df4:	d103      	bne.n	8006dfe <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	2209      	movs	r2, #9
 8006dfa:	761a      	strb	r2, [r3, #24]
      break;
 8006dfc:	e03c      	b.n	8006e78 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8006dfe:	7bbb      	ldrb	r3, [r7, #14]
 8006e00:	2b04      	cmp	r3, #4
 8006e02:	d139      	bne.n	8006e78 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	220b      	movs	r2, #11
 8006e08:	761a      	strb	r2, [r3, #24]
      break;
 8006e0a:	e035      	b.n	8006e78 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	7e5b      	ldrb	r3, [r3, #25]
 8006e10:	3301      	adds	r3, #1
 8006e12:	b2da      	uxtb	r2, r3
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	765a      	strb	r2, [r3, #25]
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	7e5b      	ldrb	r3, [r3, #25]
 8006e1c:	2b02      	cmp	r3, #2
 8006e1e:	d806      	bhi.n	8006e2e <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2201      	movs	r2, #1
 8006e24:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	2201      	movs	r2, #1
 8006e2a:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8006e2c:	e025      	b.n	8006e7a <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006e34:	2106      	movs	r1, #6
 8006e36:	6878      	ldr	r0, [r7, #4]
 8006e38:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	795b      	ldrb	r3, [r3, #5]
 8006e44:	4619      	mov	r1, r3
 8006e46:	6878      	ldr	r0, [r7, #4]
 8006e48:	f000 f8e8 	bl	800701c <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	791b      	ldrb	r3, [r3, #4]
 8006e50:	4619      	mov	r1, r3
 8006e52:	6878      	ldr	r0, [r7, #4]
 8006e54:	f000 f8e2 	bl	800701c <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	2200      	movs	r2, #0
 8006e5c:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8006e5e:	2302      	movs	r3, #2
 8006e60:	73fb      	strb	r3, [r7, #15]
      break;
 8006e62:	e00a      	b.n	8006e7a <USBH_HandleControl+0x2de>

    default:
      break;
 8006e64:	bf00      	nop
 8006e66:	e008      	b.n	8006e7a <USBH_HandleControl+0x2de>
      break;
 8006e68:	bf00      	nop
 8006e6a:	e006      	b.n	8006e7a <USBH_HandleControl+0x2de>
      break;
 8006e6c:	bf00      	nop
 8006e6e:	e004      	b.n	8006e7a <USBH_HandleControl+0x2de>
      break;
 8006e70:	bf00      	nop
 8006e72:	e002      	b.n	8006e7a <USBH_HandleControl+0x2de>
      break;
 8006e74:	bf00      	nop
 8006e76:	e000      	b.n	8006e7a <USBH_HandleControl+0x2de>
      break;
 8006e78:	bf00      	nop
  }

  return status;
 8006e7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	3710      	adds	r7, #16
 8006e80:	46bd      	mov	sp, r7
 8006e82:	bd80      	pop	{r7, pc}

08006e84 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8006e84:	b580      	push	{r7, lr}
 8006e86:	b088      	sub	sp, #32
 8006e88:	af04      	add	r7, sp, #16
 8006e8a:	60f8      	str	r0, [r7, #12]
 8006e8c:	60b9      	str	r1, [r7, #8]
 8006e8e:	4613      	mov	r3, r2
 8006e90:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8006e92:	79f9      	ldrb	r1, [r7, #7]
 8006e94:	2300      	movs	r3, #0
 8006e96:	9303      	str	r3, [sp, #12]
 8006e98:	2308      	movs	r3, #8
 8006e9a:	9302      	str	r3, [sp, #8]
 8006e9c:	68bb      	ldr	r3, [r7, #8]
 8006e9e:	9301      	str	r3, [sp, #4]
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	9300      	str	r3, [sp, #0]
 8006ea4:	2300      	movs	r3, #0
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	68f8      	ldr	r0, [r7, #12]
 8006eaa:	f000 fb22 	bl	80074f2 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 8006eae:	2300      	movs	r3, #0
}
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	3710      	adds	r7, #16
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	bd80      	pop	{r7, pc}

08006eb8 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8006eb8:	b580      	push	{r7, lr}
 8006eba:	b088      	sub	sp, #32
 8006ebc:	af04      	add	r7, sp, #16
 8006ebe:	60f8      	str	r0, [r7, #12]
 8006ec0:	60b9      	str	r1, [r7, #8]
 8006ec2:	4611      	mov	r1, r2
 8006ec4:	461a      	mov	r2, r3
 8006ec6:	460b      	mov	r3, r1
 8006ec8:	80fb      	strh	r3, [r7, #6]
 8006eca:	4613      	mov	r3, r2
 8006ecc:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d001      	beq.n	8006edc <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8006ed8:	2300      	movs	r3, #0
 8006eda:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8006edc:	7979      	ldrb	r1, [r7, #5]
 8006ede:	7e3b      	ldrb	r3, [r7, #24]
 8006ee0:	9303      	str	r3, [sp, #12]
 8006ee2:	88fb      	ldrh	r3, [r7, #6]
 8006ee4:	9302      	str	r3, [sp, #8]
 8006ee6:	68bb      	ldr	r3, [r7, #8]
 8006ee8:	9301      	str	r3, [sp, #4]
 8006eea:	2301      	movs	r3, #1
 8006eec:	9300      	str	r3, [sp, #0]
 8006eee:	2300      	movs	r3, #0
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	68f8      	ldr	r0, [r7, #12]
 8006ef4:	f000 fafd 	bl	80074f2 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8006ef8:	2300      	movs	r3, #0
}
 8006efa:	4618      	mov	r0, r3
 8006efc:	3710      	adds	r7, #16
 8006efe:	46bd      	mov	sp, r7
 8006f00:	bd80      	pop	{r7, pc}

08006f02 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8006f02:	b580      	push	{r7, lr}
 8006f04:	b088      	sub	sp, #32
 8006f06:	af04      	add	r7, sp, #16
 8006f08:	60f8      	str	r0, [r7, #12]
 8006f0a:	60b9      	str	r1, [r7, #8]
 8006f0c:	4611      	mov	r1, r2
 8006f0e:	461a      	mov	r2, r3
 8006f10:	460b      	mov	r3, r1
 8006f12:	80fb      	strh	r3, [r7, #6]
 8006f14:	4613      	mov	r3, r2
 8006f16:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8006f18:	7979      	ldrb	r1, [r7, #5]
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	9303      	str	r3, [sp, #12]
 8006f1e:	88fb      	ldrh	r3, [r7, #6]
 8006f20:	9302      	str	r3, [sp, #8]
 8006f22:	68bb      	ldr	r3, [r7, #8]
 8006f24:	9301      	str	r3, [sp, #4]
 8006f26:	2301      	movs	r3, #1
 8006f28:	9300      	str	r3, [sp, #0]
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	2201      	movs	r2, #1
 8006f2e:	68f8      	ldr	r0, [r7, #12]
 8006f30:	f000 fadf 	bl	80074f2 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8006f34:	2300      	movs	r3, #0

}
 8006f36:	4618      	mov	r0, r3
 8006f38:	3710      	adds	r7, #16
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	bd80      	pop	{r7, pc}

08006f3e <USBH_InterruptReceiveData>:
  */
USBH_StatusTypeDef USBH_InterruptReceiveData(USBH_HandleTypeDef *phost,
                                             uint8_t *buff,
                                             uint8_t length,
                                             uint8_t pipe_num)
{
 8006f3e:	b580      	push	{r7, lr}
 8006f40:	b088      	sub	sp, #32
 8006f42:	af04      	add	r7, sp, #16
 8006f44:	60f8      	str	r0, [r7, #12]
 8006f46:	60b9      	str	r1, [r7, #8]
 8006f48:	4611      	mov	r1, r2
 8006f4a:	461a      	mov	r2, r3
 8006f4c:	460b      	mov	r3, r1
 8006f4e:	71fb      	strb	r3, [r7, #7]
 8006f50:	4613      	mov	r3, r2
 8006f52:	71bb      	strb	r3, [r7, #6]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8006f54:	79fb      	ldrb	r3, [r7, #7]
 8006f56:	b29b      	uxth	r3, r3
 8006f58:	79b9      	ldrb	r1, [r7, #6]
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	9203      	str	r2, [sp, #12]
 8006f5e:	9302      	str	r3, [sp, #8]
 8006f60:	68bb      	ldr	r3, [r7, #8]
 8006f62:	9301      	str	r3, [sp, #4]
 8006f64:	2301      	movs	r3, #1
 8006f66:	9300      	str	r3, [sp, #0]
 8006f68:	2303      	movs	r3, #3
 8006f6a:	2201      	movs	r2, #1
 8006f6c:	68f8      	ldr	r0, [r7, #12]
 8006f6e:	f000 fac0 	bl	80074f2 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    (uint16_t)length,     /* data length      */
                    0U);

  return USBH_OK;
 8006f72:	2300      	movs	r3, #0
}
 8006f74:	4618      	mov	r0, r3
 8006f76:	3710      	adds	r7, #16
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	bd80      	pop	{r7, pc}

08006f7c <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	b086      	sub	sp, #24
 8006f80:	af04      	add	r7, sp, #16
 8006f82:	6078      	str	r0, [r7, #4]
 8006f84:	4608      	mov	r0, r1
 8006f86:	4611      	mov	r1, r2
 8006f88:	461a      	mov	r2, r3
 8006f8a:	4603      	mov	r3, r0
 8006f8c:	70fb      	strb	r3, [r7, #3]
 8006f8e:	460b      	mov	r3, r1
 8006f90:	70bb      	strb	r3, [r7, #2]
 8006f92:	4613      	mov	r3, r2
 8006f94:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8006f96:	7878      	ldrb	r0, [r7, #1]
 8006f98:	78ba      	ldrb	r2, [r7, #2]
 8006f9a:	78f9      	ldrb	r1, [r7, #3]
 8006f9c:	8b3b      	ldrh	r3, [r7, #24]
 8006f9e:	9302      	str	r3, [sp, #8]
 8006fa0:	7d3b      	ldrb	r3, [r7, #20]
 8006fa2:	9301      	str	r3, [sp, #4]
 8006fa4:	7c3b      	ldrb	r3, [r7, #16]
 8006fa6:	9300      	str	r3, [sp, #0]
 8006fa8:	4603      	mov	r3, r0
 8006faa:	6878      	ldr	r0, [r7, #4]
 8006fac:	f000 fa53 	bl	8007456 <USBH_LL_OpenPipe>

  return USBH_OK;
 8006fb0:	2300      	movs	r3, #0
}
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	3708      	adds	r7, #8
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	bd80      	pop	{r7, pc}

08006fba <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8006fba:	b580      	push	{r7, lr}
 8006fbc:	b082      	sub	sp, #8
 8006fbe:	af00      	add	r7, sp, #0
 8006fc0:	6078      	str	r0, [r7, #4]
 8006fc2:	460b      	mov	r3, r1
 8006fc4:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 8006fc6:	78fb      	ldrb	r3, [r7, #3]
 8006fc8:	4619      	mov	r1, r3
 8006fca:	6878      	ldr	r0, [r7, #4]
 8006fcc:	f000 fa72 	bl	80074b4 <USBH_LL_ClosePipe>

  return USBH_OK;
 8006fd0:	2300      	movs	r3, #0
}
 8006fd2:	4618      	mov	r0, r3
 8006fd4:	3708      	adds	r7, #8
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	bd80      	pop	{r7, pc}

08006fda <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8006fda:	b580      	push	{r7, lr}
 8006fdc:	b084      	sub	sp, #16
 8006fde:	af00      	add	r7, sp, #0
 8006fe0:	6078      	str	r0, [r7, #4]
 8006fe2:	460b      	mov	r3, r1
 8006fe4:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8006fe6:	6878      	ldr	r0, [r7, #4]
 8006fe8:	f000 f836 	bl	8007058 <USBH_GetFreePipe>
 8006fec:	4603      	mov	r3, r0
 8006fee:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8006ff0:	89fb      	ldrh	r3, [r7, #14]
 8006ff2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006ff6:	4293      	cmp	r3, r2
 8006ff8:	d00a      	beq.n	8007010 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 8006ffa:	78fa      	ldrb	r2, [r7, #3]
 8006ffc:	89fb      	ldrh	r3, [r7, #14]
 8006ffe:	f003 030f 	and.w	r3, r3, #15
 8007002:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007006:	6879      	ldr	r1, [r7, #4]
 8007008:	33e0      	adds	r3, #224	; 0xe0
 800700a:	009b      	lsls	r3, r3, #2
 800700c:	440b      	add	r3, r1
 800700e:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8007010:	89fb      	ldrh	r3, [r7, #14]
 8007012:	b2db      	uxtb	r3, r3
}
 8007014:	4618      	mov	r0, r3
 8007016:	3710      	adds	r7, #16
 8007018:	46bd      	mov	sp, r7
 800701a:	bd80      	pop	{r7, pc}

0800701c <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800701c:	b480      	push	{r7}
 800701e:	b083      	sub	sp, #12
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
 8007024:	460b      	mov	r3, r1
 8007026:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 8007028:	78fb      	ldrb	r3, [r7, #3]
 800702a:	2b0a      	cmp	r3, #10
 800702c:	d80d      	bhi.n	800704a <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800702e:	78fb      	ldrb	r3, [r7, #3]
 8007030:	687a      	ldr	r2, [r7, #4]
 8007032:	33e0      	adds	r3, #224	; 0xe0
 8007034:	009b      	lsls	r3, r3, #2
 8007036:	4413      	add	r3, r2
 8007038:	685a      	ldr	r2, [r3, #4]
 800703a:	78fb      	ldrb	r3, [r7, #3]
 800703c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8007040:	6879      	ldr	r1, [r7, #4]
 8007042:	33e0      	adds	r3, #224	; 0xe0
 8007044:	009b      	lsls	r3, r3, #2
 8007046:	440b      	add	r3, r1
 8007048:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800704a:	2300      	movs	r3, #0
}
 800704c:	4618      	mov	r0, r3
 800704e:	370c      	adds	r7, #12
 8007050:	46bd      	mov	sp, r7
 8007052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007056:	4770      	bx	lr

08007058 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8007058:	b480      	push	{r7}
 800705a:	b085      	sub	sp, #20
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8007060:	2300      	movs	r3, #0
 8007062:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8007064:	2300      	movs	r3, #0
 8007066:	73fb      	strb	r3, [r7, #15]
 8007068:	e00f      	b.n	800708a <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800706a:	7bfb      	ldrb	r3, [r7, #15]
 800706c:	687a      	ldr	r2, [r7, #4]
 800706e:	33e0      	adds	r3, #224	; 0xe0
 8007070:	009b      	lsls	r3, r3, #2
 8007072:	4413      	add	r3, r2
 8007074:	685b      	ldr	r3, [r3, #4]
 8007076:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800707a:	2b00      	cmp	r3, #0
 800707c:	d102      	bne.n	8007084 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800707e:	7bfb      	ldrb	r3, [r7, #15]
 8007080:	b29b      	uxth	r3, r3
 8007082:	e007      	b.n	8007094 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 8007084:	7bfb      	ldrb	r3, [r7, #15]
 8007086:	3301      	adds	r3, #1
 8007088:	73fb      	strb	r3, [r7, #15]
 800708a:	7bfb      	ldrb	r3, [r7, #15]
 800708c:	2b0a      	cmp	r3, #10
 800708e:	d9ec      	bls.n	800706a <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8007090:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8007094:	4618      	mov	r0, r3
 8007096:	3714      	adds	r7, #20
 8007098:	46bd      	mov	sp, r7
 800709a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709e:	4770      	bx	lr

080070a0 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 80070a0:	b580      	push	{r7, lr}
 80070a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */
  
  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 80070a4:	2201      	movs	r2, #1
 80070a6:	490e      	ldr	r1, [pc, #56]	; (80070e0 <MX_USB_HOST_Init+0x40>)
 80070a8:	480e      	ldr	r0, [pc, #56]	; (80070e4 <MX_USB_HOST_Init+0x44>)
 80070aa:	f7fe fcc5 	bl	8005a38 <USBH_Init>
 80070ae:	4603      	mov	r3, r0
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d001      	beq.n	80070b8 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 80070b4:	f7f9 fbb0 	bl	8000818 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_HID_CLASS) != USBH_OK)
 80070b8:	490b      	ldr	r1, [pc, #44]	; (80070e8 <MX_USB_HOST_Init+0x48>)
 80070ba:	480a      	ldr	r0, [pc, #40]	; (80070e4 <MX_USB_HOST_Init+0x44>)
 80070bc:	f7fe fd4a 	bl	8005b54 <USBH_RegisterClass>
 80070c0:	4603      	mov	r3, r0
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d001      	beq.n	80070ca <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 80070c6:	f7f9 fba7 	bl	8000818 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 80070ca:	4806      	ldr	r0, [pc, #24]	; (80070e4 <MX_USB_HOST_Init+0x44>)
 80070cc:	f7fe fdce 	bl	8005c6c <USBH_Start>
 80070d0:	4603      	mov	r3, r0
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d001      	beq.n	80070da <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 80070d6:	f7f9 fb9f 	bl	8000818 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */
  
  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 80070da:	bf00      	nop
 80070dc:	bd80      	pop	{r7, pc}
 80070de:	bf00      	nop
 80070e0:	08007101 	.word	0x08007101
 80070e4:	200001a0 	.word	0x200001a0
 80070e8:	2000000c 	.word	0x2000000c

080070ec <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 80070ec:	b580      	push	{r7, lr}
 80070ee:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 80070f0:	4802      	ldr	r0, [pc, #8]	; (80070fc <MX_USB_HOST_Process+0x10>)
 80070f2:	f7fe fdcb 	bl	8005c8c <USBH_Process>
}
 80070f6:	bf00      	nop
 80070f8:	bd80      	pop	{r7, pc}
 80070fa:	bf00      	nop
 80070fc:	200001a0 	.word	0x200001a0

08007100 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8007100:	b480      	push	{r7}
 8007102:	b083      	sub	sp, #12
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
 8007108:	460b      	mov	r3, r1
 800710a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800710c:	78fb      	ldrb	r3, [r7, #3]
 800710e:	3b01      	subs	r3, #1
 8007110:	2b04      	cmp	r3, #4
 8007112:	d819      	bhi.n	8007148 <USBH_UserProcess+0x48>
 8007114:	a201      	add	r2, pc, #4	; (adr r2, 800711c <USBH_UserProcess+0x1c>)
 8007116:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800711a:	bf00      	nop
 800711c:	08007149 	.word	0x08007149
 8007120:	08007139 	.word	0x08007139
 8007124:	08007149 	.word	0x08007149
 8007128:	08007141 	.word	0x08007141
 800712c:	08007131 	.word	0x08007131
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8007130:	4b09      	ldr	r3, [pc, #36]	; (8007158 <USBH_UserProcess+0x58>)
 8007132:	2203      	movs	r2, #3
 8007134:	701a      	strb	r2, [r3, #0]
  break;
 8007136:	e008      	b.n	800714a <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8007138:	4b07      	ldr	r3, [pc, #28]	; (8007158 <USBH_UserProcess+0x58>)
 800713a:	2202      	movs	r2, #2
 800713c:	701a      	strb	r2, [r3, #0]
  break;
 800713e:	e004      	b.n	800714a <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8007140:	4b05      	ldr	r3, [pc, #20]	; (8007158 <USBH_UserProcess+0x58>)
 8007142:	2201      	movs	r2, #1
 8007144:	701a      	strb	r2, [r3, #0]
  break;
 8007146:	e000      	b.n	800714a <USBH_UserProcess+0x4a>

  default:
  break;
 8007148:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800714a:	bf00      	nop
 800714c:	370c      	adds	r7, #12
 800714e:	46bd      	mov	sp, r7
 8007150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007154:	4770      	bx	lr
 8007156:	bf00      	nop
 8007158:	200000b4 	.word	0x200000b4

0800715c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800715c:	b580      	push	{r7, lr}
 800715e:	b08a      	sub	sp, #40	; 0x28
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007164:	f107 0314 	add.w	r3, r7, #20
 8007168:	2200      	movs	r2, #0
 800716a:	601a      	str	r2, [r3, #0]
 800716c:	605a      	str	r2, [r3, #4]
 800716e:	609a      	str	r2, [r3, #8]
 8007170:	60da      	str	r2, [r3, #12]
 8007172:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800717c:	d147      	bne.n	800720e <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800717e:	2300      	movs	r3, #0
 8007180:	613b      	str	r3, [r7, #16]
 8007182:	4b25      	ldr	r3, [pc, #148]	; (8007218 <HAL_HCD_MspInit+0xbc>)
 8007184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007186:	4a24      	ldr	r2, [pc, #144]	; (8007218 <HAL_HCD_MspInit+0xbc>)
 8007188:	f043 0301 	orr.w	r3, r3, #1
 800718c:	6313      	str	r3, [r2, #48]	; 0x30
 800718e:	4b22      	ldr	r3, [pc, #136]	; (8007218 <HAL_HCD_MspInit+0xbc>)
 8007190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007192:	f003 0301 	and.w	r3, r3, #1
 8007196:	613b      	str	r3, [r7, #16]
 8007198:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800719a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800719e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80071a0:	2300      	movs	r3, #0
 80071a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80071a4:	2300      	movs	r3, #0
 80071a6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80071a8:	f107 0314 	add.w	r3, r7, #20
 80071ac:	4619      	mov	r1, r3
 80071ae:	481b      	ldr	r0, [pc, #108]	; (800721c <HAL_HCD_MspInit+0xc0>)
 80071b0:	f7f9 fdf6 	bl	8000da0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80071b4:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80071b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80071ba:	2302      	movs	r3, #2
 80071bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80071be:	2300      	movs	r3, #0
 80071c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80071c2:	2303      	movs	r3, #3
 80071c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80071c6:	230a      	movs	r3, #10
 80071c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80071ca:	f107 0314 	add.w	r3, r7, #20
 80071ce:	4619      	mov	r1, r3
 80071d0:	4812      	ldr	r0, [pc, #72]	; (800721c <HAL_HCD_MspInit+0xc0>)
 80071d2:	f7f9 fde5 	bl	8000da0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80071d6:	4b10      	ldr	r3, [pc, #64]	; (8007218 <HAL_HCD_MspInit+0xbc>)
 80071d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071da:	4a0f      	ldr	r2, [pc, #60]	; (8007218 <HAL_HCD_MspInit+0xbc>)
 80071dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071e0:	6353      	str	r3, [r2, #52]	; 0x34
 80071e2:	2300      	movs	r3, #0
 80071e4:	60fb      	str	r3, [r7, #12]
 80071e6:	4b0c      	ldr	r3, [pc, #48]	; (8007218 <HAL_HCD_MspInit+0xbc>)
 80071e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071ea:	4a0b      	ldr	r2, [pc, #44]	; (8007218 <HAL_HCD_MspInit+0xbc>)
 80071ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80071f0:	6453      	str	r3, [r2, #68]	; 0x44
 80071f2:	4b09      	ldr	r3, [pc, #36]	; (8007218 <HAL_HCD_MspInit+0xbc>)
 80071f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80071fa:	60fb      	str	r3, [r7, #12]
 80071fc:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80071fe:	2200      	movs	r2, #0
 8007200:	2100      	movs	r1, #0
 8007202:	2043      	movs	r0, #67	; 0x43
 8007204:	f7f9 fd95 	bl	8000d32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007208:	2043      	movs	r0, #67	; 0x43
 800720a:	f7f9 fdae 	bl	8000d6a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800720e:	bf00      	nop
 8007210:	3728      	adds	r7, #40	; 0x28
 8007212:	46bd      	mov	sp, r7
 8007214:	bd80      	pop	{r7, pc}
 8007216:	bf00      	nop
 8007218:	40023800 	.word	0x40023800
 800721c:	40020000 	.word	0x40020000

08007220 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8007220:	b580      	push	{r7, lr}
 8007222:	b082      	sub	sp, #8
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800722e:	4618      	mov	r0, r3
 8007230:	f7ff f8ff 	bl	8006432 <USBH_LL_IncTimer>
}
 8007234:	bf00      	nop
 8007236:	3708      	adds	r7, #8
 8007238:	46bd      	mov	sp, r7
 800723a:	bd80      	pop	{r7, pc}

0800723c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800723c:	b580      	push	{r7, lr}
 800723e:	b082      	sub	sp, #8
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800724a:	4618      	mov	r0, r3
 800724c:	f7ff f937 	bl	80064be <USBH_LL_Connect>
}
 8007250:	bf00      	nop
 8007252:	3708      	adds	r7, #8
 8007254:	46bd      	mov	sp, r7
 8007256:	bd80      	pop	{r7, pc}

08007258 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007258:	b580      	push	{r7, lr}
 800725a:	b082      	sub	sp, #8
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007266:	4618      	mov	r0, r3
 8007268:	f7ff f940 	bl	80064ec <USBH_LL_Disconnect>
}
 800726c:	bf00      	nop
 800726e:	3708      	adds	r7, #8
 8007270:	46bd      	mov	sp, r7
 8007272:	bd80      	pop	{r7, pc}

08007274 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8007274:	b480      	push	{r7}
 8007276:	b083      	sub	sp, #12
 8007278:	af00      	add	r7, sp, #0
 800727a:	6078      	str	r0, [r7, #4]
 800727c:	460b      	mov	r3, r1
 800727e:	70fb      	strb	r3, [r7, #3]
 8007280:	4613      	mov	r3, r2
 8007282:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8007284:	bf00      	nop
 8007286:	370c      	adds	r7, #12
 8007288:	46bd      	mov	sp, r7
 800728a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728e:	4770      	bx	lr

08007290 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007290:	b580      	push	{r7, lr}
 8007292:	b082      	sub	sp, #8
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800729e:	4618      	mov	r0, r3
 80072a0:	f7ff f8f1 	bl	8006486 <USBH_LL_PortEnabled>
}
 80072a4:	bf00      	nop
 80072a6:	3708      	adds	r7, #8
 80072a8:	46bd      	mov	sp, r7
 80072aa:	bd80      	pop	{r7, pc}

080072ac <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80072ac:	b580      	push	{r7, lr}
 80072ae:	b082      	sub	sp, #8
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80072ba:	4618      	mov	r0, r3
 80072bc:	f7ff f8f1 	bl	80064a2 <USBH_LL_PortDisabled>
}
 80072c0:	bf00      	nop
 80072c2:	3708      	adds	r7, #8
 80072c4:	46bd      	mov	sp, r7
 80072c6:	bd80      	pop	{r7, pc}

080072c8 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 80072c8:	b580      	push	{r7, lr}
 80072ca:	b082      	sub	sp, #8
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80072d6:	2b01      	cmp	r3, #1
 80072d8:	d12a      	bne.n	8007330 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 80072da:	4a18      	ldr	r2, [pc, #96]	; (800733c <USBH_LL_Init+0x74>)
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	4a15      	ldr	r2, [pc, #84]	; (800733c <USBH_LL_Init+0x74>)
 80072e6:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80072ea:	4b14      	ldr	r3, [pc, #80]	; (800733c <USBH_LL_Init+0x74>)
 80072ec:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80072f0:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 80072f2:	4b12      	ldr	r3, [pc, #72]	; (800733c <USBH_LL_Init+0x74>)
 80072f4:	2208      	movs	r2, #8
 80072f6:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 80072f8:	4b10      	ldr	r3, [pc, #64]	; (800733c <USBH_LL_Init+0x74>)
 80072fa:	2201      	movs	r2, #1
 80072fc:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80072fe:	4b0f      	ldr	r3, [pc, #60]	; (800733c <USBH_LL_Init+0x74>)
 8007300:	2200      	movs	r2, #0
 8007302:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8007304:	4b0d      	ldr	r3, [pc, #52]	; (800733c <USBH_LL_Init+0x74>)
 8007306:	2202      	movs	r2, #2
 8007308:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800730a:	4b0c      	ldr	r3, [pc, #48]	; (800733c <USBH_LL_Init+0x74>)
 800730c:	2200      	movs	r2, #0
 800730e:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8007310:	480a      	ldr	r0, [pc, #40]	; (800733c <USBH_LL_Init+0x74>)
 8007312:	f7f9 fefa 	bl	800110a <HAL_HCD_Init>
 8007316:	4603      	mov	r3, r0
 8007318:	2b00      	cmp	r3, #0
 800731a:	d001      	beq.n	8007320 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800731c:	f7f9 fa7c 	bl	8000818 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8007320:	4806      	ldr	r0, [pc, #24]	; (800733c <USBH_LL_Init+0x74>)
 8007322:	f7fa fafd 	bl	8001920 <HAL_HCD_GetCurrentFrame>
 8007326:	4603      	mov	r3, r0
 8007328:	4619      	mov	r1, r3
 800732a:	6878      	ldr	r0, [r7, #4]
 800732c:	f7ff f872 	bl	8006414 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8007330:	2300      	movs	r3, #0
}
 8007332:	4618      	mov	r0, r3
 8007334:	3708      	adds	r7, #8
 8007336:	46bd      	mov	sp, r7
 8007338:	bd80      	pop	{r7, pc}
 800733a:	bf00      	nop
 800733c:	20000578 	.word	0x20000578

08007340 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8007340:	b580      	push	{r7, lr}
 8007342:	b084      	sub	sp, #16
 8007344:	af00      	add	r7, sp, #0
 8007346:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007348:	2300      	movs	r3, #0
 800734a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800734c:	2300      	movs	r3, #0
 800734e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007356:	4618      	mov	r0, r3
 8007358:	f7fa fa6a 	bl	8001830 <HAL_HCD_Start>
 800735c:	4603      	mov	r3, r0
 800735e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007360:	7bfb      	ldrb	r3, [r7, #15]
 8007362:	4618      	mov	r0, r3
 8007364:	f000 f95e 	bl	8007624 <USBH_Get_USB_Status>
 8007368:	4603      	mov	r3, r0
 800736a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800736c:	7bbb      	ldrb	r3, [r7, #14]
}
 800736e:	4618      	mov	r0, r3
 8007370:	3710      	adds	r7, #16
 8007372:	46bd      	mov	sp, r7
 8007374:	bd80      	pop	{r7, pc}

08007376 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8007376:	b580      	push	{r7, lr}
 8007378:	b084      	sub	sp, #16
 800737a:	af00      	add	r7, sp, #0
 800737c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800737e:	2300      	movs	r3, #0
 8007380:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007382:	2300      	movs	r3, #0
 8007384:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800738c:	4618      	mov	r0, r3
 800738e:	f7fa fa72 	bl	8001876 <HAL_HCD_Stop>
 8007392:	4603      	mov	r3, r0
 8007394:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007396:	7bfb      	ldrb	r3, [r7, #15]
 8007398:	4618      	mov	r0, r3
 800739a:	f000 f943 	bl	8007624 <USBH_Get_USB_Status>
 800739e:	4603      	mov	r3, r0
 80073a0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80073a2:	7bbb      	ldrb	r3, [r7, #14]
}
 80073a4:	4618      	mov	r0, r3
 80073a6:	3710      	adds	r7, #16
 80073a8:	46bd      	mov	sp, r7
 80073aa:	bd80      	pop	{r7, pc}

080073ac <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 80073ac:	b580      	push	{r7, lr}
 80073ae:	b084      	sub	sp, #16
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 80073b4:	2301      	movs	r3, #1
 80073b6:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80073be:	4618      	mov	r0, r3
 80073c0:	f7fa fabc 	bl	800193c <HAL_HCD_GetCurrentSpeed>
 80073c4:	4603      	mov	r3, r0
 80073c6:	2b02      	cmp	r3, #2
 80073c8:	d00c      	beq.n	80073e4 <USBH_LL_GetSpeed+0x38>
 80073ca:	2b02      	cmp	r3, #2
 80073cc:	d80d      	bhi.n	80073ea <USBH_LL_GetSpeed+0x3e>
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d002      	beq.n	80073d8 <USBH_LL_GetSpeed+0x2c>
 80073d2:	2b01      	cmp	r3, #1
 80073d4:	d003      	beq.n	80073de <USBH_LL_GetSpeed+0x32>
 80073d6:	e008      	b.n	80073ea <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 80073d8:	2300      	movs	r3, #0
 80073da:	73fb      	strb	r3, [r7, #15]
    break;
 80073dc:	e008      	b.n	80073f0 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 80073de:	2301      	movs	r3, #1
 80073e0:	73fb      	strb	r3, [r7, #15]
    break;
 80073e2:	e005      	b.n	80073f0 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 80073e4:	2302      	movs	r3, #2
 80073e6:	73fb      	strb	r3, [r7, #15]
    break;
 80073e8:	e002      	b.n	80073f0 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 80073ea:	2301      	movs	r3, #1
 80073ec:	73fb      	strb	r3, [r7, #15]
    break;
 80073ee:	bf00      	nop
  }
  return  speed;
 80073f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80073f2:	4618      	mov	r0, r3
 80073f4:	3710      	adds	r7, #16
 80073f6:	46bd      	mov	sp, r7
 80073f8:	bd80      	pop	{r7, pc}

080073fa <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 80073fa:	b580      	push	{r7, lr}
 80073fc:	b084      	sub	sp, #16
 80073fe:	af00      	add	r7, sp, #0
 8007400:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007402:	2300      	movs	r3, #0
 8007404:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007406:	2300      	movs	r3, #0
 8007408:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007410:	4618      	mov	r0, r3
 8007412:	f7fa fa4d 	bl	80018b0 <HAL_HCD_ResetPort>
 8007416:	4603      	mov	r3, r0
 8007418:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800741a:	7bfb      	ldrb	r3, [r7, #15]
 800741c:	4618      	mov	r0, r3
 800741e:	f000 f901 	bl	8007624 <USBH_Get_USB_Status>
 8007422:	4603      	mov	r3, r0
 8007424:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007426:	7bbb      	ldrb	r3, [r7, #14]
}
 8007428:	4618      	mov	r0, r3
 800742a:	3710      	adds	r7, #16
 800742c:	46bd      	mov	sp, r7
 800742e:	bd80      	pop	{r7, pc}

08007430 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007430:	b580      	push	{r7, lr}
 8007432:	b082      	sub	sp, #8
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
 8007438:	460b      	mov	r3, r1
 800743a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007442:	78fa      	ldrb	r2, [r7, #3]
 8007444:	4611      	mov	r1, r2
 8007446:	4618      	mov	r0, r3
 8007448:	f7fa fa55 	bl	80018f6 <HAL_HCD_HC_GetXferCount>
 800744c:	4603      	mov	r3, r0
}
 800744e:	4618      	mov	r0, r3
 8007450:	3708      	adds	r7, #8
 8007452:	46bd      	mov	sp, r7
 8007454:	bd80      	pop	{r7, pc}

08007456 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8007456:	b590      	push	{r4, r7, lr}
 8007458:	b089      	sub	sp, #36	; 0x24
 800745a:	af04      	add	r7, sp, #16
 800745c:	6078      	str	r0, [r7, #4]
 800745e:	4608      	mov	r0, r1
 8007460:	4611      	mov	r1, r2
 8007462:	461a      	mov	r2, r3
 8007464:	4603      	mov	r3, r0
 8007466:	70fb      	strb	r3, [r7, #3]
 8007468:	460b      	mov	r3, r1
 800746a:	70bb      	strb	r3, [r7, #2]
 800746c:	4613      	mov	r3, r2
 800746e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007470:	2300      	movs	r3, #0
 8007472:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007474:	2300      	movs	r3, #0
 8007476:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800747e:	787c      	ldrb	r4, [r7, #1]
 8007480:	78ba      	ldrb	r2, [r7, #2]
 8007482:	78f9      	ldrb	r1, [r7, #3]
 8007484:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007486:	9302      	str	r3, [sp, #8]
 8007488:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800748c:	9301      	str	r3, [sp, #4]
 800748e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007492:	9300      	str	r3, [sp, #0]
 8007494:	4623      	mov	r3, r4
 8007496:	f7f9 fe9a 	bl	80011ce <HAL_HCD_HC_Init>
 800749a:	4603      	mov	r3, r0
 800749c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800749e:	7bfb      	ldrb	r3, [r7, #15]
 80074a0:	4618      	mov	r0, r3
 80074a2:	f000 f8bf 	bl	8007624 <USBH_Get_USB_Status>
 80074a6:	4603      	mov	r3, r0
 80074a8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80074aa:	7bbb      	ldrb	r3, [r7, #14]
}
 80074ac:	4618      	mov	r0, r3
 80074ae:	3714      	adds	r7, #20
 80074b0:	46bd      	mov	sp, r7
 80074b2:	bd90      	pop	{r4, r7, pc}

080074b4 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80074b4:	b580      	push	{r7, lr}
 80074b6:	b084      	sub	sp, #16
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
 80074bc:	460b      	mov	r3, r1
 80074be:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80074c0:	2300      	movs	r3, #0
 80074c2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80074c4:	2300      	movs	r3, #0
 80074c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80074ce:	78fa      	ldrb	r2, [r7, #3]
 80074d0:	4611      	mov	r1, r2
 80074d2:	4618      	mov	r0, r3
 80074d4:	f7f9 ff13 	bl	80012fe <HAL_HCD_HC_Halt>
 80074d8:	4603      	mov	r3, r0
 80074da:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80074dc:	7bfb      	ldrb	r3, [r7, #15]
 80074de:	4618      	mov	r0, r3
 80074e0:	f000 f8a0 	bl	8007624 <USBH_Get_USB_Status>
 80074e4:	4603      	mov	r3, r0
 80074e6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80074e8:	7bbb      	ldrb	r3, [r7, #14]
}
 80074ea:	4618      	mov	r0, r3
 80074ec:	3710      	adds	r7, #16
 80074ee:	46bd      	mov	sp, r7
 80074f0:	bd80      	pop	{r7, pc}

080074f2 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 80074f2:	b590      	push	{r4, r7, lr}
 80074f4:	b089      	sub	sp, #36	; 0x24
 80074f6:	af04      	add	r7, sp, #16
 80074f8:	6078      	str	r0, [r7, #4]
 80074fa:	4608      	mov	r0, r1
 80074fc:	4611      	mov	r1, r2
 80074fe:	461a      	mov	r2, r3
 8007500:	4603      	mov	r3, r0
 8007502:	70fb      	strb	r3, [r7, #3]
 8007504:	460b      	mov	r3, r1
 8007506:	70bb      	strb	r3, [r7, #2]
 8007508:	4613      	mov	r3, r2
 800750a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800750c:	2300      	movs	r3, #0
 800750e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007510:	2300      	movs	r3, #0
 8007512:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800751a:	787c      	ldrb	r4, [r7, #1]
 800751c:	78ba      	ldrb	r2, [r7, #2]
 800751e:	78f9      	ldrb	r1, [r7, #3]
 8007520:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007524:	9303      	str	r3, [sp, #12]
 8007526:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007528:	9302      	str	r3, [sp, #8]
 800752a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800752c:	9301      	str	r3, [sp, #4]
 800752e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007532:	9300      	str	r3, [sp, #0]
 8007534:	4623      	mov	r3, r4
 8007536:	f7f9 ff05 	bl	8001344 <HAL_HCD_HC_SubmitRequest>
 800753a:	4603      	mov	r3, r0
 800753c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800753e:	7bfb      	ldrb	r3, [r7, #15]
 8007540:	4618      	mov	r0, r3
 8007542:	f000 f86f 	bl	8007624 <USBH_Get_USB_Status>
 8007546:	4603      	mov	r3, r0
 8007548:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800754a:	7bbb      	ldrb	r3, [r7, #14]
}
 800754c:	4618      	mov	r0, r3
 800754e:	3714      	adds	r7, #20
 8007550:	46bd      	mov	sp, r7
 8007552:	bd90      	pop	{r4, r7, pc}

08007554 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007554:	b580      	push	{r7, lr}
 8007556:	b082      	sub	sp, #8
 8007558:	af00      	add	r7, sp, #0
 800755a:	6078      	str	r0, [r7, #4]
 800755c:	460b      	mov	r3, r1
 800755e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007566:	78fa      	ldrb	r2, [r7, #3]
 8007568:	4611      	mov	r1, r2
 800756a:	4618      	mov	r0, r3
 800756c:	f7fa f9ae 	bl	80018cc <HAL_HCD_HC_GetURBState>
 8007570:	4603      	mov	r3, r0
}
 8007572:	4618      	mov	r0, r3
 8007574:	3708      	adds	r7, #8
 8007576:	46bd      	mov	sp, r7
 8007578:	bd80      	pop	{r7, pc}

0800757a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800757a:	b580      	push	{r7, lr}
 800757c:	b082      	sub	sp, #8
 800757e:	af00      	add	r7, sp, #0
 8007580:	6078      	str	r0, [r7, #4]
 8007582:	460b      	mov	r3, r1
 8007584:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800758c:	2b01      	cmp	r3, #1
 800758e:	d103      	bne.n	8007598 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8007590:	78fb      	ldrb	r3, [r7, #3]
 8007592:	4618      	mov	r0, r3
 8007594:	f000 f872 	bl	800767c <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8007598:	20c8      	movs	r0, #200	; 0xc8
 800759a:	f7f9 facb 	bl	8000b34 <HAL_Delay>
  return USBH_OK;
 800759e:	2300      	movs	r3, #0
}
 80075a0:	4618      	mov	r0, r3
 80075a2:	3708      	adds	r7, #8
 80075a4:	46bd      	mov	sp, r7
 80075a6:	bd80      	pop	{r7, pc}

080075a8 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 80075a8:	b480      	push	{r7}
 80075aa:	b085      	sub	sp, #20
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
 80075b0:	460b      	mov	r3, r1
 80075b2:	70fb      	strb	r3, [r7, #3]
 80075b4:	4613      	mov	r3, r2
 80075b6:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80075be:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 80075c0:	78fa      	ldrb	r2, [r7, #3]
 80075c2:	68f9      	ldr	r1, [r7, #12]
 80075c4:	4613      	mov	r3, r2
 80075c6:	009b      	lsls	r3, r3, #2
 80075c8:	4413      	add	r3, r2
 80075ca:	00db      	lsls	r3, r3, #3
 80075cc:	440b      	add	r3, r1
 80075ce:	333b      	adds	r3, #59	; 0x3b
 80075d0:	781b      	ldrb	r3, [r3, #0]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d00a      	beq.n	80075ec <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 80075d6:	78fa      	ldrb	r2, [r7, #3]
 80075d8:	68f9      	ldr	r1, [r7, #12]
 80075da:	4613      	mov	r3, r2
 80075dc:	009b      	lsls	r3, r3, #2
 80075de:	4413      	add	r3, r2
 80075e0:	00db      	lsls	r3, r3, #3
 80075e2:	440b      	add	r3, r1
 80075e4:	3350      	adds	r3, #80	; 0x50
 80075e6:	78ba      	ldrb	r2, [r7, #2]
 80075e8:	701a      	strb	r2, [r3, #0]
 80075ea:	e009      	b.n	8007600 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 80075ec:	78fa      	ldrb	r2, [r7, #3]
 80075ee:	68f9      	ldr	r1, [r7, #12]
 80075f0:	4613      	mov	r3, r2
 80075f2:	009b      	lsls	r3, r3, #2
 80075f4:	4413      	add	r3, r2
 80075f6:	00db      	lsls	r3, r3, #3
 80075f8:	440b      	add	r3, r1
 80075fa:	3351      	adds	r3, #81	; 0x51
 80075fc:	78ba      	ldrb	r2, [r7, #2]
 80075fe:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8007600:	2300      	movs	r3, #0
}
 8007602:	4618      	mov	r0, r3
 8007604:	3714      	adds	r7, #20
 8007606:	46bd      	mov	sp, r7
 8007608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760c:	4770      	bx	lr

0800760e <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800760e:	b580      	push	{r7, lr}
 8007610:	b082      	sub	sp, #8
 8007612:	af00      	add	r7, sp, #0
 8007614:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8007616:	6878      	ldr	r0, [r7, #4]
 8007618:	f7f9 fa8c 	bl	8000b34 <HAL_Delay>
}
 800761c:	bf00      	nop
 800761e:	3708      	adds	r7, #8
 8007620:	46bd      	mov	sp, r7
 8007622:	bd80      	pop	{r7, pc}

08007624 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007624:	b480      	push	{r7}
 8007626:	b085      	sub	sp, #20
 8007628:	af00      	add	r7, sp, #0
 800762a:	4603      	mov	r3, r0
 800762c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800762e:	2300      	movs	r3, #0
 8007630:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007632:	79fb      	ldrb	r3, [r7, #7]
 8007634:	2b03      	cmp	r3, #3
 8007636:	d817      	bhi.n	8007668 <USBH_Get_USB_Status+0x44>
 8007638:	a201      	add	r2, pc, #4	; (adr r2, 8007640 <USBH_Get_USB_Status+0x1c>)
 800763a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800763e:	bf00      	nop
 8007640:	08007651 	.word	0x08007651
 8007644:	08007657 	.word	0x08007657
 8007648:	0800765d 	.word	0x0800765d
 800764c:	08007663 	.word	0x08007663
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8007650:	2300      	movs	r3, #0
 8007652:	73fb      	strb	r3, [r7, #15]
    break;
 8007654:	e00b      	b.n	800766e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8007656:	2302      	movs	r3, #2
 8007658:	73fb      	strb	r3, [r7, #15]
    break;
 800765a:	e008      	b.n	800766e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800765c:	2301      	movs	r3, #1
 800765e:	73fb      	strb	r3, [r7, #15]
    break;
 8007660:	e005      	b.n	800766e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8007662:	2302      	movs	r3, #2
 8007664:	73fb      	strb	r3, [r7, #15]
    break;
 8007666:	e002      	b.n	800766e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8007668:	2302      	movs	r3, #2
 800766a:	73fb      	strb	r3, [r7, #15]
    break;
 800766c:	bf00      	nop
  }
  return usb_status;
 800766e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007670:	4618      	mov	r0, r3
 8007672:	3714      	adds	r7, #20
 8007674:	46bd      	mov	sp, r7
 8007676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767a:	4770      	bx	lr

0800767c <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 0 : VBUS Active
  *           - 1 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800767c:	b580      	push	{r7, lr}
 800767e:	b084      	sub	sp, #16
 8007680:	af00      	add	r7, sp, #0
 8007682:	4603      	mov	r3, r0
 8007684:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8007686:	79fb      	ldrb	r3, [r7, #7]
 8007688:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800768a:	79fb      	ldrb	r3, [r7, #7]
 800768c:	2b00      	cmp	r3, #0
 800768e:	d102      	bne.n	8007696 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */ 	     
    data = GPIO_PIN_SET;
 8007690:	2301      	movs	r3, #1
 8007692:	73fb      	strb	r3, [r7, #15]
 8007694:	e001      	b.n	800769a <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 8007696:	2300      	movs	r3, #0
 8007698:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800769a:	7bfb      	ldrb	r3, [r7, #15]
 800769c:	461a      	mov	r2, r3
 800769e:	2101      	movs	r1, #1
 80076a0:	4803      	ldr	r0, [pc, #12]	; (80076b0 <MX_DriverVbusFS+0x34>)
 80076a2:	f7f9 fd19 	bl	80010d8 <HAL_GPIO_WritePin>
}
 80076a6:	bf00      	nop
 80076a8:	3710      	adds	r7, #16
 80076aa:	46bd      	mov	sp, r7
 80076ac:	bd80      	pop	{r7, pc}
 80076ae:	bf00      	nop
 80076b0:	40020800 	.word	0x40020800

080076b4 <__errno>:
 80076b4:	4b01      	ldr	r3, [pc, #4]	; (80076bc <__errno+0x8>)
 80076b6:	6818      	ldr	r0, [r3, #0]
 80076b8:	4770      	bx	lr
 80076ba:	bf00      	nop
 80076bc:	2000002c 	.word	0x2000002c

080076c0 <__libc_init_array>:
 80076c0:	b570      	push	{r4, r5, r6, lr}
 80076c2:	4d0d      	ldr	r5, [pc, #52]	; (80076f8 <__libc_init_array+0x38>)
 80076c4:	4c0d      	ldr	r4, [pc, #52]	; (80076fc <__libc_init_array+0x3c>)
 80076c6:	1b64      	subs	r4, r4, r5
 80076c8:	10a4      	asrs	r4, r4, #2
 80076ca:	2600      	movs	r6, #0
 80076cc:	42a6      	cmp	r6, r4
 80076ce:	d109      	bne.n	80076e4 <__libc_init_array+0x24>
 80076d0:	4d0b      	ldr	r5, [pc, #44]	; (8007700 <__libc_init_array+0x40>)
 80076d2:	4c0c      	ldr	r4, [pc, #48]	; (8007704 <__libc_init_array+0x44>)
 80076d4:	f000 fc5e 	bl	8007f94 <_init>
 80076d8:	1b64      	subs	r4, r4, r5
 80076da:	10a4      	asrs	r4, r4, #2
 80076dc:	2600      	movs	r6, #0
 80076de:	42a6      	cmp	r6, r4
 80076e0:	d105      	bne.n	80076ee <__libc_init_array+0x2e>
 80076e2:	bd70      	pop	{r4, r5, r6, pc}
 80076e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80076e8:	4798      	blx	r3
 80076ea:	3601      	adds	r6, #1
 80076ec:	e7ee      	b.n	80076cc <__libc_init_array+0xc>
 80076ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80076f2:	4798      	blx	r3
 80076f4:	3601      	adds	r6, #1
 80076f6:	e7f2      	b.n	80076de <__libc_init_array+0x1e>
 80076f8:	080083f8 	.word	0x080083f8
 80076fc:	080083f8 	.word	0x080083f8
 8007700:	080083f8 	.word	0x080083f8
 8007704:	080083fc 	.word	0x080083fc

08007708 <malloc>:
 8007708:	4b02      	ldr	r3, [pc, #8]	; (8007714 <malloc+0xc>)
 800770a:	4601      	mov	r1, r0
 800770c:	6818      	ldr	r0, [r3, #0]
 800770e:	f000 b863 	b.w	80077d8 <_malloc_r>
 8007712:	bf00      	nop
 8007714:	2000002c 	.word	0x2000002c

08007718 <free>:
 8007718:	4b02      	ldr	r3, [pc, #8]	; (8007724 <free+0xc>)
 800771a:	4601      	mov	r1, r0
 800771c:	6818      	ldr	r0, [r3, #0]
 800771e:	f000 b80b 	b.w	8007738 <_free_r>
 8007722:	bf00      	nop
 8007724:	2000002c 	.word	0x2000002c

08007728 <memset>:
 8007728:	4402      	add	r2, r0
 800772a:	4603      	mov	r3, r0
 800772c:	4293      	cmp	r3, r2
 800772e:	d100      	bne.n	8007732 <memset+0xa>
 8007730:	4770      	bx	lr
 8007732:	f803 1b01 	strb.w	r1, [r3], #1
 8007736:	e7f9      	b.n	800772c <memset+0x4>

08007738 <_free_r>:
 8007738:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800773a:	2900      	cmp	r1, #0
 800773c:	d048      	beq.n	80077d0 <_free_r+0x98>
 800773e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007742:	9001      	str	r0, [sp, #4]
 8007744:	2b00      	cmp	r3, #0
 8007746:	f1a1 0404 	sub.w	r4, r1, #4
 800774a:	bfb8      	it	lt
 800774c:	18e4      	addlt	r4, r4, r3
 800774e:	f000 f8cd 	bl	80078ec <__malloc_lock>
 8007752:	4a20      	ldr	r2, [pc, #128]	; (80077d4 <_free_r+0x9c>)
 8007754:	9801      	ldr	r0, [sp, #4]
 8007756:	6813      	ldr	r3, [r2, #0]
 8007758:	4615      	mov	r5, r2
 800775a:	b933      	cbnz	r3, 800776a <_free_r+0x32>
 800775c:	6063      	str	r3, [r4, #4]
 800775e:	6014      	str	r4, [r2, #0]
 8007760:	b003      	add	sp, #12
 8007762:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007766:	f000 b8c7 	b.w	80078f8 <__malloc_unlock>
 800776a:	42a3      	cmp	r3, r4
 800776c:	d90b      	bls.n	8007786 <_free_r+0x4e>
 800776e:	6821      	ldr	r1, [r4, #0]
 8007770:	1862      	adds	r2, r4, r1
 8007772:	4293      	cmp	r3, r2
 8007774:	bf04      	itt	eq
 8007776:	681a      	ldreq	r2, [r3, #0]
 8007778:	685b      	ldreq	r3, [r3, #4]
 800777a:	6063      	str	r3, [r4, #4]
 800777c:	bf04      	itt	eq
 800777e:	1852      	addeq	r2, r2, r1
 8007780:	6022      	streq	r2, [r4, #0]
 8007782:	602c      	str	r4, [r5, #0]
 8007784:	e7ec      	b.n	8007760 <_free_r+0x28>
 8007786:	461a      	mov	r2, r3
 8007788:	685b      	ldr	r3, [r3, #4]
 800778a:	b10b      	cbz	r3, 8007790 <_free_r+0x58>
 800778c:	42a3      	cmp	r3, r4
 800778e:	d9fa      	bls.n	8007786 <_free_r+0x4e>
 8007790:	6811      	ldr	r1, [r2, #0]
 8007792:	1855      	adds	r5, r2, r1
 8007794:	42a5      	cmp	r5, r4
 8007796:	d10b      	bne.n	80077b0 <_free_r+0x78>
 8007798:	6824      	ldr	r4, [r4, #0]
 800779a:	4421      	add	r1, r4
 800779c:	1854      	adds	r4, r2, r1
 800779e:	42a3      	cmp	r3, r4
 80077a0:	6011      	str	r1, [r2, #0]
 80077a2:	d1dd      	bne.n	8007760 <_free_r+0x28>
 80077a4:	681c      	ldr	r4, [r3, #0]
 80077a6:	685b      	ldr	r3, [r3, #4]
 80077a8:	6053      	str	r3, [r2, #4]
 80077aa:	4421      	add	r1, r4
 80077ac:	6011      	str	r1, [r2, #0]
 80077ae:	e7d7      	b.n	8007760 <_free_r+0x28>
 80077b0:	d902      	bls.n	80077b8 <_free_r+0x80>
 80077b2:	230c      	movs	r3, #12
 80077b4:	6003      	str	r3, [r0, #0]
 80077b6:	e7d3      	b.n	8007760 <_free_r+0x28>
 80077b8:	6825      	ldr	r5, [r4, #0]
 80077ba:	1961      	adds	r1, r4, r5
 80077bc:	428b      	cmp	r3, r1
 80077be:	bf04      	itt	eq
 80077c0:	6819      	ldreq	r1, [r3, #0]
 80077c2:	685b      	ldreq	r3, [r3, #4]
 80077c4:	6063      	str	r3, [r4, #4]
 80077c6:	bf04      	itt	eq
 80077c8:	1949      	addeq	r1, r1, r5
 80077ca:	6021      	streq	r1, [r4, #0]
 80077cc:	6054      	str	r4, [r2, #4]
 80077ce:	e7c7      	b.n	8007760 <_free_r+0x28>
 80077d0:	b003      	add	sp, #12
 80077d2:	bd30      	pop	{r4, r5, pc}
 80077d4:	200000b8 	.word	0x200000b8

080077d8 <_malloc_r>:
 80077d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077da:	1ccd      	adds	r5, r1, #3
 80077dc:	f025 0503 	bic.w	r5, r5, #3
 80077e0:	3508      	adds	r5, #8
 80077e2:	2d0c      	cmp	r5, #12
 80077e4:	bf38      	it	cc
 80077e6:	250c      	movcc	r5, #12
 80077e8:	2d00      	cmp	r5, #0
 80077ea:	4606      	mov	r6, r0
 80077ec:	db01      	blt.n	80077f2 <_malloc_r+0x1a>
 80077ee:	42a9      	cmp	r1, r5
 80077f0:	d903      	bls.n	80077fa <_malloc_r+0x22>
 80077f2:	230c      	movs	r3, #12
 80077f4:	6033      	str	r3, [r6, #0]
 80077f6:	2000      	movs	r0, #0
 80077f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80077fa:	f000 f877 	bl	80078ec <__malloc_lock>
 80077fe:	4921      	ldr	r1, [pc, #132]	; (8007884 <_malloc_r+0xac>)
 8007800:	680a      	ldr	r2, [r1, #0]
 8007802:	4614      	mov	r4, r2
 8007804:	b99c      	cbnz	r4, 800782e <_malloc_r+0x56>
 8007806:	4f20      	ldr	r7, [pc, #128]	; (8007888 <_malloc_r+0xb0>)
 8007808:	683b      	ldr	r3, [r7, #0]
 800780a:	b923      	cbnz	r3, 8007816 <_malloc_r+0x3e>
 800780c:	4621      	mov	r1, r4
 800780e:	4630      	mov	r0, r6
 8007810:	f000 f83c 	bl	800788c <_sbrk_r>
 8007814:	6038      	str	r0, [r7, #0]
 8007816:	4629      	mov	r1, r5
 8007818:	4630      	mov	r0, r6
 800781a:	f000 f837 	bl	800788c <_sbrk_r>
 800781e:	1c43      	adds	r3, r0, #1
 8007820:	d123      	bne.n	800786a <_malloc_r+0x92>
 8007822:	230c      	movs	r3, #12
 8007824:	6033      	str	r3, [r6, #0]
 8007826:	4630      	mov	r0, r6
 8007828:	f000 f866 	bl	80078f8 <__malloc_unlock>
 800782c:	e7e3      	b.n	80077f6 <_malloc_r+0x1e>
 800782e:	6823      	ldr	r3, [r4, #0]
 8007830:	1b5b      	subs	r3, r3, r5
 8007832:	d417      	bmi.n	8007864 <_malloc_r+0x8c>
 8007834:	2b0b      	cmp	r3, #11
 8007836:	d903      	bls.n	8007840 <_malloc_r+0x68>
 8007838:	6023      	str	r3, [r4, #0]
 800783a:	441c      	add	r4, r3
 800783c:	6025      	str	r5, [r4, #0]
 800783e:	e004      	b.n	800784a <_malloc_r+0x72>
 8007840:	6863      	ldr	r3, [r4, #4]
 8007842:	42a2      	cmp	r2, r4
 8007844:	bf0c      	ite	eq
 8007846:	600b      	streq	r3, [r1, #0]
 8007848:	6053      	strne	r3, [r2, #4]
 800784a:	4630      	mov	r0, r6
 800784c:	f000 f854 	bl	80078f8 <__malloc_unlock>
 8007850:	f104 000b 	add.w	r0, r4, #11
 8007854:	1d23      	adds	r3, r4, #4
 8007856:	f020 0007 	bic.w	r0, r0, #7
 800785a:	1ac2      	subs	r2, r0, r3
 800785c:	d0cc      	beq.n	80077f8 <_malloc_r+0x20>
 800785e:	1a1b      	subs	r3, r3, r0
 8007860:	50a3      	str	r3, [r4, r2]
 8007862:	e7c9      	b.n	80077f8 <_malloc_r+0x20>
 8007864:	4622      	mov	r2, r4
 8007866:	6864      	ldr	r4, [r4, #4]
 8007868:	e7cc      	b.n	8007804 <_malloc_r+0x2c>
 800786a:	1cc4      	adds	r4, r0, #3
 800786c:	f024 0403 	bic.w	r4, r4, #3
 8007870:	42a0      	cmp	r0, r4
 8007872:	d0e3      	beq.n	800783c <_malloc_r+0x64>
 8007874:	1a21      	subs	r1, r4, r0
 8007876:	4630      	mov	r0, r6
 8007878:	f000 f808 	bl	800788c <_sbrk_r>
 800787c:	3001      	adds	r0, #1
 800787e:	d1dd      	bne.n	800783c <_malloc_r+0x64>
 8007880:	e7cf      	b.n	8007822 <_malloc_r+0x4a>
 8007882:	bf00      	nop
 8007884:	200000b8 	.word	0x200000b8
 8007888:	200000bc 	.word	0x200000bc

0800788c <_sbrk_r>:
 800788c:	b538      	push	{r3, r4, r5, lr}
 800788e:	4d06      	ldr	r5, [pc, #24]	; (80078a8 <_sbrk_r+0x1c>)
 8007890:	2300      	movs	r3, #0
 8007892:	4604      	mov	r4, r0
 8007894:	4608      	mov	r0, r1
 8007896:	602b      	str	r3, [r5, #0]
 8007898:	f7f9 f86e 	bl	8000978 <_sbrk>
 800789c:	1c43      	adds	r3, r0, #1
 800789e:	d102      	bne.n	80078a6 <_sbrk_r+0x1a>
 80078a0:	682b      	ldr	r3, [r5, #0]
 80078a2:	b103      	cbz	r3, 80078a6 <_sbrk_r+0x1a>
 80078a4:	6023      	str	r3, [r4, #0]
 80078a6:	bd38      	pop	{r3, r4, r5, pc}
 80078a8:	2000083c 	.word	0x2000083c

080078ac <siprintf>:
 80078ac:	b40e      	push	{r1, r2, r3}
 80078ae:	b500      	push	{lr}
 80078b0:	b09c      	sub	sp, #112	; 0x70
 80078b2:	ab1d      	add	r3, sp, #116	; 0x74
 80078b4:	9002      	str	r0, [sp, #8]
 80078b6:	9006      	str	r0, [sp, #24]
 80078b8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80078bc:	4809      	ldr	r0, [pc, #36]	; (80078e4 <siprintf+0x38>)
 80078be:	9107      	str	r1, [sp, #28]
 80078c0:	9104      	str	r1, [sp, #16]
 80078c2:	4909      	ldr	r1, [pc, #36]	; (80078e8 <siprintf+0x3c>)
 80078c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80078c8:	9105      	str	r1, [sp, #20]
 80078ca:	6800      	ldr	r0, [r0, #0]
 80078cc:	9301      	str	r3, [sp, #4]
 80078ce:	a902      	add	r1, sp, #8
 80078d0:	f000 f874 	bl	80079bc <_svfiprintf_r>
 80078d4:	9b02      	ldr	r3, [sp, #8]
 80078d6:	2200      	movs	r2, #0
 80078d8:	701a      	strb	r2, [r3, #0]
 80078da:	b01c      	add	sp, #112	; 0x70
 80078dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80078e0:	b003      	add	sp, #12
 80078e2:	4770      	bx	lr
 80078e4:	2000002c 	.word	0x2000002c
 80078e8:	ffff0208 	.word	0xffff0208

080078ec <__malloc_lock>:
 80078ec:	4801      	ldr	r0, [pc, #4]	; (80078f4 <__malloc_lock+0x8>)
 80078ee:	f000 baf9 	b.w	8007ee4 <__retarget_lock_acquire_recursive>
 80078f2:	bf00      	nop
 80078f4:	20000844 	.word	0x20000844

080078f8 <__malloc_unlock>:
 80078f8:	4801      	ldr	r0, [pc, #4]	; (8007900 <__malloc_unlock+0x8>)
 80078fa:	f000 baf4 	b.w	8007ee6 <__retarget_lock_release_recursive>
 80078fe:	bf00      	nop
 8007900:	20000844 	.word	0x20000844

08007904 <__ssputs_r>:
 8007904:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007908:	688e      	ldr	r6, [r1, #8]
 800790a:	429e      	cmp	r6, r3
 800790c:	4682      	mov	sl, r0
 800790e:	460c      	mov	r4, r1
 8007910:	4690      	mov	r8, r2
 8007912:	461f      	mov	r7, r3
 8007914:	d838      	bhi.n	8007988 <__ssputs_r+0x84>
 8007916:	898a      	ldrh	r2, [r1, #12]
 8007918:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800791c:	d032      	beq.n	8007984 <__ssputs_r+0x80>
 800791e:	6825      	ldr	r5, [r4, #0]
 8007920:	6909      	ldr	r1, [r1, #16]
 8007922:	eba5 0901 	sub.w	r9, r5, r1
 8007926:	6965      	ldr	r5, [r4, #20]
 8007928:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800792c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007930:	3301      	adds	r3, #1
 8007932:	444b      	add	r3, r9
 8007934:	106d      	asrs	r5, r5, #1
 8007936:	429d      	cmp	r5, r3
 8007938:	bf38      	it	cc
 800793a:	461d      	movcc	r5, r3
 800793c:	0553      	lsls	r3, r2, #21
 800793e:	d531      	bpl.n	80079a4 <__ssputs_r+0xa0>
 8007940:	4629      	mov	r1, r5
 8007942:	f7ff ff49 	bl	80077d8 <_malloc_r>
 8007946:	4606      	mov	r6, r0
 8007948:	b950      	cbnz	r0, 8007960 <__ssputs_r+0x5c>
 800794a:	230c      	movs	r3, #12
 800794c:	f8ca 3000 	str.w	r3, [sl]
 8007950:	89a3      	ldrh	r3, [r4, #12]
 8007952:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007956:	81a3      	strh	r3, [r4, #12]
 8007958:	f04f 30ff 	mov.w	r0, #4294967295
 800795c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007960:	6921      	ldr	r1, [r4, #16]
 8007962:	464a      	mov	r2, r9
 8007964:	f000 fac0 	bl	8007ee8 <memcpy>
 8007968:	89a3      	ldrh	r3, [r4, #12]
 800796a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800796e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007972:	81a3      	strh	r3, [r4, #12]
 8007974:	6126      	str	r6, [r4, #16]
 8007976:	6165      	str	r5, [r4, #20]
 8007978:	444e      	add	r6, r9
 800797a:	eba5 0509 	sub.w	r5, r5, r9
 800797e:	6026      	str	r6, [r4, #0]
 8007980:	60a5      	str	r5, [r4, #8]
 8007982:	463e      	mov	r6, r7
 8007984:	42be      	cmp	r6, r7
 8007986:	d900      	bls.n	800798a <__ssputs_r+0x86>
 8007988:	463e      	mov	r6, r7
 800798a:	4632      	mov	r2, r6
 800798c:	6820      	ldr	r0, [r4, #0]
 800798e:	4641      	mov	r1, r8
 8007990:	f000 fab8 	bl	8007f04 <memmove>
 8007994:	68a3      	ldr	r3, [r4, #8]
 8007996:	6822      	ldr	r2, [r4, #0]
 8007998:	1b9b      	subs	r3, r3, r6
 800799a:	4432      	add	r2, r6
 800799c:	60a3      	str	r3, [r4, #8]
 800799e:	6022      	str	r2, [r4, #0]
 80079a0:	2000      	movs	r0, #0
 80079a2:	e7db      	b.n	800795c <__ssputs_r+0x58>
 80079a4:	462a      	mov	r2, r5
 80079a6:	f000 fac7 	bl	8007f38 <_realloc_r>
 80079aa:	4606      	mov	r6, r0
 80079ac:	2800      	cmp	r0, #0
 80079ae:	d1e1      	bne.n	8007974 <__ssputs_r+0x70>
 80079b0:	6921      	ldr	r1, [r4, #16]
 80079b2:	4650      	mov	r0, sl
 80079b4:	f7ff fec0 	bl	8007738 <_free_r>
 80079b8:	e7c7      	b.n	800794a <__ssputs_r+0x46>
	...

080079bc <_svfiprintf_r>:
 80079bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079c0:	4698      	mov	r8, r3
 80079c2:	898b      	ldrh	r3, [r1, #12]
 80079c4:	061b      	lsls	r3, r3, #24
 80079c6:	b09d      	sub	sp, #116	; 0x74
 80079c8:	4607      	mov	r7, r0
 80079ca:	460d      	mov	r5, r1
 80079cc:	4614      	mov	r4, r2
 80079ce:	d50e      	bpl.n	80079ee <_svfiprintf_r+0x32>
 80079d0:	690b      	ldr	r3, [r1, #16]
 80079d2:	b963      	cbnz	r3, 80079ee <_svfiprintf_r+0x32>
 80079d4:	2140      	movs	r1, #64	; 0x40
 80079d6:	f7ff feff 	bl	80077d8 <_malloc_r>
 80079da:	6028      	str	r0, [r5, #0]
 80079dc:	6128      	str	r0, [r5, #16]
 80079de:	b920      	cbnz	r0, 80079ea <_svfiprintf_r+0x2e>
 80079e0:	230c      	movs	r3, #12
 80079e2:	603b      	str	r3, [r7, #0]
 80079e4:	f04f 30ff 	mov.w	r0, #4294967295
 80079e8:	e0d1      	b.n	8007b8e <_svfiprintf_r+0x1d2>
 80079ea:	2340      	movs	r3, #64	; 0x40
 80079ec:	616b      	str	r3, [r5, #20]
 80079ee:	2300      	movs	r3, #0
 80079f0:	9309      	str	r3, [sp, #36]	; 0x24
 80079f2:	2320      	movs	r3, #32
 80079f4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80079f8:	f8cd 800c 	str.w	r8, [sp, #12]
 80079fc:	2330      	movs	r3, #48	; 0x30
 80079fe:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007ba8 <_svfiprintf_r+0x1ec>
 8007a02:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007a06:	f04f 0901 	mov.w	r9, #1
 8007a0a:	4623      	mov	r3, r4
 8007a0c:	469a      	mov	sl, r3
 8007a0e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007a12:	b10a      	cbz	r2, 8007a18 <_svfiprintf_r+0x5c>
 8007a14:	2a25      	cmp	r2, #37	; 0x25
 8007a16:	d1f9      	bne.n	8007a0c <_svfiprintf_r+0x50>
 8007a18:	ebba 0b04 	subs.w	fp, sl, r4
 8007a1c:	d00b      	beq.n	8007a36 <_svfiprintf_r+0x7a>
 8007a1e:	465b      	mov	r3, fp
 8007a20:	4622      	mov	r2, r4
 8007a22:	4629      	mov	r1, r5
 8007a24:	4638      	mov	r0, r7
 8007a26:	f7ff ff6d 	bl	8007904 <__ssputs_r>
 8007a2a:	3001      	adds	r0, #1
 8007a2c:	f000 80aa 	beq.w	8007b84 <_svfiprintf_r+0x1c8>
 8007a30:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007a32:	445a      	add	r2, fp
 8007a34:	9209      	str	r2, [sp, #36]	; 0x24
 8007a36:	f89a 3000 	ldrb.w	r3, [sl]
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	f000 80a2 	beq.w	8007b84 <_svfiprintf_r+0x1c8>
 8007a40:	2300      	movs	r3, #0
 8007a42:	f04f 32ff 	mov.w	r2, #4294967295
 8007a46:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007a4a:	f10a 0a01 	add.w	sl, sl, #1
 8007a4e:	9304      	str	r3, [sp, #16]
 8007a50:	9307      	str	r3, [sp, #28]
 8007a52:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007a56:	931a      	str	r3, [sp, #104]	; 0x68
 8007a58:	4654      	mov	r4, sl
 8007a5a:	2205      	movs	r2, #5
 8007a5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a60:	4851      	ldr	r0, [pc, #324]	; (8007ba8 <_svfiprintf_r+0x1ec>)
 8007a62:	f7f8 fbb5 	bl	80001d0 <memchr>
 8007a66:	9a04      	ldr	r2, [sp, #16]
 8007a68:	b9d8      	cbnz	r0, 8007aa2 <_svfiprintf_r+0xe6>
 8007a6a:	06d0      	lsls	r0, r2, #27
 8007a6c:	bf44      	itt	mi
 8007a6e:	2320      	movmi	r3, #32
 8007a70:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007a74:	0711      	lsls	r1, r2, #28
 8007a76:	bf44      	itt	mi
 8007a78:	232b      	movmi	r3, #43	; 0x2b
 8007a7a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007a7e:	f89a 3000 	ldrb.w	r3, [sl]
 8007a82:	2b2a      	cmp	r3, #42	; 0x2a
 8007a84:	d015      	beq.n	8007ab2 <_svfiprintf_r+0xf6>
 8007a86:	9a07      	ldr	r2, [sp, #28]
 8007a88:	4654      	mov	r4, sl
 8007a8a:	2000      	movs	r0, #0
 8007a8c:	f04f 0c0a 	mov.w	ip, #10
 8007a90:	4621      	mov	r1, r4
 8007a92:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007a96:	3b30      	subs	r3, #48	; 0x30
 8007a98:	2b09      	cmp	r3, #9
 8007a9a:	d94e      	bls.n	8007b3a <_svfiprintf_r+0x17e>
 8007a9c:	b1b0      	cbz	r0, 8007acc <_svfiprintf_r+0x110>
 8007a9e:	9207      	str	r2, [sp, #28]
 8007aa0:	e014      	b.n	8007acc <_svfiprintf_r+0x110>
 8007aa2:	eba0 0308 	sub.w	r3, r0, r8
 8007aa6:	fa09 f303 	lsl.w	r3, r9, r3
 8007aaa:	4313      	orrs	r3, r2
 8007aac:	9304      	str	r3, [sp, #16]
 8007aae:	46a2      	mov	sl, r4
 8007ab0:	e7d2      	b.n	8007a58 <_svfiprintf_r+0x9c>
 8007ab2:	9b03      	ldr	r3, [sp, #12]
 8007ab4:	1d19      	adds	r1, r3, #4
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	9103      	str	r1, [sp, #12]
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	bfbb      	ittet	lt
 8007abe:	425b      	neglt	r3, r3
 8007ac0:	f042 0202 	orrlt.w	r2, r2, #2
 8007ac4:	9307      	strge	r3, [sp, #28]
 8007ac6:	9307      	strlt	r3, [sp, #28]
 8007ac8:	bfb8      	it	lt
 8007aca:	9204      	strlt	r2, [sp, #16]
 8007acc:	7823      	ldrb	r3, [r4, #0]
 8007ace:	2b2e      	cmp	r3, #46	; 0x2e
 8007ad0:	d10c      	bne.n	8007aec <_svfiprintf_r+0x130>
 8007ad2:	7863      	ldrb	r3, [r4, #1]
 8007ad4:	2b2a      	cmp	r3, #42	; 0x2a
 8007ad6:	d135      	bne.n	8007b44 <_svfiprintf_r+0x188>
 8007ad8:	9b03      	ldr	r3, [sp, #12]
 8007ada:	1d1a      	adds	r2, r3, #4
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	9203      	str	r2, [sp, #12]
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	bfb8      	it	lt
 8007ae4:	f04f 33ff 	movlt.w	r3, #4294967295
 8007ae8:	3402      	adds	r4, #2
 8007aea:	9305      	str	r3, [sp, #20]
 8007aec:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007bb8 <_svfiprintf_r+0x1fc>
 8007af0:	7821      	ldrb	r1, [r4, #0]
 8007af2:	2203      	movs	r2, #3
 8007af4:	4650      	mov	r0, sl
 8007af6:	f7f8 fb6b 	bl	80001d0 <memchr>
 8007afa:	b140      	cbz	r0, 8007b0e <_svfiprintf_r+0x152>
 8007afc:	2340      	movs	r3, #64	; 0x40
 8007afe:	eba0 000a 	sub.w	r0, r0, sl
 8007b02:	fa03 f000 	lsl.w	r0, r3, r0
 8007b06:	9b04      	ldr	r3, [sp, #16]
 8007b08:	4303      	orrs	r3, r0
 8007b0a:	3401      	adds	r4, #1
 8007b0c:	9304      	str	r3, [sp, #16]
 8007b0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b12:	4826      	ldr	r0, [pc, #152]	; (8007bac <_svfiprintf_r+0x1f0>)
 8007b14:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007b18:	2206      	movs	r2, #6
 8007b1a:	f7f8 fb59 	bl	80001d0 <memchr>
 8007b1e:	2800      	cmp	r0, #0
 8007b20:	d038      	beq.n	8007b94 <_svfiprintf_r+0x1d8>
 8007b22:	4b23      	ldr	r3, [pc, #140]	; (8007bb0 <_svfiprintf_r+0x1f4>)
 8007b24:	bb1b      	cbnz	r3, 8007b6e <_svfiprintf_r+0x1b2>
 8007b26:	9b03      	ldr	r3, [sp, #12]
 8007b28:	3307      	adds	r3, #7
 8007b2a:	f023 0307 	bic.w	r3, r3, #7
 8007b2e:	3308      	adds	r3, #8
 8007b30:	9303      	str	r3, [sp, #12]
 8007b32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b34:	4433      	add	r3, r6
 8007b36:	9309      	str	r3, [sp, #36]	; 0x24
 8007b38:	e767      	b.n	8007a0a <_svfiprintf_r+0x4e>
 8007b3a:	fb0c 3202 	mla	r2, ip, r2, r3
 8007b3e:	460c      	mov	r4, r1
 8007b40:	2001      	movs	r0, #1
 8007b42:	e7a5      	b.n	8007a90 <_svfiprintf_r+0xd4>
 8007b44:	2300      	movs	r3, #0
 8007b46:	3401      	adds	r4, #1
 8007b48:	9305      	str	r3, [sp, #20]
 8007b4a:	4619      	mov	r1, r3
 8007b4c:	f04f 0c0a 	mov.w	ip, #10
 8007b50:	4620      	mov	r0, r4
 8007b52:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007b56:	3a30      	subs	r2, #48	; 0x30
 8007b58:	2a09      	cmp	r2, #9
 8007b5a:	d903      	bls.n	8007b64 <_svfiprintf_r+0x1a8>
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d0c5      	beq.n	8007aec <_svfiprintf_r+0x130>
 8007b60:	9105      	str	r1, [sp, #20]
 8007b62:	e7c3      	b.n	8007aec <_svfiprintf_r+0x130>
 8007b64:	fb0c 2101 	mla	r1, ip, r1, r2
 8007b68:	4604      	mov	r4, r0
 8007b6a:	2301      	movs	r3, #1
 8007b6c:	e7f0      	b.n	8007b50 <_svfiprintf_r+0x194>
 8007b6e:	ab03      	add	r3, sp, #12
 8007b70:	9300      	str	r3, [sp, #0]
 8007b72:	462a      	mov	r2, r5
 8007b74:	4b0f      	ldr	r3, [pc, #60]	; (8007bb4 <_svfiprintf_r+0x1f8>)
 8007b76:	a904      	add	r1, sp, #16
 8007b78:	4638      	mov	r0, r7
 8007b7a:	f3af 8000 	nop.w
 8007b7e:	1c42      	adds	r2, r0, #1
 8007b80:	4606      	mov	r6, r0
 8007b82:	d1d6      	bne.n	8007b32 <_svfiprintf_r+0x176>
 8007b84:	89ab      	ldrh	r3, [r5, #12]
 8007b86:	065b      	lsls	r3, r3, #25
 8007b88:	f53f af2c 	bmi.w	80079e4 <_svfiprintf_r+0x28>
 8007b8c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007b8e:	b01d      	add	sp, #116	; 0x74
 8007b90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b94:	ab03      	add	r3, sp, #12
 8007b96:	9300      	str	r3, [sp, #0]
 8007b98:	462a      	mov	r2, r5
 8007b9a:	4b06      	ldr	r3, [pc, #24]	; (8007bb4 <_svfiprintf_r+0x1f8>)
 8007b9c:	a904      	add	r1, sp, #16
 8007b9e:	4638      	mov	r0, r7
 8007ba0:	f000 f87a 	bl	8007c98 <_printf_i>
 8007ba4:	e7eb      	b.n	8007b7e <_svfiprintf_r+0x1c2>
 8007ba6:	bf00      	nop
 8007ba8:	080083bc 	.word	0x080083bc
 8007bac:	080083c6 	.word	0x080083c6
 8007bb0:	00000000 	.word	0x00000000
 8007bb4:	08007905 	.word	0x08007905
 8007bb8:	080083c2 	.word	0x080083c2

08007bbc <_printf_common>:
 8007bbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007bc0:	4616      	mov	r6, r2
 8007bc2:	4699      	mov	r9, r3
 8007bc4:	688a      	ldr	r2, [r1, #8]
 8007bc6:	690b      	ldr	r3, [r1, #16]
 8007bc8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007bcc:	4293      	cmp	r3, r2
 8007bce:	bfb8      	it	lt
 8007bd0:	4613      	movlt	r3, r2
 8007bd2:	6033      	str	r3, [r6, #0]
 8007bd4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007bd8:	4607      	mov	r7, r0
 8007bda:	460c      	mov	r4, r1
 8007bdc:	b10a      	cbz	r2, 8007be2 <_printf_common+0x26>
 8007bde:	3301      	adds	r3, #1
 8007be0:	6033      	str	r3, [r6, #0]
 8007be2:	6823      	ldr	r3, [r4, #0]
 8007be4:	0699      	lsls	r1, r3, #26
 8007be6:	bf42      	ittt	mi
 8007be8:	6833      	ldrmi	r3, [r6, #0]
 8007bea:	3302      	addmi	r3, #2
 8007bec:	6033      	strmi	r3, [r6, #0]
 8007bee:	6825      	ldr	r5, [r4, #0]
 8007bf0:	f015 0506 	ands.w	r5, r5, #6
 8007bf4:	d106      	bne.n	8007c04 <_printf_common+0x48>
 8007bf6:	f104 0a19 	add.w	sl, r4, #25
 8007bfa:	68e3      	ldr	r3, [r4, #12]
 8007bfc:	6832      	ldr	r2, [r6, #0]
 8007bfe:	1a9b      	subs	r3, r3, r2
 8007c00:	42ab      	cmp	r3, r5
 8007c02:	dc26      	bgt.n	8007c52 <_printf_common+0x96>
 8007c04:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007c08:	1e13      	subs	r3, r2, #0
 8007c0a:	6822      	ldr	r2, [r4, #0]
 8007c0c:	bf18      	it	ne
 8007c0e:	2301      	movne	r3, #1
 8007c10:	0692      	lsls	r2, r2, #26
 8007c12:	d42b      	bmi.n	8007c6c <_printf_common+0xb0>
 8007c14:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007c18:	4649      	mov	r1, r9
 8007c1a:	4638      	mov	r0, r7
 8007c1c:	47c0      	blx	r8
 8007c1e:	3001      	adds	r0, #1
 8007c20:	d01e      	beq.n	8007c60 <_printf_common+0xa4>
 8007c22:	6823      	ldr	r3, [r4, #0]
 8007c24:	68e5      	ldr	r5, [r4, #12]
 8007c26:	6832      	ldr	r2, [r6, #0]
 8007c28:	f003 0306 	and.w	r3, r3, #6
 8007c2c:	2b04      	cmp	r3, #4
 8007c2e:	bf08      	it	eq
 8007c30:	1aad      	subeq	r5, r5, r2
 8007c32:	68a3      	ldr	r3, [r4, #8]
 8007c34:	6922      	ldr	r2, [r4, #16]
 8007c36:	bf0c      	ite	eq
 8007c38:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007c3c:	2500      	movne	r5, #0
 8007c3e:	4293      	cmp	r3, r2
 8007c40:	bfc4      	itt	gt
 8007c42:	1a9b      	subgt	r3, r3, r2
 8007c44:	18ed      	addgt	r5, r5, r3
 8007c46:	2600      	movs	r6, #0
 8007c48:	341a      	adds	r4, #26
 8007c4a:	42b5      	cmp	r5, r6
 8007c4c:	d11a      	bne.n	8007c84 <_printf_common+0xc8>
 8007c4e:	2000      	movs	r0, #0
 8007c50:	e008      	b.n	8007c64 <_printf_common+0xa8>
 8007c52:	2301      	movs	r3, #1
 8007c54:	4652      	mov	r2, sl
 8007c56:	4649      	mov	r1, r9
 8007c58:	4638      	mov	r0, r7
 8007c5a:	47c0      	blx	r8
 8007c5c:	3001      	adds	r0, #1
 8007c5e:	d103      	bne.n	8007c68 <_printf_common+0xac>
 8007c60:	f04f 30ff 	mov.w	r0, #4294967295
 8007c64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c68:	3501      	adds	r5, #1
 8007c6a:	e7c6      	b.n	8007bfa <_printf_common+0x3e>
 8007c6c:	18e1      	adds	r1, r4, r3
 8007c6e:	1c5a      	adds	r2, r3, #1
 8007c70:	2030      	movs	r0, #48	; 0x30
 8007c72:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007c76:	4422      	add	r2, r4
 8007c78:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007c7c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007c80:	3302      	adds	r3, #2
 8007c82:	e7c7      	b.n	8007c14 <_printf_common+0x58>
 8007c84:	2301      	movs	r3, #1
 8007c86:	4622      	mov	r2, r4
 8007c88:	4649      	mov	r1, r9
 8007c8a:	4638      	mov	r0, r7
 8007c8c:	47c0      	blx	r8
 8007c8e:	3001      	adds	r0, #1
 8007c90:	d0e6      	beq.n	8007c60 <_printf_common+0xa4>
 8007c92:	3601      	adds	r6, #1
 8007c94:	e7d9      	b.n	8007c4a <_printf_common+0x8e>
	...

08007c98 <_printf_i>:
 8007c98:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007c9c:	460c      	mov	r4, r1
 8007c9e:	4691      	mov	r9, r2
 8007ca0:	7e27      	ldrb	r7, [r4, #24]
 8007ca2:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007ca4:	2f78      	cmp	r7, #120	; 0x78
 8007ca6:	4680      	mov	r8, r0
 8007ca8:	469a      	mov	sl, r3
 8007caa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007cae:	d807      	bhi.n	8007cc0 <_printf_i+0x28>
 8007cb0:	2f62      	cmp	r7, #98	; 0x62
 8007cb2:	d80a      	bhi.n	8007cca <_printf_i+0x32>
 8007cb4:	2f00      	cmp	r7, #0
 8007cb6:	f000 80d8 	beq.w	8007e6a <_printf_i+0x1d2>
 8007cba:	2f58      	cmp	r7, #88	; 0x58
 8007cbc:	f000 80a3 	beq.w	8007e06 <_printf_i+0x16e>
 8007cc0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007cc4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007cc8:	e03a      	b.n	8007d40 <_printf_i+0xa8>
 8007cca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007cce:	2b15      	cmp	r3, #21
 8007cd0:	d8f6      	bhi.n	8007cc0 <_printf_i+0x28>
 8007cd2:	a001      	add	r0, pc, #4	; (adr r0, 8007cd8 <_printf_i+0x40>)
 8007cd4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007cd8:	08007d31 	.word	0x08007d31
 8007cdc:	08007d45 	.word	0x08007d45
 8007ce0:	08007cc1 	.word	0x08007cc1
 8007ce4:	08007cc1 	.word	0x08007cc1
 8007ce8:	08007cc1 	.word	0x08007cc1
 8007cec:	08007cc1 	.word	0x08007cc1
 8007cf0:	08007d45 	.word	0x08007d45
 8007cf4:	08007cc1 	.word	0x08007cc1
 8007cf8:	08007cc1 	.word	0x08007cc1
 8007cfc:	08007cc1 	.word	0x08007cc1
 8007d00:	08007cc1 	.word	0x08007cc1
 8007d04:	08007e51 	.word	0x08007e51
 8007d08:	08007d75 	.word	0x08007d75
 8007d0c:	08007e33 	.word	0x08007e33
 8007d10:	08007cc1 	.word	0x08007cc1
 8007d14:	08007cc1 	.word	0x08007cc1
 8007d18:	08007e73 	.word	0x08007e73
 8007d1c:	08007cc1 	.word	0x08007cc1
 8007d20:	08007d75 	.word	0x08007d75
 8007d24:	08007cc1 	.word	0x08007cc1
 8007d28:	08007cc1 	.word	0x08007cc1
 8007d2c:	08007e3b 	.word	0x08007e3b
 8007d30:	680b      	ldr	r3, [r1, #0]
 8007d32:	1d1a      	adds	r2, r3, #4
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	600a      	str	r2, [r1, #0]
 8007d38:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007d3c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007d40:	2301      	movs	r3, #1
 8007d42:	e0a3      	b.n	8007e8c <_printf_i+0x1f4>
 8007d44:	6825      	ldr	r5, [r4, #0]
 8007d46:	6808      	ldr	r0, [r1, #0]
 8007d48:	062e      	lsls	r6, r5, #24
 8007d4a:	f100 0304 	add.w	r3, r0, #4
 8007d4e:	d50a      	bpl.n	8007d66 <_printf_i+0xce>
 8007d50:	6805      	ldr	r5, [r0, #0]
 8007d52:	600b      	str	r3, [r1, #0]
 8007d54:	2d00      	cmp	r5, #0
 8007d56:	da03      	bge.n	8007d60 <_printf_i+0xc8>
 8007d58:	232d      	movs	r3, #45	; 0x2d
 8007d5a:	426d      	negs	r5, r5
 8007d5c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007d60:	485e      	ldr	r0, [pc, #376]	; (8007edc <_printf_i+0x244>)
 8007d62:	230a      	movs	r3, #10
 8007d64:	e019      	b.n	8007d9a <_printf_i+0x102>
 8007d66:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007d6a:	6805      	ldr	r5, [r0, #0]
 8007d6c:	600b      	str	r3, [r1, #0]
 8007d6e:	bf18      	it	ne
 8007d70:	b22d      	sxthne	r5, r5
 8007d72:	e7ef      	b.n	8007d54 <_printf_i+0xbc>
 8007d74:	680b      	ldr	r3, [r1, #0]
 8007d76:	6825      	ldr	r5, [r4, #0]
 8007d78:	1d18      	adds	r0, r3, #4
 8007d7a:	6008      	str	r0, [r1, #0]
 8007d7c:	0628      	lsls	r0, r5, #24
 8007d7e:	d501      	bpl.n	8007d84 <_printf_i+0xec>
 8007d80:	681d      	ldr	r5, [r3, #0]
 8007d82:	e002      	b.n	8007d8a <_printf_i+0xf2>
 8007d84:	0669      	lsls	r1, r5, #25
 8007d86:	d5fb      	bpl.n	8007d80 <_printf_i+0xe8>
 8007d88:	881d      	ldrh	r5, [r3, #0]
 8007d8a:	4854      	ldr	r0, [pc, #336]	; (8007edc <_printf_i+0x244>)
 8007d8c:	2f6f      	cmp	r7, #111	; 0x6f
 8007d8e:	bf0c      	ite	eq
 8007d90:	2308      	moveq	r3, #8
 8007d92:	230a      	movne	r3, #10
 8007d94:	2100      	movs	r1, #0
 8007d96:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007d9a:	6866      	ldr	r6, [r4, #4]
 8007d9c:	60a6      	str	r6, [r4, #8]
 8007d9e:	2e00      	cmp	r6, #0
 8007da0:	bfa2      	ittt	ge
 8007da2:	6821      	ldrge	r1, [r4, #0]
 8007da4:	f021 0104 	bicge.w	r1, r1, #4
 8007da8:	6021      	strge	r1, [r4, #0]
 8007daa:	b90d      	cbnz	r5, 8007db0 <_printf_i+0x118>
 8007dac:	2e00      	cmp	r6, #0
 8007dae:	d04d      	beq.n	8007e4c <_printf_i+0x1b4>
 8007db0:	4616      	mov	r6, r2
 8007db2:	fbb5 f1f3 	udiv	r1, r5, r3
 8007db6:	fb03 5711 	mls	r7, r3, r1, r5
 8007dba:	5dc7      	ldrb	r7, [r0, r7]
 8007dbc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007dc0:	462f      	mov	r7, r5
 8007dc2:	42bb      	cmp	r3, r7
 8007dc4:	460d      	mov	r5, r1
 8007dc6:	d9f4      	bls.n	8007db2 <_printf_i+0x11a>
 8007dc8:	2b08      	cmp	r3, #8
 8007dca:	d10b      	bne.n	8007de4 <_printf_i+0x14c>
 8007dcc:	6823      	ldr	r3, [r4, #0]
 8007dce:	07df      	lsls	r7, r3, #31
 8007dd0:	d508      	bpl.n	8007de4 <_printf_i+0x14c>
 8007dd2:	6923      	ldr	r3, [r4, #16]
 8007dd4:	6861      	ldr	r1, [r4, #4]
 8007dd6:	4299      	cmp	r1, r3
 8007dd8:	bfde      	ittt	le
 8007dda:	2330      	movle	r3, #48	; 0x30
 8007ddc:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007de0:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007de4:	1b92      	subs	r2, r2, r6
 8007de6:	6122      	str	r2, [r4, #16]
 8007de8:	f8cd a000 	str.w	sl, [sp]
 8007dec:	464b      	mov	r3, r9
 8007dee:	aa03      	add	r2, sp, #12
 8007df0:	4621      	mov	r1, r4
 8007df2:	4640      	mov	r0, r8
 8007df4:	f7ff fee2 	bl	8007bbc <_printf_common>
 8007df8:	3001      	adds	r0, #1
 8007dfa:	d14c      	bne.n	8007e96 <_printf_i+0x1fe>
 8007dfc:	f04f 30ff 	mov.w	r0, #4294967295
 8007e00:	b004      	add	sp, #16
 8007e02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e06:	4835      	ldr	r0, [pc, #212]	; (8007edc <_printf_i+0x244>)
 8007e08:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007e0c:	6823      	ldr	r3, [r4, #0]
 8007e0e:	680e      	ldr	r6, [r1, #0]
 8007e10:	061f      	lsls	r7, r3, #24
 8007e12:	f856 5b04 	ldr.w	r5, [r6], #4
 8007e16:	600e      	str	r6, [r1, #0]
 8007e18:	d514      	bpl.n	8007e44 <_printf_i+0x1ac>
 8007e1a:	07d9      	lsls	r1, r3, #31
 8007e1c:	bf44      	itt	mi
 8007e1e:	f043 0320 	orrmi.w	r3, r3, #32
 8007e22:	6023      	strmi	r3, [r4, #0]
 8007e24:	b91d      	cbnz	r5, 8007e2e <_printf_i+0x196>
 8007e26:	6823      	ldr	r3, [r4, #0]
 8007e28:	f023 0320 	bic.w	r3, r3, #32
 8007e2c:	6023      	str	r3, [r4, #0]
 8007e2e:	2310      	movs	r3, #16
 8007e30:	e7b0      	b.n	8007d94 <_printf_i+0xfc>
 8007e32:	6823      	ldr	r3, [r4, #0]
 8007e34:	f043 0320 	orr.w	r3, r3, #32
 8007e38:	6023      	str	r3, [r4, #0]
 8007e3a:	2378      	movs	r3, #120	; 0x78
 8007e3c:	4828      	ldr	r0, [pc, #160]	; (8007ee0 <_printf_i+0x248>)
 8007e3e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007e42:	e7e3      	b.n	8007e0c <_printf_i+0x174>
 8007e44:	065e      	lsls	r6, r3, #25
 8007e46:	bf48      	it	mi
 8007e48:	b2ad      	uxthmi	r5, r5
 8007e4a:	e7e6      	b.n	8007e1a <_printf_i+0x182>
 8007e4c:	4616      	mov	r6, r2
 8007e4e:	e7bb      	b.n	8007dc8 <_printf_i+0x130>
 8007e50:	680b      	ldr	r3, [r1, #0]
 8007e52:	6826      	ldr	r6, [r4, #0]
 8007e54:	6960      	ldr	r0, [r4, #20]
 8007e56:	1d1d      	adds	r5, r3, #4
 8007e58:	600d      	str	r5, [r1, #0]
 8007e5a:	0635      	lsls	r5, r6, #24
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	d501      	bpl.n	8007e64 <_printf_i+0x1cc>
 8007e60:	6018      	str	r0, [r3, #0]
 8007e62:	e002      	b.n	8007e6a <_printf_i+0x1d2>
 8007e64:	0671      	lsls	r1, r6, #25
 8007e66:	d5fb      	bpl.n	8007e60 <_printf_i+0x1c8>
 8007e68:	8018      	strh	r0, [r3, #0]
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	6123      	str	r3, [r4, #16]
 8007e6e:	4616      	mov	r6, r2
 8007e70:	e7ba      	b.n	8007de8 <_printf_i+0x150>
 8007e72:	680b      	ldr	r3, [r1, #0]
 8007e74:	1d1a      	adds	r2, r3, #4
 8007e76:	600a      	str	r2, [r1, #0]
 8007e78:	681e      	ldr	r6, [r3, #0]
 8007e7a:	6862      	ldr	r2, [r4, #4]
 8007e7c:	2100      	movs	r1, #0
 8007e7e:	4630      	mov	r0, r6
 8007e80:	f7f8 f9a6 	bl	80001d0 <memchr>
 8007e84:	b108      	cbz	r0, 8007e8a <_printf_i+0x1f2>
 8007e86:	1b80      	subs	r0, r0, r6
 8007e88:	6060      	str	r0, [r4, #4]
 8007e8a:	6863      	ldr	r3, [r4, #4]
 8007e8c:	6123      	str	r3, [r4, #16]
 8007e8e:	2300      	movs	r3, #0
 8007e90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007e94:	e7a8      	b.n	8007de8 <_printf_i+0x150>
 8007e96:	6923      	ldr	r3, [r4, #16]
 8007e98:	4632      	mov	r2, r6
 8007e9a:	4649      	mov	r1, r9
 8007e9c:	4640      	mov	r0, r8
 8007e9e:	47d0      	blx	sl
 8007ea0:	3001      	adds	r0, #1
 8007ea2:	d0ab      	beq.n	8007dfc <_printf_i+0x164>
 8007ea4:	6823      	ldr	r3, [r4, #0]
 8007ea6:	079b      	lsls	r3, r3, #30
 8007ea8:	d413      	bmi.n	8007ed2 <_printf_i+0x23a>
 8007eaa:	68e0      	ldr	r0, [r4, #12]
 8007eac:	9b03      	ldr	r3, [sp, #12]
 8007eae:	4298      	cmp	r0, r3
 8007eb0:	bfb8      	it	lt
 8007eb2:	4618      	movlt	r0, r3
 8007eb4:	e7a4      	b.n	8007e00 <_printf_i+0x168>
 8007eb6:	2301      	movs	r3, #1
 8007eb8:	4632      	mov	r2, r6
 8007eba:	4649      	mov	r1, r9
 8007ebc:	4640      	mov	r0, r8
 8007ebe:	47d0      	blx	sl
 8007ec0:	3001      	adds	r0, #1
 8007ec2:	d09b      	beq.n	8007dfc <_printf_i+0x164>
 8007ec4:	3501      	adds	r5, #1
 8007ec6:	68e3      	ldr	r3, [r4, #12]
 8007ec8:	9903      	ldr	r1, [sp, #12]
 8007eca:	1a5b      	subs	r3, r3, r1
 8007ecc:	42ab      	cmp	r3, r5
 8007ece:	dcf2      	bgt.n	8007eb6 <_printf_i+0x21e>
 8007ed0:	e7eb      	b.n	8007eaa <_printf_i+0x212>
 8007ed2:	2500      	movs	r5, #0
 8007ed4:	f104 0619 	add.w	r6, r4, #25
 8007ed8:	e7f5      	b.n	8007ec6 <_printf_i+0x22e>
 8007eda:	bf00      	nop
 8007edc:	080083cd 	.word	0x080083cd
 8007ee0:	080083de 	.word	0x080083de

08007ee4 <__retarget_lock_acquire_recursive>:
 8007ee4:	4770      	bx	lr

08007ee6 <__retarget_lock_release_recursive>:
 8007ee6:	4770      	bx	lr

08007ee8 <memcpy>:
 8007ee8:	440a      	add	r2, r1
 8007eea:	4291      	cmp	r1, r2
 8007eec:	f100 33ff 	add.w	r3, r0, #4294967295
 8007ef0:	d100      	bne.n	8007ef4 <memcpy+0xc>
 8007ef2:	4770      	bx	lr
 8007ef4:	b510      	push	{r4, lr}
 8007ef6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007efa:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007efe:	4291      	cmp	r1, r2
 8007f00:	d1f9      	bne.n	8007ef6 <memcpy+0xe>
 8007f02:	bd10      	pop	{r4, pc}

08007f04 <memmove>:
 8007f04:	4288      	cmp	r0, r1
 8007f06:	b510      	push	{r4, lr}
 8007f08:	eb01 0402 	add.w	r4, r1, r2
 8007f0c:	d902      	bls.n	8007f14 <memmove+0x10>
 8007f0e:	4284      	cmp	r4, r0
 8007f10:	4623      	mov	r3, r4
 8007f12:	d807      	bhi.n	8007f24 <memmove+0x20>
 8007f14:	1e43      	subs	r3, r0, #1
 8007f16:	42a1      	cmp	r1, r4
 8007f18:	d008      	beq.n	8007f2c <memmove+0x28>
 8007f1a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007f1e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007f22:	e7f8      	b.n	8007f16 <memmove+0x12>
 8007f24:	4402      	add	r2, r0
 8007f26:	4601      	mov	r1, r0
 8007f28:	428a      	cmp	r2, r1
 8007f2a:	d100      	bne.n	8007f2e <memmove+0x2a>
 8007f2c:	bd10      	pop	{r4, pc}
 8007f2e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007f32:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007f36:	e7f7      	b.n	8007f28 <memmove+0x24>

08007f38 <_realloc_r>:
 8007f38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f3a:	4607      	mov	r7, r0
 8007f3c:	4614      	mov	r4, r2
 8007f3e:	460e      	mov	r6, r1
 8007f40:	b921      	cbnz	r1, 8007f4c <_realloc_r+0x14>
 8007f42:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007f46:	4611      	mov	r1, r2
 8007f48:	f7ff bc46 	b.w	80077d8 <_malloc_r>
 8007f4c:	b922      	cbnz	r2, 8007f58 <_realloc_r+0x20>
 8007f4e:	f7ff fbf3 	bl	8007738 <_free_r>
 8007f52:	4625      	mov	r5, r4
 8007f54:	4628      	mov	r0, r5
 8007f56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f58:	f000 f814 	bl	8007f84 <_malloc_usable_size_r>
 8007f5c:	42a0      	cmp	r0, r4
 8007f5e:	d20f      	bcs.n	8007f80 <_realloc_r+0x48>
 8007f60:	4621      	mov	r1, r4
 8007f62:	4638      	mov	r0, r7
 8007f64:	f7ff fc38 	bl	80077d8 <_malloc_r>
 8007f68:	4605      	mov	r5, r0
 8007f6a:	2800      	cmp	r0, #0
 8007f6c:	d0f2      	beq.n	8007f54 <_realloc_r+0x1c>
 8007f6e:	4631      	mov	r1, r6
 8007f70:	4622      	mov	r2, r4
 8007f72:	f7ff ffb9 	bl	8007ee8 <memcpy>
 8007f76:	4631      	mov	r1, r6
 8007f78:	4638      	mov	r0, r7
 8007f7a:	f7ff fbdd 	bl	8007738 <_free_r>
 8007f7e:	e7e9      	b.n	8007f54 <_realloc_r+0x1c>
 8007f80:	4635      	mov	r5, r6
 8007f82:	e7e7      	b.n	8007f54 <_realloc_r+0x1c>

08007f84 <_malloc_usable_size_r>:
 8007f84:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007f88:	1f18      	subs	r0, r3, #4
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	bfbc      	itt	lt
 8007f8e:	580b      	ldrlt	r3, [r1, r0]
 8007f90:	18c0      	addlt	r0, r0, r3
 8007f92:	4770      	bx	lr

08007f94 <_init>:
 8007f94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f96:	bf00      	nop
 8007f98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f9a:	bc08      	pop	{r3}
 8007f9c:	469e      	mov	lr, r3
 8007f9e:	4770      	bx	lr

08007fa0 <_fini>:
 8007fa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fa2:	bf00      	nop
 8007fa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007fa6:	bc08      	pop	{r3}
 8007fa8:	469e      	mov	lr, r3
 8007faa:	4770      	bx	lr
